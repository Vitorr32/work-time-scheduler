{"version":3,"sources":["logo.svg","redux/appointment/appointment.types.js","utils/constants.js","utils/periods.js","components/AppointmentForm/AppointmentForm.component.js","redux/appointment/appointment.actions.js","redux/period/period.types.js","utils/PeriodType.js","components/PeriodSetter/PeriodSetter.component.js","redux/period/period.actions.js","components/Header/Header.component.js","pages/Home/Home.component.js","App.js","reportWebVitals.js","redux/appointment/appointment.utils.js","redux/appointment/appointment.reducer.js","redux/period/period.reducer.js","redux/root_reducer.js","redux/store.js","index.js"],"names":["ADD_APPOINTMENTS","UPDATED_APPOINTMENT","ADD_JOB","UPDATE_JOB","APPOINTMENT_STATE_NOT_STARTED","APPOINTMENT_STATE_COMPLETED","SCHEDULE_WORK_ONLY","SCHEDULE_FREE_TIME","SCHEDULE_FULL","verifyAppointmentDisponibility","totalHoursNeeded","dueDate","currentAppointments","workStart","workEnd","freeStart","freeEnd","vacatedWorkPeriods","getAllVacatedSpacesInPeriodUntilDueDate","currentDistributedHours","getTotalHoursOfPeriods","length","state","periods","vacatedFreePeriods","distributedHoursInFreePeriod","mergedPeriods","mergeContinousAppointmentsInDifferentPeriods","console","error","periodStart","periodEnd","appointments","hoursNeeded","startDate","allContinuousPeriods","currentTimestamp","moment","add","startOf","set","currentContinuousPeriod","start","end","hours","isBefore","clone","push","Object","assign","appointment","find","isBetween","endDate","undefined","isSameOrAfter","get","mergedAppointment","indexesToIgnore","forEach","index","includes","appointmentToMergeIndex","findIndex","appointmentToCompare","isSame","diff","reduce","sum","period","layout","labelCol","span","wrapperCol","AppointmentForm","props","formRef","React","createRef","isModalVisible","isFutherActionModalVisible","appointmentPreview","appointmentPeriods","appointmentSuccessful","values","newJobId","this","jobs","appointmentsToCreate","map","title","name","price","description","id","jobId","newJob","totalHours","addJob","addAppointments","lastChange","value","verifiedDisponibility","setState","shouldDelay","current","getFieldsValue","finalAppointments","Math","min","max","onFormSubmit","_","Promise","reject","resolve","Fragment","type","onClick","visible","okText","onCancel","onOk","validateFields","then","catch","info","log","ref","initialValues","remember","onFinish","onFieldsChange","previewPeriods","bind","Item","label","rules","required","message","TextArea","formatter","replace","parser","precision","validator","validateDueDate","format","showTime","className","footer","Tooltip","onFutherActionSet","icon","FieldTimeOutlined","CoffeeOutlined","Component","connect","dispatch","payload","types","SET_WORK_PERIOD","SET_FREE_PERIOD","WORK_PERIOD","FREE_PERIOD","RangePicker","TimePicker","PeriodSetter","periodType","PeriodType","setWorkPeriod","periodRange","setFreePeriod","getPeriodLabel","ownProps","Number","Header","HomeComponent","input","isHoursBetween","TimeTableCell","checkStart","checkEnd","periodStartDate","periodEndDate","data","formatDate","AppointmentContent","style","height","hour","minute","padding","Content","onCompleteTheAppointment","appointmentData","CheckCircleOutlined","size","onDelayTheAppointment","DoubleRightOutlined","indexOnList","toCompare","jobIndex","findJobOfAppointment","updatedAppointment","updateAppointment","updateJob","job","onUpdateAppointmentOnJob","appointmentIndex","children","isAppointmentDone","isAppointmentNow","isAppointmentLate","Appointment","isSameOrBefore","isAfter","Paper","locale","defaultCurrentViewName","timeTableCellComponent","TableTimeCellRenderer","appointmentComponent","getAppointmentComponet","appointmentContentComponent","getCustomAppointmentContent","showCloseButton","contentComponent","getTooltipContent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","updateAppointmentOnList","appointmentList","toUpdateAppointment","updatedList","updateJobtOnList","jobList","toUpdateJob","INITIAL_STATE","appointmentReducer","action","periodReducer","persistConfig","key","storage","rootReducer","combineReducers","persistReducer","store","createStore","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAAe,I,qJCAFA,EAAmB,mBACnBC,EAAqB,sBACrBC,EAAU,UACVC,EAAa,a,iBCDbC,G,OAAgC,iCAChCC,EAA8B,8BAG9BC,EAAqB,qBACrBC,EAAqB,qBACrBC,EAAgB,gB,kBCLtB,SAASC,EAA+BC,EAAkBC,EAASC,EAAnE,KAAqI,IAAD,mBAA3CC,EAA2C,KAAhCC,EAAgC,wBAArBC,EAAqB,KAAVC,EAAU,KACvI,GAAKH,GAAcC,EAAnB,CAKA,IAAMG,EAAqBC,EACvBL,EACAC,EACAH,EACAC,EACAF,GAGES,EAA0BC,EAAuBH,GAGvD,GAAiC,GAA7BA,EAAmBI,QAAeF,GAA2BT,EAC7D,MAAO,CACHY,MAAOhB,EACPiB,QAASN,GAIjB,GAAKF,GAAcC,EAAnB,CAKA,IAEMQ,EAAqBN,EACvBH,EACAC,EACAL,EACAC,EAN4BF,EAAmBS,GAU7CM,EAA+BL,EAAuBI,GACtDE,EAAgBC,EAA6C,GAAD,mBAAKV,GAAL,YAA4BO,KAE9F,OAAiC,GAA7BA,EAAmBH,QAAeF,EAA0BM,GAAgCf,EACrF,CACHY,MAAOf,EACPgB,QAASG,GAIV,CACHJ,MAAOd,EACPe,QAASG,GA1BTE,QAAQC,MAAM,kGAvBdD,QAAQC,MAAM,qDAqDf,SAASX,EAAwCY,EAAaC,EAAWpB,EAASqB,EAAcC,EAAaC,GAUhH,IATA,IAAMC,EAAuB,GAEzBC,EAAmBF,GAAaG,MAASC,IAAI,EAAG,OAAOC,QAAQ,OAAOC,IAAI,OAAQV,GAClFW,EAA0B,CAC1BC,MAAO,KACPC,IAAK,KACLC,MAAO,GAGJR,EAAiBS,SAASlC,IAAU,CAGvC,GAAmB,GAAfsB,EACA,GAAIQ,EAAwBC,OACxB,GAAItB,EAAuB,GAAD,OAAKe,EAAL,CAA2B,CAAES,MAAO,EAAIH,EAAwBG,WAAaX,EAAa,CAChHQ,EAAwBE,IAAMP,EAAiBU,QAC/CL,EAAwBG,QAGxBT,EAAqBY,KAAKC,OAAOC,OAAO,GAAIR,IAE5CA,EAA0B,CACtBC,MAAO,KACPC,IAAK,KACLC,MAAO,GAEX,YAED,GAAIxB,EAAuBe,IAAyBF,EACvD,MAKR,IAAMiB,EAAclB,EAAamB,MAAK,SAAAD,GAElC,QAAId,EAAiBgB,UAAUF,EAAYhB,UAAWgB,EAAYG,aAASC,EAAW,SAQ1F,GAAIJ,EAEIT,EAAwBC,QACxBD,EAAwBE,IAAMP,EAAiBU,QAC/CL,EAAwBG,QAGxBT,EAAqBY,KAAKC,OAAOC,OAAO,GAAIR,IAE5CA,EAA0B,CACtBC,MAAO,KACPC,IAAK,KACLC,MAAO,IAKXR,EADAc,EAAYG,QAAQE,cAAcL,EAAYG,QAAQP,QAAQP,QAAQ,OAAOC,IAAI,OAAQT,IACtEK,EAAiBE,IAAI,EAAG,OAAOE,IAAI,OAAQV,GAE3CM,EAAiBI,IAAI,OAAQU,EAAYG,QAAQG,IAAI,aAnBhF,CAyBA,GAAIpB,EAAiBmB,cAAc5C,GAAU,CACrC8B,EAAwBC,QACxBD,EAAwBE,IAAMP,EAAiBU,QAC/CL,EAAwBG,QAExBT,EAAqBY,KAAKC,OAAOC,OAAO,GAAIR,KAGhD,MAIAL,EAAiBmB,cAAcnB,EAAiBU,QAAQN,IAAI,OAAQT,KAChEU,EAAwBC,QACxBD,EAAwBE,IAAMP,EAAiBU,QAC/CL,EAAwBG,QAGxBT,EAAqBY,KAAKC,OAAOC,OAAO,GAAIR,IAE5CA,EAA0B,CACtBC,MAAO,KACPC,IAAK,KACLC,MAAO,IAIfR,EAAmBA,EAAiBE,IAAI,EAAG,OAAOE,IAAI,OAAQV,KAM9DW,EAAwBC,OACxBD,EAAwBE,IAAMP,EAAiBU,QAC/CL,EAAwBG,SAExBH,EAAwBC,MAAQN,EAAiBU,QAGrDV,EAAmBA,EAAiBE,IAAI,EAAG,UAG/C,OAAOH,EAGJ,SAASR,EAA6CK,GACzD,IAAMyB,EAAoB,GACpBC,EAAkB,GAkBxB,OAhBA1B,EAAa2B,SAAQ,SAACT,EAAaU,GAC/B,IAAIF,EAAgBG,SAASD,GAA7B,CAIA,IAAME,EAA0B9B,EAAa+B,WAAU,SAAAC,GAAoB,OAAId,EAAYP,IAAIsB,OAAOD,EAAqBtB,WAC1F,IAA7BoB,IACAJ,EAAgBX,KAAKe,GAErBZ,EAAYP,IAAMX,EAAa8B,GAAyBnB,IACxDO,EAAYN,MAAQM,EAAYP,IAAIuB,KAAKhB,EAAYR,MAAO,UAGhEe,EAAkBV,KAAKG,OAGpBO,EAGJ,SAASrC,EAAuBG,GACnC,OAAOA,EAAQ4C,QAAO,SAACC,EAAKC,GAAN,MAAkB,CAAEzB,MAAOwB,EAAIxB,MAAQyB,EAAOzB,SAAU,CAAEA,MAAO,IAAKA,M,qBC1L1F0B,EAAS,CACXC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAGlBE,E,kDAGF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAHVC,QAAUC,IAAMC,YAKZ,EAAKxD,MAAQ,CACTyD,gBAAgB,EAChBC,4BAA4B,EAC5BC,mBAAoB,KACpBC,mBAAoB,GACpBC,uBAAuB,GARZ,E,gDAYnB,SAAaC,GACT,IAAMC,EAAWC,KAAKX,MAAMY,KAAKlE,OAE3BmE,EAAuBF,KAAKhE,MAAM4D,mBAAmBO,KAAI,SAACpB,EAAQT,GAAT,MAAoB,CAC/E1B,UAAWmC,EAAO3B,MAClBW,QAASgB,EAAO1B,IAChB+C,MAAON,EAAOO,KACdC,MAAOR,EAAOQ,MACdC,YAAaT,EAAOS,YACpBvE,MAAOlB,EACPwC,MAAOyB,EAAOzB,MACdkD,GAAI,OAAST,EAAW,OAASzB,EACjCmC,MAAOV,MAGLW,EAAS,CACXF,GAAIT,EACJM,KAAMP,EAAOO,KACb3D,aAAcwD,EACdI,MAAOR,EAAOQ,MACdC,YAAaT,EAAOS,YACpBlF,QAASyE,EAAOzE,QAChBsF,WAAYb,EAAOxC,OAIvB0C,KAAKX,MAAMuB,OAAOF,GAClBV,KAAKX,MAAMwB,gBAAgBX,K,4BAG/B,cAA4D,IAA5CY,EAA2C,uCAAjBxD,GAAiB,qBAAVjC,EAAU,OACU2E,KAAKX,MAA9D3C,EAD+C,EAC/CA,aAAcnB,EADiC,EACjCA,UAAWC,EADsB,EACtBA,QAASC,EADa,EACbA,UAAWC,EADE,EACFA,QACrD,GAAIoF,EAAWT,KAAK9B,SAAS,UAAYuC,EAAWT,KAAK9B,SAAS,WAC9D,GAAIjB,EAAMyD,OAAS1F,EAAQ0F,MAAO,CAC9B,IAAMC,EAAwB7F,EAA+BmC,EAAMyD,MAAO1F,EAAQ0F,MAAOrE,EAAc,CAACnB,EAAWC,GAAU,CAACC,EAAWC,IAEzI,IAAKsF,EAED,YADA1E,QAAQC,MAAM,+BAIlB,OAAQyE,EAAsBhF,OAC1B,KAAKhB,EACDgF,KAAKiB,SAAS,CACVtB,mBAAoB,4DACpBC,mBAAoBoB,EAAsB/E,QAC1C4D,uBAAuB,IAE3B,MACJ,KAAK5E,EACD+E,KAAKiB,SAAS,CACVtB,mBAAoB,oDACpBC,mBAAoBoB,EAAsB/E,QAC1C4D,uBAAuB,IAE3B,MACJ,KAAK3E,EACD8E,KAAKiB,SAAS,CACVtB,mBAAoB,uGACpBC,mBAAoBoB,EAAsB/E,QAC1C4D,uBAAuB,UAKnCG,KAAKiB,SAAS,CACVtB,mBAAoB,GACpBC,mBAAoB,O,+BAMpC,SAAkBsB,GAAc,IAAD,SACsClB,KAAKX,MAA9D3C,EADmB,EACnBA,aAAcnB,EADK,EACLA,UAAWC,EADN,EACMA,QAASC,EADf,EACeA,UAAWC,EAD1B,EAC0BA,QAD1B,EAEAsE,KAAKV,QAAQ6B,QAAQC,iBAAxC/F,EAFmB,EAEnBA,QAASiC,EAFU,EAEVA,MAWX+D,EAAoBhF,EATAT,EACtBsF,EAAcI,KAAKC,IAAIhG,EAAWE,GAAa6F,KAAKE,IAAIhG,EAASE,GACjEwF,EAAcI,KAAKE,IAAIhG,EAASE,GAAW4F,KAAKC,IAAIhG,EAAWE,GAC/DyF,EAAc7F,EAAQ6B,IAAI,OAAQ,MAAQ7B,EAHmB,sBAIzDqB,GAJyD,YAIxCsD,KAAKhE,MAAM4D,qBAChCtC,EAAQxB,EAAuBkE,KAAKhE,MAAM4D,oBAC1CsB,EAAc7F,EAAU0B,MAASE,QAAQ,OAAOC,IAAI,OAAQoE,KAAKE,IAAIhG,EAASE,KAGQsE,KAAKhE,MAAM4D,oBAErGI,KAAKiB,SAAS,CACVrB,mBAAoByB,EACpBxB,uBAAuB,EACvBF,mBAAoB,GACpBF,gBAAgB,EAChBC,4BAA4B,IAC7B,kBAAM,EAAK+B,aAAa,EAAKnC,QAAQ6B,QAAQC,uB,6BAGpD,SAAgBM,EAAGrG,GACf,OAAI0B,MAASkB,cAAc5C,GAChBsG,QAAQC,OAAO,uCAGnBD,QAAQE,Y,oBAGnB,WAAU,IAAD,OACL,OACI,eAAC,IAAMC,SAAP,WACI,cAAC,IAAD,CAAQC,KAAK,UAAUC,QAAS,kBAAM,EAAKf,SAAS,CAAExB,gBAAgB,KAAtE,uBAEA,cAAC,IAAD,CAAOW,MAAM,YACT6B,QAASjC,KAAKhE,MAAMyD,eACpByC,OAAQ,SACRC,SAAU,kBAAM,EAAKlB,SAAS,CAAExB,gBAAgB,KAChD2C,KAAM,WACF,EAAK9C,QAAQ6B,QAAQkB,iBAChBC,MAAK,SAAAxC,GACE,EAAK9D,MAAM6D,uBACX,EAAK4B,aAAa3B,GAClB,EAAKmB,SAAS,CAAExB,gBAAgB,KAEhC,EAAKwB,SAAS,CAAEvB,4BAA4B,OAGnD6C,OAAM,SAAAC,GACHlG,QAAQmG,IAAI,mBAAoBD,OAfhD,SAoBI,eAAC,IAAD,2BACQxD,GADR,IAEI0D,IAAK1C,KAAKV,QACVe,KAAK,YACLsC,cAAe,CAAEC,UAAU,GAC3BC,SAAU,SAAC/C,GAAD,OAAY,EAAK2B,aAAa3B,IACxCgD,eAAgB9C,KAAK+C,eAAeC,KAAKhD,MAN7C,UAQI,cAAC,IAAKiD,KAAN,CACIC,MAAM,OACN7C,KAAK,OACL8C,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAHvC,SAKI,cAAC,IAAD,MAGJ,cAAC,IAAKJ,KAAN,CACIC,MAAM,cACN7C,KAAK,cAFT,SAII,cAAC,IAAMiD,SAAP,MAGJ,cAAC,IAAKL,KAAN,CACIC,MAAM,QACN7C,KAAK,QAFT,SAII,cAAC,IAAD,CACIkD,UAAW,SAAAjD,GAAK,MAAI,YAAKA,GAAQkD,QAAQ,wBAAyB,MAClEC,OAAQ,SAAAnD,GAAK,OAAIA,EAAMkD,QAAQ,cAAe,KAC9CjC,IAAK,EACLmC,UAAW,MAInB,cAAC,IAAKT,KAAN,CACIC,MAAM,kBACN7C,KAAK,QACL8C,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,kEAHvC,SAKI,cAAC,IAAD,CACI9B,IAAK,MAGb,cAAC,IAAK0B,KAAN,CACIC,MAAM,WACN7C,KAAK,UACL8C,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6BAA+B,CAAEM,UAAW3D,KAAK4D,kBAHxF,SAKI,cAAC,IAAD,CAAYC,OAAQ,mBAAoBC,UAAQ,MAIpD,sBAAMC,UAAU,UAAhB,SAA2B/D,KAAKhE,MAAM2D,2BAK9C,cAAC,IAAD,CACIsC,QAASjC,KAAKhE,MAAM0D,2BACpBsE,OAAQ,CACJ,cAACC,EAAA,EAAD,CAAqB7D,MAAM,QAA3B,SACI,cAAC,IAAD,CAAQ2B,KAAK,UAAUC,QAAS,kBAAM,EAAKkC,mBAAkB,IAAOC,KAAM,cAACC,EAAA,EAAD,OADjE,SAGb,cAACH,EAAA,EAAD,CAA+B7D,MAAM,kBAArC,SACI,cAAC,IAAD,CAAQ2B,KAAK,UAAUC,QAAS,kBAAM,EAAKkC,mBAAkB,IAAQC,KAAM,cAACE,EAAA,EAAD,OADlE,mBAGb,cAAC,IAAD,CAAmBrC,QAAS,kBAAM,EAAKf,SAAS,CAAEvB,4BAA4B,KAA9E,mBAAY,SATpB,SAaI,4L,GAxNUH,IAAM+E,WAgPrBC,eAjBS,SAACvI,GAAD,MAAY,CAChCT,UAAWS,EAAM+C,OAAOxD,UACxBC,QAASQ,EAAM+C,OAAOvD,QACtBC,UAAWO,EAAM+C,OAAOtD,UACxBC,QAASM,EAAM+C,OAAOrD,QACtBgB,aAAcV,EAAM4B,YAAYlB,aAChCuD,KAAMjE,EAAM4B,YAAYqC,SAGD,SAAAuE,GACvB,MAAO,CACH3D,gBAAiB,SAAC4D,GAAD,OAAaD,ECzPQ,CAC1CzC,KAAM2C,EACND,QDuP0DA,KACtD7D,OAAQ,SAAC6D,GAAD,OAAaD,EChPC,CAC1BzC,KAAM2C,EACND,QD8OyCA,QAK9BF,CAA6CnF,G,SEjQ/CuF,EAAkB,kBAClBC,EAAkB,kBCDlBC,EAAc,cACdC,EAAc,cCQnBC,G,OAAgBC,IAAhBD,aAEFE,E,kDAGF,WAAY5F,GAAQ,IAAD,8BACf,cAAMA,IAHVC,QAAUC,IAAMC,YAKZ,EAAKxD,MAAQ,CACTyD,gBAAgB,GAJL,E,gDAQnB,SAAaK,GACT,OAAQE,KAAKX,MAAM6F,YACf,KAAKC,EACDnF,KAAKX,MAAM+F,cAAc,CAAEhI,MAAO0C,EAAOuF,YAAY,GAAGnH,IAAI,SAAUb,IAAKyC,EAAOuF,YAAY,GAAGnH,IAAI,WACrG,MACJ,KAAKiH,EACDnF,KAAKX,MAAMiG,cAAc,CAAElI,MAAO0C,EAAOuF,YAAY,GAAGnH,IAAI,SAAUb,IAAKyC,EAAOuF,YAAY,GAAGnH,IAAI,c,4BASjH,SAAegH,GACX,OAAQA,GACJ,KAAKC,EACD,MAAO,OACX,KAAKA,EACD,MAAO,U,oBAInB,WAAU,IAAD,OACL,OACI,gCACI,eAAC,IAAD,CAAQnD,QAAS,kBAAM,EAAKf,SAAS,CAAExB,gBAAgB,KAAvD,UAAiEO,KAAKuF,eAAevF,KAAKX,MAAM6F,YAAhG,aAEA,cAAC,IAAD,CACI9E,MAAK,UAAKJ,KAAKuF,eAAevF,KAAKX,MAAM6F,YAApC,WACLjD,QAASjC,KAAKhE,MAAMyD,eACpByC,OAAQ,SACRC,SAAU,kBAAM,EAAKlB,SAAS,CAAExB,gBAAgB,KAChD2C,KAAM,WACF,EAAK9C,QAAQ6B,QAAQkB,iBAChBC,MAAK,SAAAxC,GACF,EAAK2B,aAAa3B,MAErByC,OAAM,SAAAC,GACHlG,QAAQmG,IAAI,mBAAoBD,OAXhD,SAeI,cAAC,IAAD,CACIE,IAAK1C,KAAKV,QACVe,KAAK,aACLsC,cAAe,CACX0C,YAAa,CACTtI,MAASE,QAAQ,OAAOC,IAAI,QAAS8C,KAAKX,MAAMjC,OAChDL,MAASE,QAAQ,OAAOC,IAAI,QAAS8C,KAAKX,MAAMhC,MAEpDuF,UAAU,GAEdC,SAAU,SAAC/C,GAAD,OAAY,EAAK2B,aAAa3B,IAV5C,SAYI,cAAC,IAAKmD,KAAN,CACI5C,KAAK,cACL8C,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,yCAFvC,SAII,cAAC0B,EAAD,CAAalB,OAAQ,uB,GAvEtBtE,IAAM+E,WA0GlBC,eA1BS,SAACvI,EAAOwJ,GAC5B,OAAQA,EAASN,YACb,KAAKC,EACD,MAAO,CACH/H,MAAO,IAAIqI,OAAOzJ,EAAM+C,OAAOxD,WAC/B8B,IAAK,IAAIoI,OAAOzJ,EAAM+C,OAAOvD,UAErC,KAAK2J,EACD,MAAO,CACH/H,MAAOpB,EAAM+C,OAAOtD,UACpB4B,IAAKrB,EAAM+C,OAAOrD,SAE1B,QACI,MAAO,OAMQ,SAAA8I,GACvB,MAAO,CACHY,cAAe,SAACX,GAAD,OAAaD,EC9GO,CACvCzC,KAAM2C,EACND,QD4GuDA,KACnDa,cAAe,SAACb,GAAD,OAAaD,EC1GO,CACvCzC,KAAM2C,EACND,QDwGuDA,QAI5CF,CAA6CU,GE9G/CS,I,OAAb,kDACI,WAAYrG,GAAQ,uCACVA,GAFd,gDAKI,cALJ,oBAQI,WACI,OACI,mCACI,gDAEA,sBAAK0E,UAAU,eAAf,UACI,cAAC,EAAD,CAAcmB,WAAYC,IAC1B,cAAC,EAAD,CAAcD,WAAYC,IAE1B,cAAC,EAAD,cAjBpB,GAA4B5F,IAAM+E,Y,6BCkB5BqB,G,kDACF,WAAYtG,GAAQ,uCACVA,G,yDAGV,SAAsBuG,GAAQ,IAAD,EAC0B5F,KAAKX,MAAhD9D,EADiB,EACjBA,UAAWC,EADM,EACNA,QAASC,EADH,EACGA,UAAWC,EADd,EACcA,QAEjCkB,EAAYG,IAAO6I,EAAMhJ,WACzBmB,EAAUhB,IAAO6I,EAAM7H,SAEzBgG,EAAY,eAQhB,OANI/D,KAAK6F,eAAetK,EAAWC,EAASoB,EAAWmB,GACnDgG,EAAY,cACL/D,KAAK6F,eAAepK,EAAWC,EAASkB,EAAWmB,KAC1DgG,EAAY,eAGT,cAAC,IAAQ+B,cAAT,2BAA2BF,GAA3B,IAAkC7B,UAAWA,O,4BAGxD,SAAevH,EAAaC,EAAWsJ,EAAYC,GAC/C,IAAMC,EAAkBF,EAAWvI,QAAQP,QAAQ,OAAOC,IAAI,OAAQV,GAChE0J,EAAgBF,EAASxI,QAAQP,QAAQ,OAAOC,IAAI,OAAQT,GAElE,OAAOsJ,EAAWjI,UAAUmI,EAAiBC,OAAelI,EAAW,OACnEgI,EAASlI,UAAUmI,EAAiBC,OAAelI,EAAW,Q,yCAItE,SAA4BqB,GAAQ,IACxB8G,EAAqB9G,EAArB8G,KAAMC,EAAe/G,EAAf+G,WACd,OACI,cAAC,IAAaC,mBAAd,2BAAqChH,GAArC,IAA4CiH,MAAO,CAAEC,OAAQ,QAA7D,SACI,sBAAKxC,UAAU,0BAAf,UACI,qBAAKA,UAAU,QAAf,SACKoC,EAAK/F,QAEV,sBAAK2D,UAAU,gBAAf,eAAkCoC,EAAK7F,SACvC,sBAAKyD,UAAU,eAAf,UACI,+BAAOqC,EAAWD,EAAKvJ,UAAW,CAAE4J,KAAM,UAAWC,OAAQ,cAC7D,sBAAMH,MAAO,CAAEI,QAAS,WAAxB,iBACA,+BAAON,EAAWD,EAAKpI,QAAS,CAAEyI,KAAM,UAAWC,OAAQ,iBAI3DN,EAAK5F,YAED,qBAAKwD,UAAU,cAAf,SACKoC,EAAK5F,cAGV,a,+BAQxB,SAAkBlB,GAAQ,IAAD,OACrB,OACI,cAAC,IAAmBsH,QAApB,2BAAgCtH,GAAhC,aACI,sBAAK0E,UAAU,kBAAf,UACI,cAAC,IAAD,CACI/B,QAAS,kBAAM,EAAK4E,yBAAyBvH,EAAMwH,kBACnD1C,KAAM,cAAC2C,GAAA,EAAD,IACNC,KAAM,QAHV,sBAMA,cAAC,IAAD,CACI/E,QAAS,kBAAM,EAAKgF,sBAAsB3H,EAAMwH,kBAChD1C,KAAM,cAACC,EAAA,EAAD,IACN2C,KAAM,QAHV,mBAMA,cAAC,IAAD,CAEI5C,KAAM,cAAC8C,GAAA,EAAD,IACNF,KAAM,QAHV,4B,sCAWhB,SAAyBnJ,GACrB,IAAMsJ,EAAclH,KAAKX,MAAM3C,aAAa+B,WAAU,SAAA0I,GAAS,OAAIA,IAAcvJ,KAEjF,IAAqB,IAAjBsJ,EAAJ,CAKA,IAAME,EAAWpH,KAAKqH,qBAAqBrH,KAAKX,MAAM3C,aAAawK,IAAc,GAE3EI,EAAqB5J,OAAOC,OAAO,GAAIqC,KAAKX,MAAM3C,aAAawK,IACrEI,EAAmBtL,MAAQjB,EAE3BiF,KAAKX,MAAMkI,kBAAkB,CAAE3J,YAAa0J,EAAoBhJ,MAAO4I,IACvElH,KAAKX,MAAMmI,UAAU,CAAEC,IAAKzH,KAAK0H,yBAAyB1H,KAAKX,MAAMY,KAAKmH,GAAWE,GAAqBhJ,MAAO8I,SAV7G9K,QAAQC,MAAM,wC,sCAatB,SAAyBkL,EAAKH,GAC1B,IAAMK,EAAmBF,EAAI/K,aAAa+B,WAAU,SAAAb,GAAW,OAAIA,EAAY4C,KAAO8G,EAAmB9G,MAGzG,OAFAiH,EAAI/K,aAAaiL,GAAoBL,EAE9BG,I,mCAGX,SAAsB7J,GAAc,IAAD,EACwCoC,KAAKX,MAApE9D,EADuB,EACvBA,UAAWC,EADY,EACZA,QAASC,EADG,EACHA,UAAWC,EADR,EACQA,QAASgB,EADjB,EACiBA,aAAcuD,EAD/B,EAC+BA,KAExDmH,EAAWpH,KAAKqH,qBAAqBzJ,GAAa,GAElCzC,EAClByC,EAAYN,MACZP,MAASE,QAAQ,OAAOC,IAAI,OAAQ,MACpCR,EACA,CAACnB,EAAWC,GACZ,CAACC,EAAWC,GACZuE,EAAKmH,GAAU/L,W,oCAIvB,SAAuBgE,GAAQ,IAGvB0E,EAFI6D,EAA0BvI,EAA1BuI,SAAUtB,EAAgBjH,EAAhBiH,MAAOH,EAAS9G,EAAT8G,KAazB,OATInG,KAAK6H,kBAAkB1B,GACvBpC,EAAY,mBAEP/D,KAAK8H,iBAAiB3B,GAC3BpC,EAAY,qBACL/D,KAAK+H,kBAAkB5B,KAC9BpC,EAAY,oBAIZ,cAAC,IAAaiE,YAAd,2BACQ3I,GADR,IAEI0E,UAAWA,EACXuC,MAAK,eACEA,GAJX,SAOKsB,O,6BAKb,WACI,OAAI5H,KAAKX,MAAM9D,WAAayE,KAAKX,MAAM5D,UAC5B6F,KAAKC,IAAIvB,KAAKX,MAAM9D,UAAWyE,KAAKX,MAAM5D,WAE9C,I,2BAGX,WACI,OAAIuE,KAAKX,MAAM7D,SAAWwE,KAAKX,MAAM3D,QAC1B4F,KAAKE,IAAIxB,KAAKX,MAAM7D,QAASwE,KAAKX,MAAM3D,SAG5C,K,+BAGX,SAAkBkC,GACd,OAAOA,EAAY5B,QAAUjB,I,8BAGjC,SAAiB6C,GACb,OAAOb,MAASkB,cAAcL,EAAYhB,YAAcG,MAASkL,eAAerK,EAAYG,W,+BAGhG,SAAkBH,GACd,OAAOb,MAASmL,QAAQtK,EAAYG,UAAYH,EAAY5B,QAAUlB,I,kCAG1E,SAAqB8C,GAA6B,IAAhBU,EAAe,wDAC7C,OAAOA,EAEH0B,KAAKX,MAAMY,KAAKxB,WAAU,SAAAgJ,GAAG,OAAIA,EAAIjH,KAAO5C,EAAY6C,SAExDT,KAAKX,MAAMY,KAAKpC,MAAK,SAAA4J,GAAG,OAAIA,EAAIjH,KAAO5C,EAAY6C,W,oBAG3D,WACI,OACI,sBAAKD,GAAG,eAAR,UACI,cAAC,GAAD,IACA,cAAC2H,EAAA,EAAD,UACI,eAAC,IAAD,CACIC,OAAQ,QACRjC,KAAMnG,KAAKX,MAAM3C,aAFrB,UAGI,cAAC,IAAD,CACI2L,uBAAuB,SAG3B,cAAC,IAAD,CACIC,uBAAwBtI,KAAKuI,sBAAsBvF,KAAKhD,QAE5D,cAAC,IAAD,CACIsI,uBAAwBtI,KAAKuI,sBAAsBvF,KAAKhD,QAE5D,cAAC,IAAD,IAEA,cAAC,IAAD,CACIwI,qBAAsBxI,KAAKyI,uBAAuBzF,KAAKhD,MACvD0I,4BAA6B1I,KAAK2I,8BAGtC,cAAC,IAAD,CACIC,iBAAe,EACfC,iBAAkB7I,KAAK8I,kBAAkB9F,KAAKhD,QAGlD,cAAC,IAAD,IACA,cAAC,IAAD,gB,GA5NIT,aAqPbgF,gBAjBS,SAACvI,GAAD,MAAY,CAChCT,UAAWS,EAAM+C,OAAOxD,UACxBC,QAASQ,EAAM+C,OAAOvD,QACtBC,UAAWO,EAAM+C,OAAOtD,UACxBC,QAASM,EAAM+C,OAAOrD,QACtBgB,aAAcV,EAAM4B,YAAYlB,aAChCuD,KAAMjE,EAAM4B,YAAYqC,SAGD,SAAAuE,GACvB,MAAO,CACH+C,kBAAmB,SAAC9C,GAAD,OAAaD,ENjQiB,CACrDzC,KAAM2C,EACND,QM+P+DA,KAC3D+C,UAAW,SAAC/C,GAAD,OAAaD,ENxPS,CACrCzC,KAAM2C,EACND,QMsP+CA,QAKpCF,CAA6CoB,ICpQ7CoD,OANf,WACE,OACE,cAAC,GAAD,KCMWC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5G,MAAK,YAAkD,IAA/C6G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,6CCLP,SAASO,KAAiF,IAAzDC,EAAwD,uDAAtC,GAAIC,EAAkC,uCAAbxC,EAAa,uCACtFyC,EAAW,YAAOF,GAGxB,OAFAE,EAAYzC,GAAewC,EAEpBC,EAGJ,SAASC,KAA0D,IAAzCC,EAAwC,uDAA9B,GAAIC,EAA0B,uCAAb5C,EAAa,uCAC/DyC,EAAW,YAAOE,GAGxB,OAFAF,EAAYzC,GAAe4C,EAEpBH,ECVX,IAAMI,GAAgB,CAClBrN,aAAc,GACduD,KAAM,IA8BK+J,GA3BY,WAAoC,IAAnChO,EAAkC,uDAA1B+N,GAAeE,EAAW,uCAC1D,OAAQA,EAAOlI,MACX,KAAK2C,EACD,OAAO,2BACA1I,GADP,IAEIU,aAAa,GAAD,mBAAMV,EAAMU,cAAZ,YAA6BuN,EAAOxF,YAExD,KAAKC,EACD,OAAO,2BACA1I,GADP,IAEIU,aAAc8M,GAAwBxN,EAAMU,aAAcuN,EAAOxF,QAAQ7G,YAAaqM,EAAOxF,QAAQnG,SAE7G,KAAKoG,EACD,OAAO,2BACA1I,GADP,IAEIiE,KAAK,GAAD,mBAAMjE,EAAMiE,MAAZ,CAAkBgK,EAAOxF,YAErC,KAAKC,EACD,OAAO,2BACA1I,GADP,IAEIiE,KAAM2J,GAAiB5N,EAAMiE,KAAMgK,EAAOxF,QAAQgD,IAAKwC,EAAOxF,QAAQnG,SAE9E,QACI,OAAOtC,IC7Bb+N,GAAgB,CAClBxO,UAAW,EACXC,QAAS,GACTC,UAAW,GACXC,QAAS,IAsBEwO,GAnBO,WAAoC,IAAnClO,EAAkC,uDAA1B+N,GAAeE,EAAW,uCACrD,OAAQA,EAAOlI,MACX,KAAK2C,EACD,OAAO,2BACA1I,GADP,IAEIT,UAAW0O,EAAOxF,QAAQrH,MAC1B5B,QAASyO,EAAOxF,QAAQpH,MAEhC,KAAKqH,EACD,OAAO,2BACA1I,GADP,IAEIP,UAAWwO,EAAOxF,QAAQrH,MAC1B1B,QAASuO,EAAOxF,QAAQpH,MAEhC,QACI,OAAOrB,ICjBbmO,GAAgB,CAClBC,IAAK,OACLC,Q,QAAAA,GAGEC,GAAcC,aAAgB,CAChCxL,OAAQmL,GACRtM,YAAaoM,KAGFQ,gBAAeL,GAAeG,ICRtC,IAAMG,GAAQC,aAAYJ,IAEpBK,GAAYC,aAAaH,I,UCAtCI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,KAAD,CAAaE,UAAWA,GAAxB,SACE,cAAC,GAAD,UAINK,SAASC,eAAe,SAM1BjC,O","file":"static/js/main.c421bd49.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const ADD_APPOINTMENTS = 'ADD_APPOINTMENTS';\r\nexport const UPDATED_APPOINTMENT= 'UPDATED_APPOINTMENT';\r\nexport const ADD_JOB = 'ADD_JOB';\r\nexport const UPDATE_JOB = 'UPDATE_JOB';","export const SCHEDULER_DATE_FORMAT = 'YYYY-MM-DDTHH:mm'\r\n\r\nexport const APPOINTMENT_STATE_NOT_STARTED = 'APPOINTMENT_STATE_NOT_STARTED'\r\nexport const APPOINTMENT_STATE_COMPLETED = 'APPOINTMENT_STATE_COMPLETED'\r\nexport const APPOINTMENT_STATE_DELAYED = 'APPOINTMENT_STATE_DELAYED'\r\n\r\nexport const SCHEDULE_WORK_ONLY = 'SCHEDULE_WORK_ONLY';\r\nexport const SCHEDULE_FREE_TIME = 'SCHEDULE_FREE_TIME';\r\nexport const SCHEDULE_FULL = 'SCHEDULE_FULL';","import { SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from \"./constants\";\r\nimport moment from 'moment';\r\n\r\nexport function verifyAppointmentDisponibility(totalHoursNeeded, dueDate, currentAppointments, [workStart, workEnd], [freeStart, freeEnd]) {\r\n    if (!workStart || !workEnd) {\r\n        console.error(\"There was no work period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    const vacatedWorkPeriods = getAllVacatedSpacesInPeriodUntilDueDate(\r\n        workStart,\r\n        workEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        totalHoursNeeded\r\n    )\r\n\r\n    const currentDistributedHours = getTotalHoursOfPeriods(vacatedWorkPeriods)\r\n\r\n    //If we already allocated all the nescessary time in the work period, finish the function, otherwise allocate to free time\r\n    if (vacatedWorkPeriods.length != 0 && currentDistributedHours >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_WORK_ONLY,\r\n            periods: vacatedWorkPeriods\r\n        }\r\n    }\r\n\r\n    if (!freeStart || !freeEnd) {\r\n        console.error(\"It was nescessary to use free time, but there was no free period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    const currentlyRemainingHours = totalHoursNeeded - currentDistributedHours;\r\n\r\n    const vacatedFreePeriods = getAllVacatedSpacesInPeriodUntilDueDate(\r\n        freeStart,\r\n        freeEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        currentlyRemainingHours\r\n    )\r\n\r\n    const distributedHoursInFreePeriod = getTotalHoursOfPeriods(vacatedFreePeriods);\r\n    const mergedPeriods = mergeContinousAppointmentsInDifferentPeriods([...vacatedWorkPeriods, ...vacatedFreePeriods])\r\n\r\n    if (vacatedFreePeriods.length != 0 && currentDistributedHours + distributedHoursInFreePeriod >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_FREE_TIME,\r\n            periods: mergedPeriods\r\n        }\r\n    }\r\n\r\n    return {\r\n        state: SCHEDULE_FULL,\r\n        periods: mergedPeriods\r\n    }\r\n}\r\n\r\nexport function getAllVacatedSpacesInPeriodUntilDueDate(periodStart, periodEnd, dueDate, appointments, hoursNeeded, startDate) {\r\n    const allContinuousPeriods = [];\r\n    //Start with the period\r\n    let currentTimestamp = startDate || moment().add(1, 'day').startOf('day').set('hour', periodStart);\r\n    let currentContinuousPeriod = {\r\n        start: null,\r\n        end: null,\r\n        hours: 0\r\n    }\r\n\r\n    while (currentTimestamp.isBefore(dueDate)) {\r\n        /*  Check if the periods already obtained already are enough for the appointment, so theres no \r\n            to continue the while loop*/\r\n        if (hoursNeeded != 0) {\r\n            if (currentContinuousPeriod.start) {\r\n                if (getTotalHoursOfPeriods([...allContinuousPeriods, { hours: 1 + currentContinuousPeriod.hours }]) >= hoursNeeded) {\r\n                    currentContinuousPeriod.end = currentTimestamp.clone();\r\n                    currentContinuousPeriod.hours++;\r\n\r\n                    //Add the finished continuous period to the array.\r\n                    allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                    currentContinuousPeriod = {\r\n                        start: null,\r\n                        end: null,\r\n                        hours: 0\r\n                    }\r\n                    break;\r\n                }\r\n            } else if (getTotalHoursOfPeriods(allContinuousPeriods) >= hoursNeeded) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Try to find an appointment that contains the current iterated hour.\r\n        const appointment = appointments.find(appointment => {\r\n            //Check if the current timestamp is between this appointment period\r\n            if (currentTimestamp.isBetween(appointment.startDate, appointment.endDate, undefined, \"[)\")) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        })\r\n\r\n        //If there's already an appointment in the current timestamp iterated, skip to the end of the appointment\r\n        if (appointment) {\r\n            //If there's an current period that has been stopped thanks to this appointment, save in the array.\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            if (appointment.endDate.isSameOrAfter(appointment.endDate.clone().startOf('day').set('hour', periodEnd))) {\r\n                currentTimestamp = currentTimestamp.add(1, 'day').set('hour', periodStart);\r\n            } else {\r\n                currentTimestamp = currentTimestamp.set('hour', appointment.endDate.get('hour'));\r\n            }\r\n            continue;\r\n        }\r\n\r\n        //If the current timestamp is beyond or just reached the dueDate\r\n        if (currentTimestamp.isSameOrAfter(dueDate)) {\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        //If the current hour is the final hour of the period, end the continuous period\r\n        if (currentTimestamp.isSameOrAfter(currentTimestamp.clone().set('hour', periodEnd))) {\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            currentTimestamp = currentTimestamp.add(1, 'day').set('hour', periodStart);\r\n            continue;\r\n        }\r\n\r\n\r\n        //If there's no appointment, this is a free hour to add to the current continuous period\r\n        if (currentContinuousPeriod.start) {\r\n            currentContinuousPeriod.end = currentTimestamp.clone();\r\n            currentContinuousPeriod.hours++;\r\n        } else {\r\n            currentContinuousPeriod.start = currentTimestamp.clone();\r\n        }\r\n\r\n        currentTimestamp = currentTimestamp.add(1, 'hour');\r\n    }\r\n\r\n    return allContinuousPeriods;\r\n}\r\n\r\nexport function mergeContinousAppointmentsInDifferentPeriods(appointments) {\r\n    const mergedAppointment = [];\r\n    const indexesToIgnore = [];\r\n\r\n    appointments.forEach((appointment, index) => {\r\n        if (indexesToIgnore.includes(index)) {\r\n            return;\r\n        }\r\n\r\n        const appointmentToMergeIndex = appointments.findIndex(appointmentToCompare => appointment.end.isSame(appointmentToCompare.start));\r\n        if (appointmentToMergeIndex !== -1) {\r\n            indexesToIgnore.push(appointmentToMergeIndex);\r\n\r\n            appointment.end = appointments[appointmentToMergeIndex].end;\r\n            appointment.hours = appointment.end.diff(appointment.start, 'hours');\r\n        }\r\n\r\n        mergedAppointment.push(appointment);\r\n    })\r\n\r\n    return mergedAppointment;\r\n}\r\n\r\nexport function getTotalHoursOfPeriods(periods) {\r\n    return periods.reduce((sum, period) => ({ hours: sum.hours + period.hours }), { hours: 0 }).hours;\r\n}\r\n","import { Input, Form, Modal, InputNumber, DatePicker, Button } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addAppointment, addJob } from '../../redux/appointment/appointment.actions';\r\nimport moment from 'moment';\r\n\r\nimport './AppointmentForm.styles.scss';\r\nimport { APPOINTMENT_STATE_NOT_STARTED, SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from '../../utils/constants';\r\nimport { CoffeeOutlined, FieldTimeOutlined } from '@ant-design/icons';\r\nimport { getAllVacatedSpacesInPeriodUntilDueDate, getTotalHoursOfPeriods, mergeContinousAppointmentsInDifferentPeriods, verifyAppointmentDisponibility } from '../../utils/periods';\r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nclass AppointmentForm extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false\r\n        }\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        const newJobId = this.props.jobs.length;\r\n\r\n        const appointmentsToCreate = this.state.appointmentPeriods.map((period, index) => ({\r\n            startDate: period.start,\r\n            endDate: period.end,\r\n            title: values.name,\r\n            price: values.price,\r\n            description: values.description,\r\n            state: APPOINTMENT_STATE_NOT_STARTED,\r\n            hours: period.hours,\r\n            id: 'job_' + newJobId + 'app_' + index,\r\n            jobId: newJobId\r\n        }))\r\n\r\n        const newJob = {\r\n            id: newJobId,\r\n            name: values.name,\r\n            appointments: appointmentsToCreate,\r\n            price: values.price,\r\n            description: values.description,\r\n            dueDate: values.dueDate,\r\n            totalHours: values.hours\r\n        }\r\n\r\n\r\n        this.props.addJob(newJob);\r\n        this.props.addAppointments(appointmentsToCreate);\r\n    }\r\n\r\n    previewPeriods([lastChange], [_, __, ___, hours, dueDate]) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (lastChange.name.includes('hours') || lastChange.name.includes('dueDate')) {\r\n            if (hours.value && dueDate.value) {\r\n                const verifiedDisponibility = verifyAppointmentDisponibility(hours.value, dueDate.value, appointments, [workStart, workEnd], [freeStart, freeEnd]);\r\n\r\n                if (!verifiedDisponibility) {\r\n                    console.error(\"Error on saving the periods\")\r\n                    return;\r\n                }\r\n\r\n                switch (verifiedDisponibility.state) {\r\n                    case SCHEDULE_WORK_ONLY:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job can be sucessfully distributed in the work period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FREE_TIME:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job will invade some of your free time period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FULL:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job could not be distributed into your work/free time, further action will be required on submit',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: false\r\n                        })\r\n                        break;\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    appointmentPreview: '',\r\n                    appointmentPeriods: []\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onFutherActionSet(shouldDelay) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        const { dueDate, hours } = this.formRef.current.getFieldsValue();\r\n\r\n        const extraAppointments = getAllVacatedSpacesInPeriodUntilDueDate(\r\n            shouldDelay ? Math.min(workStart, freeStart) : Math.max(workEnd, freeEnd),\r\n            shouldDelay ? Math.max(workEnd, freeEnd) : Math.min(workStart, freeStart),\r\n            shouldDelay ? dueDate.set('year', 9999) : dueDate,\r\n            [...appointments, ...this.state.appointmentPeriods],\r\n            hours - getTotalHoursOfPeriods(this.state.appointmentPeriods),\r\n            shouldDelay ? dueDate : moment().startOf('day').set('hour', Math.max(workEnd, freeEnd))\r\n        )\r\n\r\n        const finalAppointments = mergeContinousAppointmentsInDifferentPeriods(extraAppointments, this.state.appointmentPeriods);\r\n\r\n        this.setState({\r\n            appointmentPeriods: finalAppointments,\r\n            appointmentSuccessful: true,\r\n            appointmentPreview: '',\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false\r\n        }, () => this.onFormSubmit(this.formRef.current.getFieldsValue()))\r\n    }\r\n\r\n    validateDueDate(_, dueDate) {\r\n        if (moment().isSameOrAfter(dueDate)) {\r\n            return Promise.reject('The due date needs to be after now!')\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Button type=\"primary\" onClick={() => this.setState({ isModalVisible: true })}>Add Event</Button>\r\n\r\n                <Modal title=\"Add Event\"\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={() => this.setState({ isModalVisible: false })}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                if (this.state.appointmentSuccessful) {\r\n                                    this.onFormSubmit(values);\r\n                                    this.setState({ isModalVisible: false });\r\n                                } else {\r\n                                    this.setState({ isFutherActionModalVisible: true })\r\n                                }\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                >\r\n\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"eventForm\"\r\n                        initialValues={{ remember: true }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                        onFieldsChange={this.previewPeriods.bind(this)}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            rules={[{ required: true, message: 'The event name is required' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Description\"\r\n                            name=\"description\"\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Price\"\r\n                            name=\"price\"\r\n                        >\r\n                            <InputNumber\r\n                                formatter={price => `$ ${price}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                parser={price => price.replace(/\\$\\s?|(,*)/g, '')}\r\n                                min={0}\r\n                                precision={2}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Estimated Hours\"\r\n                            name=\"hours\"\r\n                            rules={[{ required: true, message: 'The ETA is required to allow the scheduler to distribute time' }]}\r\n                        >\r\n                            <InputNumber\r\n                                min={0} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Due Date\"\r\n                            name=\"dueDate\"\r\n                            rules={[{ required: true, message: 'The dude date is required' }, { validator: this.validateDueDate }]}\r\n                        >\r\n                            <DatePicker format={'DD/MM/YYYY HH:00'} showTime />\r\n                        </Form.Item >\r\n\r\n\r\n                        <span className=\"message\">{this.state.appointmentPreview}</span>\r\n                    </Form>\r\n\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.isFutherActionModalVisible}\r\n                    footer={[\r\n                        <Tooltip key=\"delay\" title=\"Delay\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(true)} icon={<FieldTimeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Tooltip key=\"overwrite_sleep\" title=\"Overwrite Sleep\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(false)} icon={<CoffeeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Button key=\"back\" onClick={() => this.setState({ isFutherActionModalVisible: false })}>\r\n                            Cancel\r\n                        </Button>\r\n                    ]}>\r\n                    <p>The appointment submitted can't be concluded during your work and free period, what should the scheduler do to allow for this job to be scheduled?</p>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        addJob: (payload) => dispatch(addJob(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppointmentForm);","import * as types from './appointment.types';\r\n\r\nexport const addAppointment = appointment => ({\r\n    type: types.ADD_APPOINTMENTS,\r\n    payload: appointment\r\n});\r\n\r\nexport const updateAppointment = appointmentAndIndex => ({\r\n    type: types.UPDATED_APPOINTMENT,\r\n    payload: appointmentAndIndex\r\n})\r\n\r\nexport const addJob = job => ({\r\n    type: types.ADD_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const updateJob = jobAndIndex => ({\r\n    type: types.UPDATE_JOB,\r\n    payload: jobAndIndex\r\n})\r\n","export const SET_WORK_PERIOD = 'SET_WORK_PERIOD';\r\nexport const SET_FREE_PERIOD = 'SET_FREE_PERIOD';","export const WORK_PERIOD = 'WORK_PERIOD';\r\nexport const FREE_PERIOD = 'FREE_PERIOD';\r\nexport const SLEEP_PERIOD = 'SLEEP_PERIOD';","import { Button, Form, Modal, TimePicker } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setFreePeriod, setWorkPeriod } from '../../redux/period/period.actions';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\nimport moment from 'moment';\r\n\r\nimport './PeriodSetter.styles.scss';\r\n\r\nconst { RangePicker } = TimePicker;\r\n\r\nclass PeriodSetter extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false\r\n        }\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        switch (this.props.periodType) {\r\n            case PeriodType.WORK_PERIOD:\r\n                this.props.setWorkPeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n            case PeriodType.FREE_PERIOD:\r\n                this.props.setFreePeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n            case PeriodType.SLEEP_PERIOD:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getPeriodLabel(periodType) {\r\n        switch (periodType) {\r\n            case PeriodType.FREE_PERIOD:\r\n                return 'Free';\r\n            case PeriodType.WORK_PERIOD:\r\n                return 'Work';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button onClick={() => this.setState({ isModalVisible: true })}>{this.getPeriodLabel(this.props.periodType)} Period</Button>\r\n\r\n                <Modal\r\n                    title={`${this.getPeriodLabel(this.props.periodType)} Period`}\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={() => this.setState({ isModalVisible: false })}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                this.onFormSubmit(values);\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                >\r\n                    <Form\r\n                        ref={this.formRef}\r\n                        name=\"periodForm\"\r\n                        initialValues={{\r\n                            periodRange: [\r\n                                moment().startOf('day').set('hours', this.props.start),\r\n                                moment().startOf('day').set('hours', this.props.end)\r\n                            ],\r\n                            remember: true\r\n                        }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"periodRange\"\r\n                            rules={[{ required: true, message: 'The range of the period is required!' }]}\r\n                        >\r\n                            <RangePicker format={\"HH:00\"} />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    switch (ownProps.periodType) {\r\n        case PeriodType.WORK_PERIOD:\r\n            return {\r\n                start: new Number(state.period.workStart),\r\n                end: new Number(state.period.workEnd)\r\n            }\r\n        case PeriodType.FREE_PERIOD:\r\n            return {\r\n                start: state.period.freeStart,\r\n                end: state.period.freeEnd\r\n            }\r\n        default:\r\n            return {\r\n\r\n            }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWorkPeriod: (payload) => dispatch(setWorkPeriod(payload)),\r\n        setFreePeriod: (payload) => dispatch(setFreePeriod(payload))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PeriodSetter);","import * as types from './period.types';\r\n\r\nexport const setWorkPeriod = timeRange => ({\r\n    type: types.SET_WORK_PERIOD,\r\n    payload: timeRange\r\n});\r\n\r\nexport const setFreePeriod = timeRange => ({\r\n    type: types.SET_FREE_PERIOD,\r\n    payload: timeRange\r\n});","import React from 'react';\r\nimport AppointmentForm from '../AppointmentForm/AppointmentForm.component';\r\nimport PeriodSetter from '../PeriodSetter/PeriodSetter.component';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\n\r\nimport './Header.styles.scss';\r\n\r\nexport class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    onFormSubmit() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h2>Work Scheduler</h2>\r\n\r\n                <div className=\"button-group\">\r\n                    <PeriodSetter periodType={PeriodType.WORK_PERIOD} />\r\n                    <PeriodSetter periodType={PeriodType.FREE_PERIOD} />\r\n\r\n                    <AppointmentForm />\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { ViewState } from '@devexpress/dx-react-scheduler';\r\nimport {\r\n    Scheduler,\r\n    DayView,\r\n    WeekView,\r\n    Appointments,\r\n    Toolbar,\r\n    ViewSwitcher,\r\n    MonthView,\r\n    AppointmentTooltip\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\nimport { Header } from '../../components/Header/Header.component';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\nimport './Home.styles.scss';\r\nimport { APPOINTMENT_STATE_COMPLETED, APPOINTMENT_STATE_NOT_STARTED } from '../../utils/constants';\r\nimport { FieldTimeOutlined, DoubleRightOutlined, CheckCircleOutlined } from '@ant-design/icons';\r\nimport { updateAppointment, updatedJob, updateJob } from '../../redux/appointment/appointment.actions';\r\nimport { getAllVacatedSpacesInPeriodUntilDueDate, verifyAppointmentDisponibility } from '../../utils/periods';\r\nimport { Button } from 'antd';\r\n\r\nclass HomeComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    TableTimeCellRenderer(input) {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n\r\n        const startDate = moment(input.startDate);\r\n        const endDate = moment(input.endDate);\r\n\r\n        let className = \"sleep-period\";\r\n\r\n        if (this.isHoursBetween(workStart, workEnd, startDate, endDate)) {\r\n            className = \"work-period\"\r\n        } else if (this.isHoursBetween(freeStart, freeEnd, startDate, endDate)) {\r\n            className = \"free-period\"\r\n        }\r\n\r\n        return <DayView.TimeTableCell {...input} className={className}></DayView.TimeTableCell>\r\n    }\r\n\r\n    isHoursBetween(periodStart, periodEnd, checkStart, checkEnd) {\r\n        const periodStartDate = checkStart.clone().startOf('day').set('hour', periodStart);\r\n        const periodEndDate = checkEnd.clone().startOf('day').set('hour', periodEnd);\r\n\r\n        return checkStart.isBetween(periodStartDate, periodEndDate, undefined, \"[)\") &&\r\n            checkEnd.isBetween(periodStartDate, periodEndDate, undefined, \"(]\")\r\n\r\n    }\r\n\r\n    getCustomAppointmentContent(props) {\r\n        const { data, formatDate } = props;\r\n        return (\r\n            <Appointments.AppointmentContent {...props} style={{ height: '100%' }}>\r\n                <div className=\"app-appointment-content\">\r\n                    <div className=\"title\">\r\n                        {data.title}\r\n                    </div>\r\n                    <div className=\"value-wrapper\">$ {data.price}</div>\r\n                    <div className=\"hour-wrapper\">\r\n                        <span>{formatDate(data.startDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                        <span style={{ padding: \"0px 3px\" }}> - </span>\r\n                        <span>{formatDate(data.endDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                    </div>\r\n\r\n                    {\r\n                        data.description\r\n                            ?\r\n                            <div className=\"description\">\r\n                                {data.description}\r\n                            </div>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </div>\r\n            </Appointments.AppointmentContent>\r\n        )\r\n    }\r\n\r\n    getTooltipContent(props) {\r\n        return (\r\n            <AppointmentTooltip.Content {...props}>\r\n                <div className=\"tooltip-wrapper\">\r\n                    <Button\r\n                        onClick={() => this.onCompleteTheAppointment(props.appointmentData)}\r\n                        icon={<CheckCircleOutlined />}\r\n                        size={'large'}>\r\n                        Complete\r\n                        </Button>\r\n                    <Button\r\n                        onClick={() => this.onDelayTheAppointment(props.appointmentData)}\r\n                        icon={<FieldTimeOutlined />}\r\n                        size={'large'}>\r\n                        Delay\r\n                        </Button>\r\n                    <Button\r\n                        //onClick={() => this.onCompleteTheAppointment(props.data)}\r\n                        icon={<DoubleRightOutlined />}\r\n                        size={'large'}>\r\n                        Finish\r\n                        </Button>\r\n                </div>\r\n            </AppointmentTooltip.Content>\r\n        )\r\n    }\r\n\r\n    onCompleteTheAppointment(appointment) {\r\n        const indexOnList = this.props.appointments.findIndex(toCompare => toCompare === appointment);\r\n\r\n        if (indexOnList === -1) {\r\n            console.error(\"Unknown appointment was completed!\");\r\n            return;\r\n        }\r\n\r\n        const jobIndex = this.findJobOfAppointment(this.props.appointments[indexOnList], true);\r\n\r\n        const updatedAppointment = Object.assign({}, this.props.appointments[indexOnList]);\r\n        updatedAppointment.state = APPOINTMENT_STATE_COMPLETED;\r\n\r\n        this.props.updateAppointment({ appointment: updatedAppointment, index: indexOnList });\r\n        this.props.updateJob({ job: this.onUpdateAppointmentOnJob(this.props.jobs[jobIndex], updatedAppointment), index: jobIndex });\r\n    }\r\n\r\n    onUpdateAppointmentOnJob(job, updatedAppointment) {\r\n        const appointmentIndex = job.appointments.findIndex(appointment => appointment.id === updatedAppointment.id);\r\n        job.appointments[appointmentIndex] = updatedAppointment;\r\n\r\n        return job;\r\n    }\r\n\r\n    onDelayTheAppointment(appointment) {\r\n        const { workStart, workEnd, freeStart, freeEnd, appointments, jobs } = this.props;\r\n\r\n        const jobIndex = this.findJobOfAppointment(appointment, true);\r\n\r\n        const periodOfDelay = verifyAppointmentDisponibility(\r\n            appointment.hours,\r\n            moment().startOf('day').set('year', 9999),\r\n            appointments,\r\n            [workStart, workEnd],\r\n            [freeStart, freeEnd],\r\n            jobs[jobIndex].dueDate\r\n        );\r\n    }\r\n\r\n    getAppointmentComponet(props) {\r\n        const { children, style, data } = props;\r\n\r\n        let className;\r\n\r\n        if (this.isAppointmentDone(data)) {\r\n            className = \"appointment-done\"\r\n        }\r\n        else if (this.isAppointmentNow(data)) {\r\n            className = \"appointment-active\";\r\n        } else if (this.isAppointmentLate(data)) {\r\n            className = \"appointment-late\"\r\n        }\r\n\r\n        return (\r\n            <Appointments.Appointment\r\n                {...props}\r\n                className={className}\r\n                style={{\r\n                    ...style\r\n                }}\r\n            >\r\n                {children}\r\n            </Appointments.Appointment>\r\n        )\r\n    }\r\n\r\n    getStartDayHour() {\r\n        if (this.props.workStart && this.props.freeStart) {\r\n            return Math.min(this.props.workStart, this.props.freeStart);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getEndDayHour() {\r\n        if (this.props.workEnd && this.props.freeEnd) {\r\n            return Math.max(this.props.workEnd, this.props.freeEnd);\r\n        }\r\n\r\n        return 24;\r\n    }\r\n\r\n    isAppointmentDone(appointment) {\r\n        return appointment.state === APPOINTMENT_STATE_COMPLETED\r\n    }\r\n\r\n    isAppointmentNow(appointment) {\r\n        return moment().isSameOrAfter(appointment.startDate) && moment().isSameOrBefore(appointment.endDate)\r\n    }\r\n\r\n    isAppointmentLate(appointment) {\r\n        return moment().isAfter(appointment.endDate) && appointment.state === APPOINTMENT_STATE_NOT_STARTED\r\n    }\r\n\r\n    findJobOfAppointment(appointment, index = false) {\r\n        return index\r\n            ?\r\n            this.props.jobs.findIndex(job => job.id === appointment.jobId)\r\n            :\r\n            this.props.jobs.find(job => job.id === appointment.jobId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"home-wrapper\">\r\n                <Header></Header>\r\n                <Paper>\r\n                    <Scheduler\r\n                        locale={\"en-UK\"}\r\n                        data={this.props.appointments}>\r\n                        <ViewState\r\n                            defaultCurrentViewName=\"Week\"\r\n                        />\r\n\r\n                        <DayView\r\n                            timeTableCellComponent={this.TableTimeCellRenderer.bind(this)}>\r\n                        </DayView>\r\n                        <WeekView\r\n                            timeTableCellComponent={this.TableTimeCellRenderer.bind(this)}>\r\n                        </WeekView>\r\n                        <MonthView />\r\n\r\n                        <Appointments\r\n                            appointmentComponent={this.getAppointmentComponet.bind(this)}\r\n                            appointmentContentComponent={this.getCustomAppointmentContent}\r\n                        />\r\n\r\n                        <AppointmentTooltip\r\n                            showCloseButton\r\n                            contentComponent={this.getTooltipContent.bind(this)}\r\n                        />\r\n\r\n                        <Toolbar />\r\n                        <ViewSwitcher />\r\n                    </Scheduler>\r\n                </Paper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateAppointment: (payload) => dispatch(updateAppointment(payload)),\r\n        updateJob: (payload) => dispatch(updateJob(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeComponent);","import logo from './logo.svg';\r\nimport './App.css';\r\nimport HomeComponent from './pages/Home/Home.component';\r\n\r\nfunction App() {\r\n  return (\r\n    <HomeComponent></HomeComponent>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { updateAppointment } from \"./appointment.actions\";\r\n\r\nexport function updateAppointmentOnList(appointmentList = [], toUpdateAppointment, indexOnList) {\r\n    const updatedList = [...appointmentList];\r\n    updatedList[indexOnList] = toUpdateAppointment;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function updateJobtOnList(jobList = [], toUpdateJob, indexOnList) {\r\n    const updatedList = [...jobList];\r\n    updatedList[indexOnList] = toUpdateJob;\r\n\r\n    return updatedList;\r\n}","import * as types from './appointment.types';\r\nimport { updateAppointmentOnList, updateJobtOnList } from './appointment.utils';\r\n\r\nconst INITIAL_STATE = {\r\n    appointments: [],\r\n    jobs: []\r\n};\r\n\r\nconst appointmentReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_APPOINTMENTS:\r\n            return {\r\n                ...state,\r\n                appointments: [...state.appointments, ...action.payload]\r\n            };\r\n        case types.UPDATED_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: updateAppointmentOnList(state.appointments, action.payload.appointment, action.payload.index)\r\n            }\r\n        case types.ADD_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: [...state.jobs, action.payload]\r\n            }\r\n        case types.UPDATE_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: updateJobtOnList(state.jobs, action.payload.job, action.payload.index)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appointmentReducer;","import * as types from './period.types';\r\n\r\nconst INITIAL_STATE = {\r\n    workStart: 9,\r\n    workEnd: 18,\r\n    freeStart: 18,\r\n    freeEnd: 24\r\n};\r\n\r\nconst periodReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SET_WORK_PERIOD:\r\n            return {\r\n                ...state,\r\n                workStart: action.payload.start,\r\n                workEnd: action.payload.end\r\n            };\r\n        case types.SET_FREE_PERIOD:\r\n            return {\r\n                ...state,\r\n                freeStart: action.payload.start,\r\n                freeEnd: action.payload.end\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default periodReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport appointmentReducer from './appointment/appointment.reducer';\r\n\r\nimport periodReducer from './period/period.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    period: periodReducer,\r\n    appointment: appointmentReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import { createStore } from 'redux';\r\n\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root_reducer';\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    //Set Development only middlewares\r\n}\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"antd/dist/antd.css\";\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { store, persistor } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}