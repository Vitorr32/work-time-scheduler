{"version":3,"sources":["logo.svg","redux/appointment/appointment.types.js","redux/appointment/appointment.actions.js","utils/constants.js","utils/periods.js","components/AppointmentForm/AppointmentForm.component.js","redux/period/period.types.js","utils/PeriodType.js","components/PeriodSetter/PeriodSetter.component.js","redux/period/period.actions.js","components/Header/Header.component.js","pages/Home/Home.component.js","App.js","reportWebVitals.js","redux/appointment/appointment.utils.js","redux/appointment/appointment.reducer.js","utils/persistor.js","redux/period/period.reducer.js","redux/root_reducer.js","redux/store.js","index.js"],"names":["ADD_APPOINTMENTS","UPDATED_APPOINTMENT","DELETE_APPOINTMENT","ADD_JOB","UPDATE_JOB","DELETE_JOB","addAppointment","appointment","type","types","payload","APPOINTMENT_STATE_TO_DO","APPOINTMENT_STATE_COMPLETED","APPOINTMENT_STATE_CURRENT","APPOINTMENT_STATE_LATE","APPOINTMENT_STATE_DELAY","SCHEDULE_WORK_ONLY","SCHEDULE_FREE_TIME","SCHEDULE_FULL","JOB_NOT_STARTED","verifyAppointmentDisponibility","totalHoursNeeded","dueDate","currentAppointments","workStart","workEnd","freeStart","freeEnd","startDate","vacatedWorkPeriods","getAllVacatedSpacesInPeriodUntilDueDate","currentDistributedHours","getTotalHoursOfPeriods","length","state","periods","currentlyRemainingHours","vacatedFreePeriods","distributedHoursInFreePeriod","mergedPeriods","mergeContinousAppointmentsInDifferentPeriods","console","error","periodStart","periodEnd","appointments","hoursNeeded","allContinuousPeriods","currentTimestamp","clone","moment","add","startOf","set","currentContinuousPeriod","start","end","hours","isBefore","push","Object","assign","find","isBetween","endDate","undefined","isSameOrAfter","get","mergedAppointment","indexesToIgnore","forEach","index","includes","appointmentToMergeIndex","findIndex","appointmentToCompare","isSame","diff","reduce","sum","period","layout","labelCol","span","wrapperCol","AppointmentForm","props","formRef","React","createRef","isModalVisible","isFutherActionModalVisible","appointmentPreview","appointmentPeriods","appointmentSuccessful","this","setState","values","newJobId","jobs","appointmentsToCreate","map","title","name","price","description","id","jobId","newJob","totalHours","addJob","addAppointments","resetFormState","current","resetFields","lastChange","value","verifiedDisponibility","shouldDelay","getFieldsValue","finalAppointments","Math","min","max","onFormSubmit","_","Promise","reject","resolve","enabledForm","allowFormToBeSubmitted","Fragment","onClick","visible","okText","onCancel","bind","onOk","validateFields","then","catch","info","log","okButtonProps","disabled","ref","initialValues","remember","onFinish","onFieldsChange","previewPeriods","Item","label","rules","required","message","TextArea","formatter","replace","parser","precision","validator","validateDueDate","format","showTime","className","footer","Tooltip","onFutherActionSet","icon","FieldTimeOutlined","CoffeeOutlined","Component","connect","dispatch","SET_WORK_PERIOD","SET_FREE_PERIOD","WORK_PERIOD","FREE_PERIOD","RangePicker","TimePicker","PeriodSetter","periodType","PeriodType","setWorkPeriod","periodRange","setFreePeriod","getPeriodLabel","ownProps","Number","Header","HomeComponent","appointmentUpdateInterval","isRealocateModalVisible","realocatedState","job","onUpdateAppointmentsState","clearTimeout","currentState","checkStateOfAppointment","updateAppointment","timeUntilNextHour","setTimeout","findJobOfAppointment","isAfter","input","isHoursBetween","TimeTableCell","checkStart","checkEnd","periodStartDate","periodEndDate","data","formatDate","AppointmentContent","style","height","toFixed","hour","minute","padding","appointmentData","Grid","container","alignItems","item","xs","display","justifyContent","Lens","color","marginTop","ExclamationCircleOutlined","fontSize","AccessTime","onCompleteTheAppointment","CheckCircleOutlined","size","onDelayTheAppointment","onFinishTheAppointment","DoubleRightOutlined","updatedListOfAppointments","indexOnList","toCompare","associatedJob","shouldDeleteJob","deleteJob","updateJob","onUpdateJobStateOnAppointmentChange","allAppointments","jobAppointments","filter","newDistributedPeriods","onConfirmationOfRealocation","directState","newAppointments","indexOfAppointment","appoID","splice","app","deleteAppointment","children","Appointment","deleted","appo","previewedDeletionAppointments","changed","keys","changedId","newStartDate","newEndDate","Paper","locale","defaultCurrentViewName","onCommitChanges","onAppointmentChangeCommited","cellDuration","timeTableCellComponent","TableTimeCellRenderer","appointmentComponent","getAppointmentComponet","appointmentContentComponent","getCustomAppointmentContent","showCloseButton","showDeleteButton","contentComponent","getTooltipContent","allowResize","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","updateAppointmentOnList","appointmentList","toUpdateAppointment","updatedList","updateJobOnList","jobList","toUpdateJob","toDeleteIDs","indexesOnList","deleteJobAndAssociatedAppointments","toDeletejob","updatedJobList","updatedAppointmentList","appointmentOfJobID","indexOnAppointmentList","INITIAL_STATE","history","appointmentReducer","action","replacer","toISOString","reviver","match","periodReducer","persistConfig","key","storage","transforms","createTransform","toDeshydrate","JSON","stringify","toRehydrate","parse","rootReducer","combineReducers","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b3505c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const ADD_APPOINTMENTS = 'ADD_APPOINTMENTS';\r\nexport const UPDATED_APPOINTMENT= 'UPDATED_APPOINTMENT';\r\nexport const DELETE_APPOINTMENT = 'DELETE_APPOINTMENT';\r\n\r\nexport const ADD_JOB = 'ADD_JOB';\r\nexport const UPDATE_JOB = 'UPDATE_JOB';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\n\r\nexport const ADD_TO_HISTORY = 'ADD_TO_HISTORY';","import * as types from './appointment.types';\r\n\r\nexport const addAppointment = appointment => ({\r\n    type: types.ADD_APPOINTMENTS,\r\n    payload: appointment\r\n});\r\n\r\nexport const updateAppointment = appointment => ({\r\n    type: types.UPDATED_APPOINTMENT,\r\n    payload: appointment\r\n})\r\n\r\nexport const deleteAppointment = id => ({\r\n    type: types.DELETE_APPOINTMENT,\r\n    payload: id\r\n})\r\n\r\nexport const addJob = job => ({\r\n    type: types.ADD_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const updateJob = job => ({\r\n    type: types.UPDATE_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const deleteJob = job => ({\r\n    type: types.DELETE_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const addToHistory = job => ({\r\n    type: types.ADD_TO_HISTORY,\r\n    payload: job\r\n})\r\n","export const SCHEDULER_DATE_FORMAT = 'YYYY-MM-DDTHH:mm'\r\n\r\nexport const APPOINTMENT_STATE_TO_DO = 'APPOINTMENT_STATE_TO_DO'\r\nexport const APPOINTMENT_STATE_COMPLETED = 'APPOINTMENT_STATE_COMPLETED'\r\nexport const APPOINTMENT_STATE_CURRENT = 'APPOINTMENT_STATE_CURRENT'\r\nexport const APPOINTMENT_STATE_LATE = 'APPOINTMENT_STATE_LATE'\r\nexport const APPOINTMENT_STATE_DELAY = 'APPOINTMENT_STATE_DELAY'\r\n\r\nexport const SCHEDULE_WORK_ONLY = 'SCHEDULE_WORK_ONLY';\r\nexport const SCHEDULE_FREE_TIME = 'SCHEDULE_FREE_TIME';\r\nexport const SCHEDULE_FULL = 'SCHEDULE_FULL';\r\n\r\nexport const JOB_NOT_STARTED = 'JOB_NOT_STARTED';\r\nexport const JOB_ON_GOING = 'JOB_ON_GOING';\r\nexport const JOB_COMPLETED = 'JOB_COMPLETED';","import { SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from \"./constants\";\r\nimport moment from 'moment';\r\n\r\nexport function verifyAppointmentDisponibility(totalHoursNeeded, dueDate, currentAppointments, [workStart, workEnd], [freeStart, freeEnd], startDate = null) {\r\n    if (!workStart || !workEnd) {\r\n        console.error(\"There was no work period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    const vacatedWorkPeriods = getAllVacatedSpacesInPeriodUntilDueDate(\r\n        workStart,\r\n        workEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        totalHoursNeeded,\r\n        startDate\r\n    )\r\n\r\n    const currentDistributedHours = getTotalHoursOfPeriods(vacatedWorkPeriods)\r\n\r\n    //If we already allocated all the nescessary time in the work period, finish the function, otherwise allocate to free time\r\n    if (vacatedWorkPeriods.length != 0 && currentDistributedHours >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_WORK_ONLY,\r\n            periods: vacatedWorkPeriods\r\n        }\r\n    }\r\n\r\n    if (!freeStart || !freeEnd) {\r\n        console.error(\"It was nescessary to use free time, but there was no free period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    const currentlyRemainingHours = totalHoursNeeded - currentDistributedHours;\r\n\r\n    // console.log(currentlyRemainingHours);\r\n\r\n    const vacatedFreePeriods = getAllVacatedSpacesInPeriodUntilDueDate(\r\n        freeStart,\r\n        freeEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        currentlyRemainingHours,\r\n        startDate\r\n    )\r\n\r\n    // console.log(vacatedFreePeriods);\r\n\r\n    const distributedHoursInFreePeriod = getTotalHoursOfPeriods(vacatedFreePeriods);\r\n    const mergedPeriods = mergeContinousAppointmentsInDifferentPeriods([...vacatedWorkPeriods, ...vacatedFreePeriods])\r\n\r\n    if (vacatedFreePeriods.length != 0 && currentDistributedHours + distributedHoursInFreePeriod >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_FREE_TIME,\r\n            periods: mergedPeriods\r\n        }\r\n    }\r\n\r\n    return {\r\n        state: SCHEDULE_FULL,\r\n        periods: mergedPeriods\r\n    }\r\n}\r\n\r\nexport function getAllVacatedSpacesInPeriodUntilDueDate(periodStart, periodEnd, dueDate, appointments, hoursNeeded, startDate) {\r\n    const allContinuousPeriods = [];\r\n    const allPeriods = [];\r\n\r\n    // console.log(\"startDate\", startDate);\r\n    //Start with the period\r\n    let currentTimestamp = startDate ? startDate.clone() : moment().add(1, 'day').startOf('day').set('hour', periodStart);\r\n    let currentContinuousPeriod = {\r\n        start: null,\r\n        end: null,\r\n        hours: 0\r\n    }\r\n\r\n    // console.log(\"periodStar\", periodStart);\r\n    // console.log(\"periodEnd\", periodEnd)\r\n\r\n    // console.log('currentTimestamp', currentTimestamp);\r\n    // console.log('dueDate', dueDate);\r\n\r\n    while (currentTimestamp.isBefore(dueDate)) {\r\n        // console.log(currentTimestamp.format(\"DD/MM HH:mm\"))\r\n        /*  Check if the periods already obtained already are enough for the appointment, so theres no \r\n            to continue the while loop*/\r\n        if (hoursNeeded != 0) {\r\n            if (currentContinuousPeriod.start) {\r\n                if (getTotalHoursOfPeriods([...allContinuousPeriods, { hours: 1 + currentContinuousPeriod.hours }]) >= hoursNeeded) {\r\n\r\n                    // console.log(\"SKipping due to reached hours\");\r\n                    currentContinuousPeriod.end = currentTimestamp.clone();\r\n                    currentContinuousPeriod.hours++;\r\n\r\n                    //Add the finished continuous period to the array.\r\n                    allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                    currentContinuousPeriod = {\r\n                        start: null,\r\n                        end: null,\r\n                        hours: 0\r\n                    }\r\n                    break;\r\n                }\r\n            } else if (getTotalHoursOfPeriods(allContinuousPeriods) >= hoursNeeded) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Try to find an appointment that contains the current iterated hour.\r\n        const appointment = appointments.find(appointment => {\r\n            //Check if the current timestamp is between this appointment period\r\n            if (currentTimestamp.isBetween(appointment.startDate, appointment.endDate, undefined, \"[)\")) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        })\r\n\r\n        //If there's already an appointment in the current timestamp iterated, skip to the end of the appointment\r\n        if (appointment) {\r\n            // console.log(\"SKipping due to conflicting appointment\");\r\n            //If there's an current period that has been stopped thanks to this appointment, save in the array.\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            if (appointment.endDate.isSameOrAfter(appointment.endDate.clone().startOf('day').set('hour', periodEnd))) {\r\n                currentTimestamp = currentTimestamp.add(1, 'day').set('hour', periodStart);\r\n            } else {\r\n                currentTimestamp = currentTimestamp.set('hour', appointment.endDate.get('hour'));\r\n            }\r\n            continue;\r\n        }\r\n\r\n        //If the current timestamp is beyond or just reached the dueDate\r\n        if (currentTimestamp.isSameOrAfter(dueDate)) {\r\n            // console.log(\"SKipping by due date reached\");\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        //If the current hour is the final hour of the period, end the continuous period\r\n        if (currentTimestamp.isSameOrAfter(currentTimestamp.clone().set('hour', periodEnd))) {\r\n            // console.log(\"SKipping by period end\");\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            currentTimestamp = currentTimestamp.add(1, 'day').set('hour', periodStart);\r\n            continue;\r\n        }\r\n\r\n\r\n        //If there's no appointment, this is a free hour to add to the current continuous period\r\n        if (currentContinuousPeriod.start) {\r\n            currentContinuousPeriod.end = currentTimestamp.clone();\r\n            currentContinuousPeriod.hours++;\r\n        } else {\r\n            currentContinuousPeriod.start = currentTimestamp.clone();\r\n        }\r\n\r\n        currentTimestamp = currentTimestamp.add(1, 'hour');\r\n    }\r\n\r\n    return allContinuousPeriods;\r\n}\r\n\r\nexport function mergeContinousAppointmentsInDifferentPeriods(appointments) {\r\n    const mergedAppointment = [];\r\n    const indexesToIgnore = [];\r\n\r\n    appointments.forEach((appointment, index) => {\r\n        if (indexesToIgnore.includes(index)) {\r\n            return;\r\n        }\r\n\r\n        const appointmentToMergeIndex = appointments.findIndex(appointmentToCompare => appointment.end.isSame(appointmentToCompare.start));\r\n        if (appointmentToMergeIndex !== -1) {\r\n            indexesToIgnore.push(appointmentToMergeIndex);\r\n\r\n            appointment.end = appointments[appointmentToMergeIndex].end;\r\n            appointment.hours = appointment.end.diff(appointment.start, 'hours');\r\n        }\r\n\r\n        mergedAppointment.push(appointment);\r\n    })\r\n\r\n    return mergedAppointment;\r\n}\r\n\r\nexport function getTotalHoursOfPeriods(periods) {\r\n    return periods.reduce((sum, period) => ({ hours: sum.hours + period.hours }), { hours: 0 }).hours;\r\n}\r\n","import { Input, Form, Modal, InputNumber, DatePicker, Button } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addAppointment, addJob } from '../../redux/appointment/appointment.actions';\r\nimport moment from 'moment';\r\n\r\nimport './AppointmentForm.styles.scss';\r\nimport { APPOINTMENT_STATE_TO_DO, JOB_NOT_STARTED, SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from '../../utils/constants';\r\nimport { CoffeeOutlined, FieldTimeOutlined } from '@ant-design/icons';\r\nimport { getAllVacatedSpacesInPeriodUntilDueDate, getTotalHoursOfPeriods, mergeContinousAppointmentsInDifferentPeriods, verifyAppointmentDisponibility } from '../../utils/periods';\r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nclass AppointmentForm extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false\r\n        }\r\n    }\r\n\r\n    resetFormState() {\r\n        this.setState({\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false\r\n        })\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        const newJobId = this.props.jobs.length;\r\n\r\n        const appointmentsToCreate = this.state.appointmentPeriods.map((period, index) => ({\r\n            startDate: period.start,\r\n            endDate: period.end,\r\n            title: values.name,\r\n            price: values.price,\r\n            description: values.description,\r\n            state: APPOINTMENT_STATE_TO_DO,\r\n            hours: period.hours,\r\n            id: 'job_' + newJobId + '_app_' + index,\r\n            jobId: newJobId\r\n        }))\r\n\r\n        const newJob = {\r\n            id: newJobId,\r\n            name: values.name,\r\n            appointments: appointmentsToCreate.map(appointment => appointment.id),\r\n            price: values.price,\r\n            description: values.description,\r\n            dueDate: values.dueDate,\r\n            totalHours: values.hours,\r\n            state: JOB_NOT_STARTED\r\n        }\r\n\r\n\r\n        this.props.addJob(newJob);\r\n        this.props.addAppointments(appointmentsToCreate);\r\n\r\n        this.resetFormState();\r\n        this.formRef.current.resetFields();\r\n    }\r\n\r\n    previewPeriods([lastChange], [_, __, ___, hours, dueDate]) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (lastChange.name.includes('hours') || lastChange.name.includes('dueDate')) {\r\n            if (hours.value && dueDate.value) {\r\n                const verifiedDisponibility = verifyAppointmentDisponibility(hours.value, dueDate.value, appointments, [workStart, workEnd], [freeStart, freeEnd]);\r\n\r\n                if (!verifiedDisponibility) {\r\n                    console.error(\"Error on saving the periods\")\r\n                    return;\r\n                }\r\n\r\n                switch (verifiedDisponibility.state) {\r\n                    case SCHEDULE_WORK_ONLY:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job can be sucessfully distributed in the work period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FREE_TIME:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job will invade some of your free time period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FULL:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job could not be distributed into your work/free time, further action will be required on submit',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: false\r\n                        })\r\n                        break;\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    appointmentPreview: '',\r\n                    appointmentPeriods: []\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onFutherActionSet(shouldDelay) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        const { dueDate, hours } = this.formRef.current.getFieldsValue();\r\n\r\n        const extraAppointments = getAllVacatedSpacesInPeriodUntilDueDate(\r\n            shouldDelay ? Math.min(workStart, freeStart) : Math.max(workEnd, freeEnd),\r\n            shouldDelay ? Math.max(workEnd, freeEnd) : Math.min(workStart, freeStart),\r\n            shouldDelay ? dueDate.set('year', 9999) : dueDate,\r\n            [...appointments, ...this.state.appointmentPeriods],\r\n            hours - getTotalHoursOfPeriods(this.state.appointmentPeriods),\r\n            shouldDelay ? dueDate : moment().startOf('day').set('hour', Math.max(workEnd, freeEnd))\r\n        )\r\n\r\n        const finalAppointments = mergeContinousAppointmentsInDifferentPeriods(extraAppointments, this.state.appointmentPeriods);\r\n\r\n        this.setState({\r\n            appointmentPeriods: finalAppointments,\r\n            appointmentSuccessful: true,\r\n            appointmentPreview: '',\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false\r\n        }, () => this.onFormSubmit(this.formRef.current.getFieldsValue()))\r\n    }\r\n\r\n    allowFormToBeSubmitted() {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (workStart && workEnd && freeStart && freeEnd) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    validateDueDate(_, dueDate) {\r\n        if (moment().isSameOrAfter(dueDate)) {\r\n            return Promise.reject('The due date needs to be after now!')\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    render() {\r\n        const enabledForm = this.allowFormToBeSubmitted();\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Button type=\"primary\" onClick={() => this.setState({ isModalVisible: true })}>Add Event</Button>\r\n\r\n                <Modal title=\"Add Event\"\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={this.resetFormState.bind(this)}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                if (this.state.appointmentSuccessful) {\r\n                                    this.onFormSubmit(values);\r\n                                } else {\r\n                                    this.setState({ isFutherActionModalVisible: true })\r\n                                }\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                    okButtonProps={{ disabled: !enabledForm }}\r\n                >\r\n\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"eventForm\"\r\n                        initialValues={{ remember: true }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                        onFieldsChange={this.previewPeriods.bind(this)}\r\n\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            rules={[{ required: true, message: 'The event name is required' }]}\r\n                        >\r\n                            <Input disabled={!enabledForm} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Description\"\r\n                            name=\"description\"\r\n                        >\r\n                            <Input.TextArea disabled={!enabledForm} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Price\"\r\n                            name=\"price\"\r\n                        >\r\n                            <InputNumber\r\n                                formatter={price => `$ ${price}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                parser={price => price.replace(/\\$\\s?|(,*)/g, '')}\r\n                                min={0}\r\n                                precision={2}\r\n                                disabled={!enabledForm}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Estimated Hours\"\r\n                            name=\"hours\"\r\n                            rules={[{ required: true, message: 'The ETA is required to allow the scheduler to distribute time' }]}\r\n                            disabled={!enabledForm}\r\n                        >\r\n                            <InputNumber\r\n                                min={0} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Due Date\"\r\n                            name=\"dueDate\"\r\n                            rules={[{ required: true, message: 'The dude date is required' }, { validator: this.validateDueDate }]}\r\n                            disabled={!enabledForm}\r\n                        >\r\n                            <DatePicker format={'DD/MM/YYYY HH:00'} showTime />\r\n                        </Form.Item >\r\n\r\n\r\n                        <span className=\"message\">{this.state.appointmentPreview}</span>\r\n                        {\r\n                            !enabledForm ?\r\n                                <span className=\"message\">\r\n                                    Please set the work and free period before attemping to add events to your schedule\r\n                                </span> : null\r\n                        }\r\n\r\n                    </Form>\r\n\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.isFutherActionModalVisible}\r\n                    footer={[\r\n                        <Tooltip key=\"delay\" title=\"Delay\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(true)} icon={<FieldTimeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Tooltip key=\"overwrite_sleep\" title=\"Overwrite Sleep\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(false)} icon={<CoffeeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Button key=\"back\" onClick={() => this.setState({ isFutherActionModalVisible: false })}>\r\n                            Cancel\r\n                        </Button>\r\n                    ]}>\r\n                    <p>The appointment submitted can't be concluded during your work and free period, what should the scheduler do to allow for this job to be scheduled?</p>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        addJob: (payload) => dispatch(addJob(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppointmentForm);","export const SET_WORK_PERIOD = 'SET_WORK_PERIOD';\r\nexport const SET_FREE_PERIOD = 'SET_FREE_PERIOD';","export const WORK_PERIOD = 'WORK_PERIOD';\r\nexport const FREE_PERIOD = 'FREE_PERIOD';\r\nexport const SLEEP_PERIOD = 'SLEEP_PERIOD';","import { Button, Form, Modal, TimePicker } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setFreePeriod, setWorkPeriod } from '../../redux/period/period.actions';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\nimport moment from 'moment';\r\n\r\nimport './PeriodSetter.styles.scss';\r\n\r\nconst { RangePicker } = TimePicker;\r\n\r\nclass PeriodSetter extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false\r\n        }\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        switch (this.props.periodType) {\r\n            case PeriodType.WORK_PERIOD:\r\n                this.props.setWorkPeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n            case PeriodType.FREE_PERIOD:\r\n                this.props.setFreePeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n        }\r\n\r\n        this.setState({ isModalVisible: false})\r\n    }\r\n\r\n    getPeriodLabel(periodType) {\r\n        switch (periodType) {\r\n            case PeriodType.FREE_PERIOD:\r\n                return 'Free';\r\n            case PeriodType.WORK_PERIOD:\r\n                return 'Work';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button onClick={() => this.setState({ isModalVisible: true })}>{this.getPeriodLabel(this.props.periodType)} Period</Button>\r\n\r\n                <Modal\r\n                    title={`${this.getPeriodLabel(this.props.periodType)} Period`}\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={() => this.setState({ isModalVisible: false })}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                this.onFormSubmit(values);\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                >\r\n                    <Form\r\n                        ref={this.formRef}\r\n                        name=\"periodForm\"\r\n                        initialValues={{\r\n                            periodRange: [\r\n                                moment().startOf('day').set('hours', this.props.start),\r\n                                moment().startOf('day').set('hours', this.props.end)\r\n                            ],\r\n                            remember: true\r\n                        }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"periodRange\"\r\n                            rules={[{ required: true, message: 'The range of the period is required!' }]}\r\n                        >\r\n                            <RangePicker format={\"HH:00\"} />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    switch (ownProps.periodType) {\r\n        case PeriodType.WORK_PERIOD:\r\n            return {\r\n                start: new Number(state.period.workStart),\r\n                end: new Number(state.period.workEnd)\r\n            }\r\n        case PeriodType.FREE_PERIOD:\r\n            return {\r\n                start: state.period.freeStart,\r\n                end: state.period.freeEnd\r\n            }\r\n        default:\r\n            return {\r\n\r\n            }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWorkPeriod: (payload) => dispatch(setWorkPeriod(payload)),\r\n        setFreePeriod: (payload) => dispatch(setFreePeriod(payload))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PeriodSetter);","import * as types from './period.types';\r\n\r\nexport const setWorkPeriod = timeRange => ({\r\n    type: types.SET_WORK_PERIOD,\r\n    payload: timeRange\r\n});\r\n\r\nexport const setFreePeriod = timeRange => ({\r\n    type: types.SET_FREE_PERIOD,\r\n    payload: timeRange\r\n});","import React from 'react';\r\nimport AppointmentForm from '../AppointmentForm/AppointmentForm.component';\r\nimport PeriodSetter from '../PeriodSetter/PeriodSetter.component';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\n\r\nimport './Header.styles.scss';\r\n\r\nexport class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    onFormSubmit() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h2>Work Scheduler</h2>\r\n\r\n                <div className=\"button-group\">\r\n                    <PeriodSetter periodType={PeriodType.WORK_PERIOD} />\r\n                    <PeriodSetter periodType={PeriodType.FREE_PERIOD} />\r\n\r\n                    <AppointmentForm />\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { EditingState, IntegratedEditing, ViewState } from '@devexpress/dx-react-scheduler';\r\nimport {\r\n    Scheduler,\r\n    DayView,\r\n    WeekView,\r\n    Appointments,\r\n    Toolbar,\r\n    ViewSwitcher,\r\n    MonthView,\r\n    AppointmentTooltip,\r\n    DateNavigator,\r\n    ConfirmationDialog,\r\n    DragDropProvider\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\nimport { Header } from '../../components/Header/Header.component';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { APPOINTMENT_STATE_COMPLETED, APPOINTMENT_STATE_CURRENT, APPOINTMENT_STATE_DELAY, APPOINTMENT_STATE_LATE, APPOINTMENT_STATE_TO_DO, JOB_COMPLETED, JOB_NOT_STARTED, JOB_ON_GOING, SCHEDULE_FREE_TIME, SCHEDULE_FULL } from '../../utils/constants';\r\nimport { FieldTimeOutlined, DoubleRightOutlined, CheckCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport { addAppointment, deleteAppointment, deleteJob, updateAppointment, updateJob } from '../../redux/appointment/appointment.actions';\r\nimport { verifyAppointmentDisponibility } from '../../utils/periods';\r\nimport { Button } from 'antd';\r\n\r\nimport './Home.styles.scss';\r\nimport { Grid } from '@material-ui/core';\r\nimport { AccessTime, Lens } from '@material-ui/icons';\r\nimport Modal from 'antd/lib/modal/Modal';\r\n\r\nclass HomeComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            appointmentUpdateInterval: null,\r\n            isRealocateModalVisible: false,\r\n            realocatedState: {\r\n                state: '',\r\n                periods: [],\r\n                appointment: null,\r\n                job: null\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onUpdateAppointmentsState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.appointmentUpdateInterval) {\r\n            clearTimeout(this.state.appointmentUpdateInterval)\r\n            this.setState({ appointmentUpdateInterval: null })\r\n        }\r\n    }\r\n\r\n    onUpdateAppointmentsState() {\r\n        const { appointments } = this.props;\r\n\r\n        appointments.forEach(appointment => {\r\n            const currentState = this.checkStateOfAppointment(appointment)\r\n            if (appointment.state !== currentState) {\r\n\r\n                console.log(\"New state\" + currentState + \"for appoitnment\" + appointment.id);\r\n\r\n                appointment.state = currentState;\r\n\r\n                this.props.updateAppointment(appointment);\r\n            }\r\n        })\r\n\r\n        const timeUntilNextHour = moment().add(1, 'hour').startOf('hour').diff(moment(), 'milliseconds');\r\n\r\n        this.setState({\r\n            appointmentUpdateInterval: setTimeout(() => this.onUpdateAppointmentsState(), timeUntilNextHour)\r\n        })\r\n    }\r\n\r\n    checkStateOfAppointment(appointment) {\r\n        //Once completed, the state is not supposed to be changed anymore\r\n        if (appointment.state === APPOINTMENT_STATE_COMPLETED) {\r\n            return APPOINTMENT_STATE_COMPLETED;\r\n        }\r\n\r\n        const job = this.findJobOfAppointment(appointment);\r\n        if (appointment.startDate.isAfter(job.dueDate)) {\r\n            return APPOINTMENT_STATE_DELAY\r\n        }\r\n\r\n        //If the appointment has ended before the current date, then it's late\r\n        if (appointment.endDate.isBefore(moment())) {\r\n            return APPOINTMENT_STATE_LATE;\r\n        }\r\n\r\n        //If the appointment start is later than now, then it is still to do\r\n        if (appointment.startDate.isAfter(moment())) {\r\n            return APPOINTMENT_STATE_TO_DO;\r\n        }\r\n\r\n        //Otherwise, the appointment is occuring currrently\r\n        return APPOINTMENT_STATE_CURRENT;\r\n    }\r\n\r\n    TableTimeCellRenderer(input) {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n\r\n        const startDate = moment(input.startDate);\r\n        const endDate = moment(input.endDate);\r\n\r\n        let className = \"sleep-period\";\r\n\r\n        if (this.isHoursBetween(workStart, workEnd, startDate, endDate)) {\r\n            className = \"work-period\"\r\n        } else if (this.isHoursBetween(freeStart, freeEnd, startDate, endDate)) {\r\n            className = \"free-period\"\r\n        }\r\n\r\n        return <DayView.TimeTableCell {...input} className={className}></DayView.TimeTableCell>\r\n    }\r\n\r\n    isHoursBetween(periodStart, periodEnd, checkStart, checkEnd) {\r\n        const periodStartDate = checkStart.clone().startOf('day').set('hour', periodStart);\r\n        const periodEndDate = checkEnd.clone().startOf('day').set('hour', periodEnd);\r\n\r\n        return checkStart.isBetween(periodStartDate, periodEndDate, undefined, \"[)\") &&\r\n            checkEnd.isBetween(periodStartDate, periodEndDate, undefined, \"(]\")\r\n\r\n    }\r\n\r\n    getCustomAppointmentContent(props) {\r\n        const { data, formatDate } = props;\r\n\r\n        const job = this.findJobOfAppointment(data);\r\n\r\n        return (\r\n            <Appointments.AppointmentContent {...props} style={{ height: '100%' }}>\r\n                <div className=\"app-appointment-content\">\r\n                    <div className=\"title\">\r\n                        {data.title}\r\n                    </div>\r\n                    {\r\n                        data.price\r\n                            ? <div className=\"value-wrapper\">$ {data.price.toFixed(2)}</div>\r\n                            : null\r\n                    }\r\n                    <span>Due to: {job.dueDate.format('DD/MM/YYYY HH:00')}</span>\r\n                    <div className=\"hour-wrapper\">\r\n                        <span>{formatDate(data.startDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                        <span style={{ padding: \"0px 3px\" }}> - </span>\r\n                        <span>{formatDate(data.endDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                    </div>\r\n                </div>\r\n            </Appointments.AppointmentContent>\r\n        )\r\n    }\r\n\r\n    getTooltipContent(props) {\r\n        const { appointmentData, formatDate } = props;\r\n\r\n        const job = this.findJobOfAppointment(appointmentData);\r\n        if (!job) { return null; }\r\n\r\n        return (\r\n            <div className=\"tooltip-content\">\r\n                <Grid container alignItems=\"flex-start\" className=\"meta\">\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center' }} >\r\n                        <Lens className=\"lens\" style={{\r\n                            color: appointmentData.state === APPOINTMENT_STATE_TO_DO\r\n                                ? '#1890ff'\r\n                                : appointmentData.state === APPOINTMENT_STATE_COMPLETED\r\n                                    ? '#a4b1db'\r\n                                    : appointmentData.state === APPOINTMENT_STATE_CURRENT\r\n                                        ? 'green'\r\n                                        : appointmentData.state === APPOINTMENT_STATE_LATE\r\n                                            ? 'orange'\r\n                                            : 'crimson'\r\n                        }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <div className=\"title\" >\r\n                            {appointmentData.title}\r\n                        </div>\r\n                        <div >\r\n                            {appointmentData.startDate.format('dddd, DD MMMM YYYY')}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" style={{ marginTop: '10px' }}>\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center', color: 'gray' }} >\r\n                        <ExclamationCircleOutlined style={{ fontSize: '24px' }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <div >\r\n                            {`${formatDate(appointmentData.startDate, { hour: 'numeric', minute: 'numeric' })}\r\n                            - ${formatDate(appointmentData.endDate, { hour: 'numeric', minute: 'numeric' })}`}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container alignItems=\"center\" >\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center', color: 'gray' }} >\r\n                        <AccessTime style={{ fontSize: '24px' }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <span>Due at {job.dueDate.format('dddd, DD MMMM YYYY HH:00')}</span>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {\r\n                    appointmentData.description\r\n                        ?\r\n                        <p className=\"description\">\r\n                            {appointmentData.description}\r\n                        </p>\r\n                        :\r\n                        null\r\n                }\r\n\r\n\r\n                <div className=\"tooltip-wrapper\">\r\n                    <Button\r\n                        onClick={() => this.onCompleteTheAppointment(appointmentData)}\r\n                        icon={<CheckCircleOutlined />}\r\n                        size={'large'}>\r\n                        Complete\r\n                        </Button>\r\n                    <Button\r\n                        onClick={() => this.onDelayTheAppointment(appointmentData)}\r\n                        icon={<FieldTimeOutlined />}\r\n                        size={'large'}>\r\n                        Delay\r\n                        </Button>\r\n                    <Button\r\n                        onClick={() => this.onFinishTheAppointment(appointmentData)}\r\n                        icon={<DoubleRightOutlined />}\r\n                        size={'large'}>\r\n                        Finish\r\n                        </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onCompleteTheAppointment(appointment) {\r\n        const { appointments, jobs } = this.props;\r\n\r\n        const updatedListOfAppointments = [...appointments];\r\n        const indexOnList = updatedListOfAppointments.findIndex(toCompare => toCompare.id === appointment.id);\r\n\r\n        if (indexOnList === -1) {\r\n            console.error(\"Unknown appointment was completed!\");\r\n            return;\r\n        }\r\n\r\n        updatedListOfAppointments[indexOnList].state = APPOINTMENT_STATE_COMPLETED;\r\n        const associatedJob = jobs.find(job => job.id === appointment.jobId);\r\n\r\n        //Check that with the conclusion of this appointment, the job was completed entirely\r\n        if (this.shouldDeleteJob(associatedJob, updatedListOfAppointments)) {\r\n            this.props.deleteJob(associatedJob);\r\n        } else {\r\n            this.props.updateAppointment(updatedListOfAppointments[indexOnList]);\r\n            this.props.updateJob(this.onUpdateJobStateOnAppointmentChange(associatedJob, updatedListOfAppointments));\r\n        }\r\n    }\r\n\r\n    onUpdateJobStateOnAppointmentChange(job, allAppointments) {\r\n        const jobAppointments = allAppointments.filter(appointment => job.appointments.includes(appointment.id));\r\n\r\n        //If no appointment is still in the state to do, means that the job is fully completed and should be removed\r\n        if (jobAppointments.filter(appointment =>\r\n            appointment.state === APPOINTMENT_STATE_TO_DO ||\r\n            appointment.state === APPOINTMENT_STATE_CURRENT ||\r\n            appointment.state === APPOINTMENT_STATE_DELAY ||\r\n            appointment.state === APPOINTMENT_STATE_LATE).length === 0) {\r\n            job.state = JOB_COMPLETED\r\n            //Else if not a single appointment has started, that means the job is still on hold\r\n        } else if (jobAppointments.filter(appointment => appointment.state === APPOINTMENT_STATE_COMPLETED).length === 0) {\r\n            job.state = JOB_NOT_STARTED\r\n        } else {\r\n            job.state = JOB_ON_GOING\r\n        }\r\n\r\n        return job;\r\n    }\r\n\r\n    shouldDeleteJob(job, allAppointments) {\r\n        const jobAppointments = allAppointments.filter(appointment => job.appointments.includes(appointment.id));\r\n\r\n        return jobAppointments.filter(appointment =>\r\n            appointment.state === APPOINTMENT_STATE_TO_DO ||\r\n            appointment.state === APPOINTMENT_STATE_CURRENT ||\r\n            appointment.state === APPOINTMENT_STATE_DELAY ||\r\n            appointment.state === APPOINTMENT_STATE_LATE\r\n        ).length === 0;\r\n    }\r\n\r\n    onDelayTheAppointment(appointment) {\r\n        const { workStart, workEnd, freeStart, freeEnd, appointments } = this.props;\r\n\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        console.log(\"appointment.endDate\", appointment.endDate.format(\"DD/MM/YYYY HH:mm\"))\r\n\r\n        const newDistributedPeriods = verifyAppointmentDisponibility(\r\n            appointment.hours,\r\n            job.dueDate,\r\n            appointments,\r\n            [workStart, workEnd],\r\n            [freeStart, freeEnd],\r\n            appointment.endDate\r\n        );\r\n\r\n        console.log(newDistributedPeriods);\r\n\r\n        if (newDistributedPeriods.state === SCHEDULE_FREE_TIME || newDistributedPeriods === SCHEDULE_FULL) {\r\n            this.setState({\r\n                realocatedState: { ...newDistributedPeriods, appointment, job },\r\n                isRealocateModalVisible: true\r\n            })\r\n        } else {\r\n            this.onConfirmationOfRealocation({ ...newDistributedPeriods, appointment, job })\r\n        }\r\n    }\r\n\r\n    onConfirmationOfRealocation(directState = null) {\r\n        const { periods, state, job, appointment } = directState || this.state.realocatedState;\r\n\r\n        const newAppointments = periods.map((period, index) => ({\r\n            startDate: period.start,\r\n            endDate: period.end,\r\n            title: job.name,\r\n            price: job.price,\r\n            description: job.description,\r\n            state: APPOINTMENT_STATE_TO_DO,\r\n            hours: period.hours,\r\n            id: 'job_' + job.id + '_app_' + (job.appointments.length + index),\r\n            jobId: job.id\r\n        }));\r\n\r\n        //Removed old appointment and insert new ids from the job object\r\n        const indexOfAppointment = job.appointments.findIndex(appoID => appoID === appointment.id);\r\n        job.appointments.splice(indexOfAppointment, 1, ...newAppointments.map(app => app.id))\r\n\r\n        this.props.updateJob(job);\r\n        this.props.deleteAppointment([appointment.id]);\r\n        this.props.addAppointments(newAppointments);\r\n\r\n        this.setState({\r\n            isRealocateModalVisible: false,\r\n            realocatedState: null\r\n        })\r\n    }\r\n\r\n    onFinishTheAppointment(appointment) {\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        this.props.deleteJob(job);\r\n    }\r\n\r\n    getAppointmentComponet(props) {\r\n        const { children, style, data } = props;\r\n\r\n        let className;\r\n\r\n        if (data.state === APPOINTMENT_STATE_COMPLETED) {\r\n            className = \"appointment-done\"\r\n        }\r\n        else if (data.state === APPOINTMENT_STATE_CURRENT) {\r\n            className = \"appointment-active\";\r\n        } else if (data.state === APPOINTMENT_STATE_LATE) {\r\n            className = \"appointment-late\"\r\n        } else if (data.state === APPOINTMENT_STATE_DELAY) {\r\n            className = \"appointment-delay\"\r\n        }\r\n\r\n        return (\r\n            <Appointments.Appointment\r\n                {...props}\r\n                className={className}\r\n                style={{\r\n                    ...style\r\n                }}\r\n            >\r\n                {children}\r\n            </Appointments.Appointment>\r\n        )\r\n    }\r\n\r\n    getStartDayHour() {\r\n        if (this.props.workStart && this.props.freeStart) {\r\n            return Math.min(this.props.workStart, this.props.freeStart);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getEndDayHour() {\r\n        if (this.props.workEnd && this.props.freeEnd) {\r\n            return Math.max(this.props.workEnd, this.props.freeEnd);\r\n        }\r\n\r\n        return 24;\r\n    }\r\n\r\n    findJobOfAppointment(appointment, index = false) {\r\n        return index\r\n            ?\r\n            this.props.jobs.findIndex(job => job.id === appointment.jobId)\r\n            :\r\n            this.props.jobs.find(job => job.id === appointment.jobId);\r\n    }\r\n\r\n    onAppointmentChangeCommited(props) {\r\n        const { appointments } = this.props;\r\n\r\n        if (props.deleted) {\r\n            const appointment = appointments.find(appo => appo.id === props.deleted);\r\n            const job = this.findJobOfAppointment(appointment);\r\n\r\n            const previewedDeletionAppointments = [...appointments];\r\n            previewedDeletionAppointments.splice(previewedDeletionAppointments.findIndex(appo => appo.id === props.deleted), 1)\r\n\r\n            if (this.shouldDeleteJob(job, previewedDeletionAppointments)) {\r\n                this.props.deleteJob(job);\r\n            } else {\r\n                job.appointments.splice(job.appointments.findIndex(appo => appo === props.deleted), 1);\r\n\r\n                this.props.deleteAppointment([props.deleted]);\r\n                this.props.updateJob(job);\r\n            }\r\n        }\r\n\r\n        if (props.changed) {\r\n            Object.keys(props.changed).forEach(changedId => {\r\n                const { endDate, startDate } = props.changed[changedId];\r\n\r\n                const appointment = appointments.find(appo => appo.id === changedId);\r\n\r\n                let newStartDate = moment(startDate);\r\n                let newEndDate = moment(endDate);\r\n\r\n                if (newEndDate.diff(newStartDate, 'hours') === 24) {\r\n                    newStartDate.set('hour', this.props.workStart);\r\n                    newEndDate = newStartDate.clone().set('hour', this.props.workStart + appointment.hours);\r\n                }\r\n\r\n                appointment.startDate = newStartDate;\r\n                appointment.endDate = newEndDate;\r\n\r\n                this.props.updateAppointment(appointment);\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"home-wrapper\">\r\n                <Header></Header>\r\n                <Paper>\r\n                    <Scheduler\r\n                        locale={\"en-UK\"}\r\n                        data={this.props.appointments}>\r\n                        <ViewState\r\n                            defaultCurrentViewName=\"Week\"\r\n                        />\r\n                        <EditingState onCommitChanges={this.onAppointmentChangeCommited.bind(this)} />\r\n\r\n                        <IntegratedEditing />\r\n                        <ConfirmationDialog />\r\n\r\n                        <DayView\r\n                            cellDuration={60}\r\n                            timeTableCellComponent={this.TableTimeCellRenderer.bind(this)}>\r\n                        </DayView>\r\n                        <WeekView\r\n                            cellDuration={60}\r\n                            timeTableCellComponent={this.TableTimeCellRenderer.bind(this)}>\r\n                        </WeekView>\r\n                        <MonthView />\r\n\r\n                        <Toolbar />\r\n                        <ViewSwitcher />\r\n                        <DateNavigator />\r\n\r\n                        <Appointments\r\n                            appointmentComponent={this.getAppointmentComponet.bind(this)}\r\n                            appointmentContentComponent={this.getCustomAppointmentContent.bind(this)}\r\n                        />\r\n\r\n                        <AppointmentTooltip\r\n                            showCloseButton\r\n                            showDeleteButton\r\n\r\n                            contentComponent={this.getTooltipContent.bind(this)}\r\n                        />\r\n\r\n                        <DragDropProvider\r\n                            allowResize={() => false}\r\n                        />\r\n\r\n                    </Scheduler>\r\n                </Paper>\r\n\r\n                {\r\n                    this.state.realocatedState\r\n                        ?\r\n                        <Modal\r\n                            visible={this.state.isRealocateModalVisible}\r\n                            onOk={() => this.onConfirmationOfRealocation()}\r\n                            onCancel={() => this.setState({ isRealocateModalVisible: false, realocatedState: null })}>\r\n                            {\r\n                                this.state.realocatedState.state === SCHEDULE_FREE_TIME\r\n                                    ?\r\n                                    <p>\r\n                                        The appointment submitted can't be concluded during your work period,\r\n                                        do you want to allocate your free time for this appointment?\r\n                            </p>\r\n                                    :\r\n                                    <p>\r\n                                        The appointment submitted can't be concluded during your work or free time,\r\n                                        should the scheduler ignore your sleep period and allocate time in it?\r\n                            </p>\r\n                            }\r\n\r\n                        </Modal>\r\n                        :\r\n                        null\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        updateAppointment: (payload) => dispatch(updateAppointment(payload)),\r\n        deleteAppointment: (payload) => dispatch(deleteAppointment(payload)),\r\n        updateJob: (payload) => dispatch(updateJob(payload)),\r\n        deleteJob: (payload) => dispatch(deleteJob(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeComponent);","import logo from './logo.svg';\r\nimport './App.css';\r\nimport HomeComponent from './pages/Home/Home.component';\r\n\r\nfunction App() {\r\n  return (\r\n    <HomeComponent></HomeComponent>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export function updateAppointmentOnList(appointmentList = [], toUpdateAppointment) {\r\n    const indexOnList = appointmentList.findIndex(appointment => appointment.id === toUpdateAppointment.id);\r\n\r\n    if (indexOnList === -1) {\r\n        console.error(\"The update operation on appointments failed, no appointment with id \" + toUpdateAppointment.id + \" found\");\r\n        return appointmentList;\r\n    }\r\n\r\n    const updatedList = [...appointmentList];\r\n    updatedList[indexOnList] = toUpdateAppointment;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function updateJobOnList(jobList = [], toUpdateJob) {\r\n    const indexOnList = jobList.findIndex(job => job.id === toUpdateJob.id);\r\n\r\n    if (indexOnList === -1) {\r\n        console.error(\"The update operation on jobs failed, no job with id \" + toUpdateJob.id + \" found\");\r\n        return jobList;\r\n    }\r\n\r\n    const updatedList = [...jobList];\r\n    updatedList[indexOnList] = toUpdateJob;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function deleteAppointment(appointmentList = [], toDeleteIDs = []) {\r\n    const indexesOnList = toDeleteIDs.map(id => appointmentList.findIndex(appointment => appointment.id === id));\r\n\r\n    const updatedList = [...appointmentList];\r\n    indexesOnList.forEach(index => updatedList.splice(index, 1))\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function deleteJobAndAssociatedAppointments(toDeletejob, jobList = [], appointmentList = []) {\r\n    const indexOnList = jobList.findIndex(job => job.id === toDeletejob.id);\r\n\r\n    const updatedJobList = [...jobList];\r\n    updatedJobList.splice(indexOnList, 1);\r\n\r\n    const updatedAppointmentList = [...appointmentList];\r\n    toDeletejob.appointments.forEach(appointmentOfJobID => {\r\n        const indexOnAppointmentList = updatedAppointmentList.findIndex(appointment => appointment.id === appointmentOfJobID);\r\n        updatedAppointmentList.splice(indexOnAppointmentList, 1);\r\n    });\r\n\r\n    return { jobs: updatedJobList, appointments: updatedAppointmentList }\r\n}","import * as types from './appointment.types';\r\nimport { deleteAppointment, deleteJobAndAssociatedAppointments, updateAppointmentOnList, updateJobOnList } from './appointment.utils';\r\n\r\nconst INITIAL_STATE = {\r\n    appointments: [],\r\n    jobs: [],\r\n    history: []\r\n};\r\n\r\nconst appointmentReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_APPOINTMENTS:\r\n            return {\r\n                ...state,\r\n                appointments: [...state.appointments, ...action.payload]\r\n            };\r\n        case types.UPDATED_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: updateAppointmentOnList(state.appointments, action.payload)\r\n            }\r\n        case types.DELETE_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: deleteAppointment(state.appointments, action.payload)\r\n            }\r\n        case types.ADD_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: [...state.jobs, action.payload]\r\n            }\r\n        case types.UPDATE_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: updateJobOnList(state.jobs, action.payload)\r\n            }\r\n        case types.DELETE_JOB:\r\n            const { jobs, appointments } = deleteJobAndAssociatedAppointments(action.payload, state.jobs, state.appointments)\r\n            return {\r\n                ...state,\r\n                jobs,\r\n                appointments\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appointmentReducer;","import moment from 'moment';\r\n\r\nconst replacer = (_, value) => value instanceof moment ? value.toISOString() : value\r\n\r\nconst reviver = (_, value) =>\r\n    (typeof value === 'string' && value.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/))\r\n        ? moment(value)\r\n        : value\r\n\r\nexport const encode = toDeshydrate => JSON.stringify(toDeshydrate, replacer)\r\n\r\nexport const decode = toRehydrate => JSON.parse(toRehydrate, reviver)","import * as types from './period.types';\r\n\r\nconst INITIAL_STATE = {\r\n    workStart: null,\r\n    workEnd: null,\r\n    freeStart: null,\r\n    freeEnd: null\r\n};\r\n\r\nconst periodReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SET_WORK_PERIOD:\r\n            return {\r\n                ...state,\r\n                workStart: action.payload.start,\r\n                workEnd: action.payload.end\r\n            };\r\n        case types.SET_FREE_PERIOD:\r\n            return {\r\n                ...state,\r\n                freeStart: action.payload.start,\r\n                freeEnd: action.payload.end\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default periodReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport appointmentReducer from './appointment/appointment.reducer';\r\nimport createTransform from 'redux-persist/es/createTransform';\r\nimport { decode, encode } from '../utils/persistor';\r\n\r\nimport periodReducer from './period/period.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    transforms: [createTransform(encode, decode)]\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    period: periodReducer,\r\n    appointment: appointmentReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import { createStore } from 'redux';\r\n\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root_reducer';\r\nimport logger from 'redux-logger'\r\nimport { applyMiddleware } from '@reduxjs/toolkit';\r\n\r\nconst middlewares = []\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    //Set Development only middlewares\r\n    middlewares.push(logger)\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"antd/dist/antd.css\";\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { store, persistor } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}