{"version":3,"sources":["logo.svg","redux/appointment/appointment.types.js","redux/appointment/appointment.actions.js","utils/constants.js","utils/periods.js","components/AppointmentForm/AppointmentForm.component.js","redux/period/period.types.js","utils/PeriodType.js","components/PeriodSetter/PeriodSetter.component.js","redux/period/period.actions.js","components/Header/Header.component.js","redux/global-configuration/configuration.types.js","pages/Home/Home.component.js","redux/global-configuration/configuration.actions.js","App.js","reportWebVitals.js","utils/persistor.js","redux/appointment/appointment.utils.js","redux/appointment/appointment.reducer.js","redux/period/period.reducer.js","redux/global-configuration/configuration.reducer.js","redux/root_reducer.js","redux/store.js","index.js"],"names":["ADD_APPOINTMENTS","UPDATED_APPOINTMENT","DELETE_APPOINTMENT","ADD_JOB","UPDATE_JOB","DELETE_JOB","addAppointment","appointment","type","types","payload","updateJob","job","APPOINTMENT_STATE_FIXED","APPOINTMENT_STATE_TO_DO","APPOINTMENT_STATE_COMPLETED","APPOINTMENT_STATE_CURRENT","APPOINTMENT_STATE_LATE","APPOINTMENT_STATE_DELAY","SCHEDULE_WORK_ONLY","SCHEDULE_FREE_TIME","SCHEDULE_FULL","JOB_NOT_STARTED","verifyAppointmentDisponibility","totalHoursNeeded","dueDate","currentAppointments","workStart","workEnd","freeStart","freeEnd","startDate","continuosPeriodPriorization","vacatedWorkPeriods","pickBestContinuosPeriods","getAllVacatedSpacesInPeriodUntilDueDate","currentDistributedHours","getTotalHoursOfPeriods","length","state","periods","currentlyRemainingHours","vacatedFreePeriods","distributedHoursInFreePeriod","mergedPeriods","mergeContinousAppointmentsInDifferentPeriods","console","error","periodStart","periodEnd","appointments","hoursNeeded","getAllPeriods","maxPeriodHours","allContinuousPeriods","currentTimestamp","clone","moment","add","startOf","set","currentPeriondEnd","currentPeriodStart","currentContinuousPeriod","start","end","hours","isSameOrBefore","push","Object","assign","find","isBetween","endDate","undefined","isSameOrAfter","get","mergedAppointment","indexesToIgnore","forEach","index","includes","appointmentToMergeIndex","findIndex","appointmentToCompare","isSame","diff","neededHours","sort","a","b","isBefore","remainingHours","currentPeriods","i","currentPeriod","hourDifference","subtract","reduce","sum","period","createPeriodObject","jobId","isRecurrent","id","uuidv4","RangePicker","TimePicker","layout","labelCol","span","wrapperCol","AppointmentForm","props","formRef","React","createRef","isModalVisible","isFutherActionModalVisible","isRecurrentEvent","appointmentPreview","appointmentPeriods","appointmentSuccessful","showTimeToDueDateInputField","showSpecificDateInput","this","setState","values","newJobId","format","recurrentEvent","onCreateRecurrentAppointment","onCreateJob","resetFormState","current","resetFields","description","name","recurrentEndDate","recurrentPeriod","recurrentTimeFrame","weekDay","recurrentEventTime","startHour","endHour","appointmentsToCreate","createAppointmentsOfRecurrentJob","newJob","map","addJob","addAppointments","price","timeFrame","totalHours","finalDate","weekDays","iteratedDay","createdAppointments","isoWeekday","lastChange","inputData","value","continuousPeriod","targetDate","configureTargetDate","verifiedDisponibility","shouldDelay","getFieldsValue","extraAppointments","Math","min","max","finalAppointments","onFormSubmit","_","Promise","reject","resolve","enabledForm","allowFormToBeSubmitted","Fragment","onClick","title","visible","okText","onCancel","bind","onOk","validateFields","then","catch","info","log","okButtonProps","disabled","ref","initialValues","onFinish","onFieldsChange","previewPeriods","Item","label","rules","required","message","valuePropName","onChange","event","target","checked","TextArea","Group","options","compact","noStyle","style","width","showTime","placeholder","Option","className","formatter","replace","parser","precision","validator","validateDueDate","HourglassOutlined","right","footer","onFutherActionSet","icon","FieldTimeOutlined","CoffeeOutlined","Component","connect","jobs","dispatch","SET_WORK_PERIOD","SET_FREE_PERIOD","WORK_PERIOD","FREE_PERIOD","PeriodSetter","periodType","PeriodType","setWorkPeriod","periodRange","setFreePeriod","getPeriodLabel","remember","ownProps","Header","SET_SHOW_SLEEP_PERIOD_CONFIG","HomeComponent","partitionForm","currentDay","toDate","currentViewName","appointmentUpdateInterval","isPartitionModalVisible","partitionAppointmentData","partitionHourValue","isRealocateModalVisible","realocatedState","isAppointmentTooltipVisible","appointmentTooltipMetadata","data","isMergeModalVisible","mergeState","isRecurrentChangeModalVisible","recurrentChangeState","toggleVisibility","onAppointmentMetaChange","onUpdateAppointmentsState","clearTimeout","currentState","checkStateOfAppointment","updateAppointment","timeUntilNextHour","setTimeout","findJobOfAppointment","isAfter","input","isHoursBetween","TimeTableCell","checkStart","checkEnd","periodStartDate","periodEndDate","formatDate","AppointmentContent","height","toFixed","hour","minute","padding","appointmentData","SplitCellsOutlined","Grid","container","alignItems","item","xs","display","justifyContent","Lens","color","marginTop","ExclamationCircleOutlined","fontSize","AccessTime","onCompleteTheAppointment","CheckCircleOutlined","size","onDelayTheAppointment","onFinishTheAppointment","DoubleRightOutlined","updatedListOfAppointments","indexOnList","toCompare","associatedJob","shouldDeleteJob","deleteJob","onUpdateJobStateOnAppointmentChange","allAppointments","jobAppointments","filter","newDistributedPeriods","onConfirmationOfRealocation","directState","newAppointments","indexOfAppointment","appoID","splice","app","deleteAppointment","children","Appointment","targetElement","parentElement","position","deleted","appo","previousStart","previosEnd","change","previewedDeletionAppointments","changed","keys","changedId","newStartDate","newEndDate","collidedAppointmentOfSameJob","collidedAppointment","updatedAppointment","newStart","newEnd","modifiedAppointments","slice","newAppo","newAppointment","merge","parseInt","e","FlexibleSpace","showSleepPeriod","setShowSleepPeriod","Switcher","viewName","Root","isForward","onNaviagateDate","RightOutlined","LeftOutlined","DoubleLeftOutlined","direction","fastForward","specification","findAllAppointmentsOfJobInWeekDay","jobAppo","allJobAppointments","restProps","classes","Paper","locale","currentDate","onCurrentDateChange","date","onCommitChanges","onAppointmentChangeCommited","displayName","cellDuration","intervalCount","startDayHour","calendarViewHourStart","endDayHour","calendarViewHourEnd","timeTableCellComponent","TableTimeCellRenderer","flexibleSpaceComponent","getToolbarFreeSpaceComponent","switcherComponent","getViewSwitcherComponent","rootComponent","getNavigatorRootComponent","navigationButtonComponent","getDateNavigatorComponent","appointmentComponent","getAppointmentComponet","appointmentContentComponent","getCustomAppointmentContent","showCloseButton","showDeleteButton","headerComponent","getHeaderComponent","appointmentMeta","onVisibilityChange","contentComponent","getTooltipContent","allowResize","onAppointmentMerge","onRecurrentAppointmentChange","onAppointmentPartitionSet","validateHourInserted","prefix","suffix","config","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","replacer","toISOString","reviver","match","updateAppointmentOnList","appointmentList","toUpdateAppointment","updatedList","updateJobOnList","jobList","toUpdateJob","toDeleteIDs","deleteJobAndAssociatedAppointments","toDeletejob","updatedJobList","updatedAppointmentList","appointmentOfJobID","indexOnAppointmentList","INITIAL_STATE","history","appointmentReducer","action","periodReducer","configTypes","configurationReducer","persistConfig","key","storage","transforms","createTransform","toDeshydrate","JSON","stringify","toRehydrate","parse","rootReducer","combineReducers","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c2369fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const ADD_APPOINTMENTS = 'ADD_APPOINTMENTS';\r\nexport const UPDATED_APPOINTMENT= 'UPDATED_APPOINTMENT';\r\nexport const DELETE_APPOINTMENT = 'DELETE_APPOINTMENT';\r\n\r\nexport const ADD_JOB = 'ADD_JOB';\r\nexport const UPDATE_JOB = 'UPDATE_JOB';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\n\r\nexport const ADD_TO_HISTORY = 'ADD_TO_HISTORY';","import * as types from './appointment.types';\r\n\r\nexport const addAppointment = appointment => ({\r\n    type: types.ADD_APPOINTMENTS,\r\n    payload: appointment\r\n});\r\n\r\nexport const updateAppointment = appointment => ({\r\n    type: types.UPDATED_APPOINTMENT,\r\n    payload: appointment\r\n})\r\n\r\nexport const deleteAppointment = ids => ({\r\n    type: types.DELETE_APPOINTMENT,\r\n    payload: ids\r\n})\r\n\r\nexport const addJob = job => ({\r\n    type: types.ADD_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const updateJob = job => ({\r\n    type: types.UPDATE_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const deleteJob = job => ({\r\n    type: types.DELETE_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const addToHistory = job => ({\r\n    type: types.ADD_TO_HISTORY,\r\n    payload: job\r\n})\r\n","export const SCHEDULER_DATE_FORMAT = 'YYYY-MM-DDTHH:mm'\r\n\r\nexport const APPOINTMENT_STATE_FIXED = 'APPOINTMENT_STATE_FIXED'\r\nexport const APPOINTMENT_STATE_TO_DO = 'APPOINTMENT_STATE_TO_DO'\r\nexport const APPOINTMENT_STATE_COMPLETED = 'APPOINTMENT_STATE_COMPLETED'\r\nexport const APPOINTMENT_STATE_CURRENT = 'APPOINTMENT_STATE_CURRENT'\r\nexport const APPOINTMENT_STATE_LATE = 'APPOINTMENT_STATE_LATE'\r\nexport const APPOINTMENT_STATE_DELAY = 'APPOINTMENT_STATE_DELAY'\r\n\r\nexport const SCHEDULE_WORK_ONLY = 'SCHEDULE_WORK_ONLY';\r\nexport const SCHEDULE_FREE_TIME = 'SCHEDULE_FREE_TIME';\r\nexport const SCHEDULE_FULL = 'SCHEDULE_FULL';\r\n\r\nexport const JOB_IS_RECURRENT_EVENT = 'JOB_IS_RECURRENT_EVENT';\r\nexport const JOB_NOT_STARTED = 'JOB_NOT_STARTED';\r\nexport const JOB_ON_GOING = 'JOB_ON_GOING';\r\nexport const JOB_COMPLETED = 'JOB_COMPLETED';","import { APPOINTMENT_STATE_FIXED, APPOINTMENT_STATE_TO_DO, SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from \"./constants\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport moment from 'moment';\r\n\r\nexport function verifyAppointmentDisponibility(totalHoursNeeded, dueDate, currentAppointments, [workStart, workEnd], [freeStart, freeEnd], startDate = null, continuosPeriodPriorization = false) {\r\n    if (!workStart || !workEnd) {\r\n        console.error(\"There was no work period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    const vacatedWorkPeriods = pickBestContinuosPeriods(getAllVacatedSpacesInPeriodUntilDueDate(\r\n        workStart,\r\n        workEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        totalHoursNeeded,\r\n        startDate,\r\n        continuosPeriodPriorization\r\n    ), totalHoursNeeded)\r\n\r\n    const currentDistributedHours = getTotalHoursOfPeriods(vacatedWorkPeriods)\r\n\r\n    //If we already allocated all the nescessary time in the work period, finish the function, otherwise allocate to free time\r\n    if (vacatedWorkPeriods.length != 0 && currentDistributedHours >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_WORK_ONLY,\r\n            periods: vacatedWorkPeriods\r\n        }\r\n    }\r\n\r\n    if (!freeStart || !freeEnd) {\r\n        console.error(\"It was nescessary to use free time, but there was no free period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    const currentlyRemainingHours = totalHoursNeeded - currentDistributedHours;\r\n\r\n    // console.log(currentlyRemainingHours);\r\n\r\n    const vacatedFreePeriods = pickBestContinuosPeriods(getAllVacatedSpacesInPeriodUntilDueDate(\r\n        freeStart,\r\n        freeEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        currentlyRemainingHours,\r\n        startDate,\r\n        continuosPeriodPriorization\r\n    ), currentlyRemainingHours)\r\n\r\n    // console.log(vacatedFreePeriods);\r\n\r\n    const distributedHoursInFreePeriod = getTotalHoursOfPeriods(vacatedFreePeriods);\r\n    const mergedPeriods = mergeContinousAppointmentsInDifferentPeriods([...vacatedWorkPeriods, ...vacatedFreePeriods])\r\n\r\n    if (vacatedFreePeriods.length != 0 && currentDistributedHours + distributedHoursInFreePeriod >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_FREE_TIME,\r\n            periods: mergedPeriods\r\n        }\r\n    }\r\n\r\n    return {\r\n        state: SCHEDULE_FULL,\r\n        periods: mergedPeriods\r\n    }\r\n}\r\n\r\nexport function getAllVacatedSpacesInPeriodUntilDueDate(periodStart, periodEnd, dueDate, appointments, hoursNeeded, startDate, getAllPeriods = false, maxPeriodHours = 0) {\r\n    const allContinuousPeriods = [];\r\n\r\n    // console.log(\"startDate\", startDate);\r\n    //Start with the period\r\n    let currentTimestamp = startDate ? startDate.clone() : moment().add(1, 'day').startOf('day').set('hour', periodStart);\r\n    //Check if the period end is on the same day as period start, or if the values of the hours wrap up to the next day\r\n    let currentPeriondEnd = periodEnd > periodStart\r\n        ? currentTimestamp.clone().set('hour', periodEnd)\r\n        : currentTimestamp.clone().add(1, 'day').set('hour', periodEnd);\r\n    //The period start is always in the same day, so the above conditional value is not necessary \r\n    let currentPeriodStart = currentTimestamp.clone().set('hour', periodStart)\r\n    // let currentPeriodStart = periodEnd > periodStart\r\n    //     ? currentTimestamp.clone().startOf('day').set('hour', periodStart)\r\n    //     : currentTimestamp.clone().subtract(1, 'day').startOf('day').set('hour', periodStart)\r\n\r\n    let currentContinuousPeriod = {\r\n        start: null,\r\n        end: null,\r\n        hours: 0\r\n    }\r\n\r\n    // console.log(\"periodStar\", currentPeriodStart);\r\n    // console.log(\"periodEnd\", currentPeriondEnd)\r\n\r\n    // console.log('currentTimestamp', currentTimestamp);\r\n    // console.log('dueDate', dueDate.format(\"DD/MM/YYYY HH:mm\"));\r\n\r\n    while (currentTimestamp.isSameOrBefore(dueDate)) {\r\n        // console.log(currentTimestamp.format(\"DD/MM HH:mm\"))\r\n        // console.log('currentContinuousPeriod', Object.assign({}, currentContinuousPeriod))\r\n        /*  Check if the periods already obtained already are enough for the appointment, so theres no \r\n            to continue the while loop*/\r\n        if (maxPeriodHours !== 0 && currentContinuousPeriod.start && currentContinuousPeriod.hours + 1 >= maxPeriodHours) {\r\n\r\n            currentContinuousPeriod.end = currentTimestamp.clone();\r\n            currentContinuousPeriod.hours++;\r\n\r\n            allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n            currentContinuousPeriod = {\r\n                start: null,\r\n                end: null,\r\n                hours: 0\r\n            }\r\n        }\r\n\r\n        if (!getAllPeriods && hoursNeeded != 0) {\r\n            if (currentContinuousPeriod.start) {\r\n                if (getTotalHoursOfPeriods([...allContinuousPeriods, { hours: 1 + currentContinuousPeriod.hours }]) >= hoursNeeded) {\r\n\r\n                    // console.log(\"SKipping due to reached hours\");\r\n                    currentContinuousPeriod.end = currentTimestamp.clone();\r\n                    currentContinuousPeriod.hours++;\r\n\r\n                    //Add the finished continuous period to the array.\r\n                    allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                    currentContinuousPeriod = {\r\n                        start: null,\r\n                        end: null,\r\n                        hours: 0\r\n                    }\r\n                    break;\r\n                }\r\n            } else if (getTotalHoursOfPeriods(allContinuousPeriods) >= hoursNeeded) {\r\n                // console.log(\"SKipping due to total reached hours\");\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Try to find an appointment that contains the current iterated hour.\r\n        const appointment = appointments.find(appointment => {\r\n            //Check if the current timestamp is between this appointment period\r\n            if (currentTimestamp.isBetween(appointment.startDate, appointment.endDate, undefined, \"[)\")) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        })\r\n\r\n        //If there's already an appointment in the current timestamp iterated, skip to the end of the appointment\r\n        if (appointment) {\r\n            // console.log(\"SKipping due to conflicting appointment\");\r\n            //If there's an current period that has been stopped thanks to this appointment, save in the array.\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            if (appointment.endDate.isSameOrAfter(currentPeriondEnd)) {\r\n                currentPeriondEnd = currentPeriondEnd.add(1, 'day');\r\n                currentPeriodStart = currentPeriodStart.add(1, 'day');\r\n                currentTimestamp = currentPeriodStart.clone();\r\n            } else {\r\n                currentTimestamp = currentTimestamp.set('hour', appointment.endDate.get('hour'));\r\n            }\r\n            continue;\r\n        }\r\n\r\n        //If the current timestamp is beyond or just reached the dueDate\r\n        // console.log('dueDate', dueDate.format('DD/MM HH:mm'))\r\n        // console.log('currentTimestamp', currentTimestamp.format('DD/MM HH:mm'))\r\n        if (currentTimestamp.isSameOrAfter(dueDate)) {\r\n            // console.log(\"SKipping by due date reached\");\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        //If the current hour is the final hour of the period, end the continuous period\r\n        if (currentTimestamp.isSameOrAfter(currentPeriondEnd)) {\r\n            // console.log(\"SKipping by period end\");\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            currentPeriondEnd = currentPeriondEnd.add(1, 'day');\r\n            currentPeriodStart = currentPeriodStart.add(1, 'day');\r\n            currentTimestamp = currentPeriodStart.clone();\r\n            continue;\r\n        }\r\n\r\n\r\n        //If there's no appointment, this is a free hour to add to the current continuous period\r\n        if (currentContinuousPeriod.start) {\r\n            currentContinuousPeriod.end = currentTimestamp.clone();\r\n            currentContinuousPeriod.hours++;\r\n        } else {\r\n            currentContinuousPeriod.start = currentTimestamp.clone();\r\n        }\r\n\r\n        currentTimestamp = currentTimestamp.add(1, 'hour');\r\n        // console.log(\"Reached the end of loop\")\r\n    }\r\n\r\n    return allContinuousPeriods;\r\n}\r\n\r\nexport function mergeContinousAppointmentsInDifferentPeriods(appointments) {\r\n    const mergedAppointment = [];\r\n    const indexesToIgnore = [];\r\n\r\n    appointments.forEach((appointment, index) => {\r\n        if (indexesToIgnore.includes(index)) {\r\n            return;\r\n        }\r\n\r\n        const appointmentToMergeIndex = appointments.findIndex(appointmentToCompare => appointment.end.isSame(appointmentToCompare.start));\r\n        if (appointmentToMergeIndex !== -1) {\r\n            indexesToIgnore.push(appointmentToMergeIndex);\r\n\r\n            appointment.end = appointments[appointmentToMergeIndex].end;\r\n            appointment.hours = appointment.end.diff(appointment.start, 'hours');\r\n        }\r\n\r\n        mergedAppointment.push(appointment);\r\n    })\r\n\r\n    return mergedAppointment;\r\n}\r\n\r\nexport function pickBestContinuosPeriods(periods, neededHours) {\r\n    //If the periods are not, or just barely, enough to contain the event, just return the array as it is\r\n    if (getTotalHoursOfPeriods(periods) <= neededHours) {\r\n        return periods;\r\n    }\r\n\r\n    //Sort the periods by hours and then by earliest\r\n    periods.sort((a, b) =>\r\n        (a.hours > b.hours || a.hours === neededHours)\r\n            ? -1\r\n            : (b.hours > a.hours)\r\n                ? 1\r\n                : a.start.isBefore(b.start)\r\n                    ? -1\r\n                    : b.start.isBefore(a.start)\r\n                        ? 1\r\n                        : 0\r\n    );\r\n\r\n    let remainingHours = neededHours;\r\n    const currentPeriods = []\r\n\r\n    for (let i = 0; i < periods.length; i++) {\r\n        const currentPeriod = periods[i];\r\n        if (currentPeriod.hours === remainingHours) {\r\n            currentPeriods.push(currentPeriod);\r\n            break;\r\n        }\r\n        else if (currentPeriod.hours > remainingHours) {\r\n            //Remove from the period the extra hours and put it in the array of periods.\r\n            const hourDifference = currentPeriod.hours - remainingHours;\r\n\r\n            currentPeriod.hours = currentPeriod.hours - hourDifference;\r\n            currentPeriod.end = currentPeriod.end.subtract(hourDifference, 'hours');\r\n            currentPeriods.push(currentPeriod);\r\n\r\n            break;\r\n        } else {\r\n            currentPeriods.push(currentPeriod);\r\n            remainingHours -= currentPeriod.hours;\r\n        }\r\n    }\r\n\r\n    return currentPeriods;\r\n}\r\n\r\nexport function getTotalHoursOfPeriods(periods) {\r\n    return periods.reduce((sum, period) => ({ hours: sum.hours + period.hours }), { hours: 0 }).hours;\r\n}\r\n\r\nexport function createPeriodObject({ start, end, hours }, jobId, isRecurrent = false) {\r\n    return {\r\n        startDate: start,\r\n        endDate: end,\r\n        state: isRecurrent ? APPOINTMENT_STATE_FIXED : APPOINTMENT_STATE_TO_DO,\r\n        hours: hours,\r\n        id: 'job_' + jobId + '_app_' + uuidv4(),\r\n        jobId: jobId\r\n    }\r\n}\r\n","import { Input, Form, Modal, InputNumber, DatePicker, Button, Checkbox, Tooltip, Select, TimePicker } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addAppointment, addJob } from '../../redux/appointment/appointment.actions';\r\nimport moment from 'moment';\r\n\r\nimport './AppointmentForm.styles.scss';\r\nimport { JOB_IS_RECURRENT_EVENT, JOB_NOT_STARTED, SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from '../../utils/constants';\r\nimport { CoffeeOutlined, FieldTimeOutlined, HourglassOutlined } from '@ant-design/icons';\r\nimport { createPeriodObject, getAllVacatedSpacesInPeriodUntilDueDate, getTotalHoursOfPeriods, mergeContinousAppointmentsInDifferentPeriods, verifyAppointmentDisponibility } from '../../utils/periods';\r\n\r\nconst { RangePicker } = TimePicker;\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nclass AppointmentForm extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            isRecurrentEvent: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false,\r\n            showTimeToDueDateInputField: false,\r\n            showSpecificDateInput: false,\r\n        }\r\n    }\r\n\r\n    resetFormState() {\r\n        this.setState({\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            isRecurrentEvent: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false,\r\n            showTimeToDueDateInputField: false,\r\n            showSpecificDateInput: false,\r\n        })\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        const newJobId = moment().format('x');\r\n\r\n        if (values.recurrentEvent) {\r\n            this.onCreateRecurrentAppointment(newJobId, values);\r\n        } else {\r\n            this.onCreateJob(newJobId, values);\r\n        }\r\n\r\n        this.resetFormState();\r\n        this.formRef.current.resetFields();\r\n    }\r\n\r\n    onCreateRecurrentAppointment(newJobId, { description, name, recurrentEndDate, recurrentPeriod, recurrentTimeFrame, weekDay, recurrentEventTime }) {\r\n        const startHour = recurrentEventTime[0].get('hour');\r\n        const endHour = recurrentEventTime[1].get('hour');\r\n        const endDate = recurrentTimeFrame === 'date'\r\n            ? recurrentEndDate\r\n            : moment().startOf('day').add(recurrentPeriod, recurrentTimeFrame).set('hour', endHour)\r\n        const appointmentsToCreate = this.createAppointmentsOfRecurrentJob(startHour, endHour, endDate, weekDay, newJobId)\r\n\r\n        const newJob = {\r\n            id: newJobId,\r\n            name: name,\r\n            appointments: appointmentsToCreate.map(appointment => appointment.id),\r\n            description: description,\r\n            dueDate: endDate,\r\n            state: JOB_IS_RECURRENT_EVENT,\r\n            recurrentEvent: true,\r\n            weekDay\r\n        }\r\n\r\n        this.props.addJob(newJob);\r\n        this.props.addAppointments(appointmentsToCreate);\r\n    }\r\n\r\n    onCreateJob(newJobId, values) {\r\n        const appointmentsToCreate = this.state.appointmentPeriods.map((period) => createPeriodObject(period, newJobId))\r\n\r\n        const newJob = {\r\n            id: newJobId,\r\n            name: values.name,\r\n            appointments: appointmentsToCreate.map(appointment => appointment.id),\r\n            price: values.price,\r\n            description: values.description,\r\n            dueDate: values.dueDate\r\n                ? values.dueDate.startOf('hour')\r\n                : values.period && values.timeFrame\r\n                    ? moment().add(values.period, values.timeFrame).startOf('hour')\r\n                    : null,\r\n            totalHours: values.hours,\r\n            state: JOB_NOT_STARTED,\r\n            recurrentEvent: false\r\n        }\r\n\r\n        this.props.addJob(newJob);\r\n        this.props.addAppointments(appointmentsToCreate);\r\n    }\r\n\r\n    createAppointmentsOfRecurrentJob(startHour, endHour, finalDate, weekDays, jobId) {\r\n        const iteratedDay = moment().startOf('day');\r\n        const createdAppointments = [];\r\n\r\n        while (iteratedDay.isSameOrBefore(finalDate)) {\r\n            if (weekDays.includes(iteratedDay.isoWeekday())) {\r\n                createdAppointments.push(createPeriodObject(\r\n                    {\r\n                        start: iteratedDay.clone().set('hour', startHour),\r\n                        end: iteratedDay.clone().set('hour', endHour),\r\n                        hours: endHour - startHour\r\n                    },\r\n                    jobId,\r\n                    true\r\n                ))\r\n            }\r\n\r\n            iteratedDay.add(1, 'day');\r\n        }\r\n\r\n        return createdAppointments;\r\n    }\r\n\r\n    previewPeriods([lastChange], values) {\r\n        const recurrentEvent = values.find(inputData => inputData.name.includes('recurrentEvent'));\r\n        //No need to set the appointments preview to an recurrent event\r\n        if (recurrentEvent.value) {\r\n            return;\r\n        }\r\n\r\n        const hours = values.find(inputData => inputData.name.includes('hours'));\r\n        const continuousPeriod = values.find(inputData => inputData.name.includes('continuousPeriod'));\r\n        const dueDate = values.find(inputData => inputData.name.includes('dueDate'));\r\n        const timeFrame = values.find(inputData => inputData.name.includes('timeFrame'));\r\n        const period = values.find(inputData => inputData.name.includes('period'));\r\n\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (lastChange.name.includes('hours') || lastChange.name.includes('dueDate') || lastChange.name.includes('timeFrame') || lastChange.name.includes('period')) {\r\n\r\n            const targetDate = this.configureTargetDate(dueDate, timeFrame, period);\r\n\r\n            if (hours.value && targetDate) {\r\n                const verifiedDisponibility = verifyAppointmentDisponibility(hours.value, targetDate, appointments, [workStart, workEnd], [freeStart, freeEnd], null, continuousPeriod.value);\r\n\r\n                if (!verifiedDisponibility) {\r\n                    console.error(\"Error on saving the periods\")\r\n                    return;\r\n                }\r\n\r\n                switch (verifiedDisponibility.state) {\r\n                    case SCHEDULE_WORK_ONLY:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job can be sucessfully distributed in the work period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FREE_TIME:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job will invade some of your free time period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FULL:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job could not be distributed into your work/free time, further action will be required on submit',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: false\r\n                        })\r\n                        break;\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    appointmentPreview: '',\r\n                    appointmentPeriods: []\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    configureTargetDate(dueDate, period, timeFrame) {\r\n        return dueDate && dueDate.value\r\n            ? dueDate.value.startOf('hour')\r\n            : period && period.value && timeFrame && timeFrame.value\r\n                ? moment().add(period.value, timeFrame.value).startOf('hour')\r\n                : null;\r\n    }\r\n\r\n    onFutherActionSet(shouldDelay) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        const { dueDate, hours, continuousPeriod } = this.formRef.current.getFieldsValue();\r\n\r\n        const extraAppointments = getAllVacatedSpacesInPeriodUntilDueDate(\r\n            shouldDelay ? Math.min(workStart, freeStart) : Math.max(workEnd, freeEnd),\r\n            shouldDelay ? Math.max(workEnd, freeEnd) : Math.min(workStart, freeStart),\r\n            shouldDelay ? dueDate.set('year', 9999).startOf('hour') : dueDate.startOf('hour'),\r\n            [...appointments, ...this.state.appointmentPeriods],\r\n            hours - getTotalHoursOfPeriods(this.state.appointmentPeriods),\r\n            shouldDelay ? dueDate.startOf('hour') : moment().startOf('day').set('hour', Math.max(workEnd, freeEnd)),\r\n            continuousPeriod\r\n        )\r\n\r\n        const finalAppointments = mergeContinousAppointmentsInDifferentPeriods([...extraAppointments, ...this.state.appointmentPeriods]);\r\n\r\n        this.setState({\r\n            appointmentPeriods: finalAppointments,\r\n            appointmentSuccessful: true,\r\n            appointmentPreview: '',\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false\r\n        }, () => this.onFormSubmit(this.formRef.current.getFieldsValue()))\r\n    }\r\n\r\n    allowFormToBeSubmitted() {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (workStart && workEnd && freeStart && freeEnd) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    validateDueDate(_, dueDate) {\r\n        if (moment().isSameOrAfter(dueDate)) {\r\n            return Promise.reject('The due date needs to be after now!')\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    render() {\r\n        const enabledForm = this.allowFormToBeSubmitted();\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Button type=\"primary\" onClick={() => this.setState({ isModalVisible: true })}>Add Event</Button>\r\n\r\n                <Modal title=\"Add Event\"\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={this.resetFormState.bind(this)}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                if (this.state.appointmentSuccessful || this.state.isRecurrentEvent) {\r\n                                    this.onFormSubmit(values);\r\n                                } else {\r\n                                    this.setState({ isFutherActionModalVisible: true })\r\n                                }\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                    okButtonProps={{ disabled: !enabledForm }}\r\n                >\r\n\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"eventForm\"\r\n                        initialValues={{ continuousPeriod: true }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                        onFieldsChange={this.previewPeriods.bind(this)}\r\n\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            rules={[{ required: true, message: 'The event name is required' }]}\r\n                        >\r\n                            <Input disabled={!enabledForm} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Recurrent Event\"\r\n                            name=\"recurrentEvent\"\r\n                            valuePropName='checked'\r\n                        >\r\n                            <Checkbox disabled={!enabledForm} onChange={(event) => this.setState({ isRecurrentEvent: event.target.checked })}></Checkbox>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Description\"\r\n                            name=\"description\"\r\n                        >\r\n                            <Input.TextArea disabled={!enabledForm} />\r\n                        </Form.Item>\r\n\r\n                        {\r\n                            this.state.isRecurrentEvent\r\n                                ?\r\n                                <React.Fragment>\r\n                                    <Form.Item\r\n                                        label=\"Time\"\r\n                                        name=\"recurrentEventTime\"\r\n                                        rules={[{ required: true, message: 'The recurrent event time range is required!' }]}\r\n                                    >\r\n                                        <RangePicker format={\"HH:00\"} />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        label=\"Week Days\"\r\n                                        name=\"weekDay\"\r\n                                        rules={[{ required: true, message: 'At least one day must be selected for the event to happen!' }]}>\r\n                                        <Checkbox.Group\r\n                                            options={[\r\n                                                { label: 'Monday', value: 1 },\r\n                                                { label: 'Tuesday', value: 2 },\r\n                                                { label: 'Wednesday', value: 3 },\r\n                                                { label: 'Thursday', value: 4 },\r\n                                                { label: 'Friday', value: 5 },\r\n                                                { label: 'Saturday', value: 6 },\r\n                                                { label: 'Sunday', value: 7 }\r\n                                            ]}\r\n                                        />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        label=\"Recurrency Duration\">\r\n                                        <Input.Group compact>\r\n                                            {\r\n                                                this.state.showSpecificDateInput\r\n                                                    ?\r\n                                                    <Form.Item\r\n                                                        name={'recurrentEndDate'}\r\n                                                        noStyle\r\n                                                        rules={[{ required: true, message: 'The period value is required' }]}\r\n                                                    >\r\n                                                        <DatePicker disabled={!enabledForm} style={{ width: '50%' }} format={'DD/MM/YYYY HH:00'} showTime />\r\n                                                    </Form.Item>\r\n                                                    :\r\n                                                    <Form.Item\r\n                                                        name={'recurrentPeriod'}\r\n                                                        noStyle\r\n                                                        rules={[{ required: true, message: 'The period value is required' }]}\r\n                                                    >\r\n                                                        <InputNumber disabled={!enabledForm} style={{ width: '50%' }} placeholder=\"Period value\" />\r\n                                                    </Form.Item>\r\n                                            }\r\n                                            <Form.Item\r\n                                                name={'recurrentTimeFrame'}\r\n                                                noStyle\r\n                                                rules={[{ required: true, message: 'Please select the time frame to be used' }]}\r\n                                            >\r\n                                                <Select\r\n                                                    style={{ width: '50%' }}\r\n                                                    disabled={!enabledForm}\r\n                                                    placeholder=\"Time frame\"\r\n                                                    onChange={(value) => this.setState({ showSpecificDateInput: value === 'date' })}>\r\n                                                    <Select.Option value=\"week\">Week(s)</Select.Option>\r\n                                                    <Select.Option value=\"month\">Month(s)</Select.Option>\r\n                                                    <Select.Option value=\"quarter\">Quarter(s)</Select.Option>\r\n                                                    <Select.Option value=\"year\">Year(s)</Select.Option>\r\n                                                    <Select.Option value=\"date\">Specifc Date</Select.Option>\r\n                                                </Select>\r\n                                            </Form.Item>\r\n                                        </Input.Group>\r\n                                    </Form.Item>\r\n\r\n                                    <span className=\"message\">\r\n                                        The recurrent events will ignore jobs appointments when setting the event, so there may be some overlaps to be fixed manually\r\n                                    </span>\r\n\r\n                                </React.Fragment>\r\n                                :\r\n                                <React.Fragment>\r\n                                    <Form.Item\r\n                                        label=\"Price\"\r\n                                        name=\"price\"\r\n                                    >\r\n                                        <InputNumber\r\n                                            formatter={price => `$ ${price}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                            parser={price => price.replace(/\\$\\s?|(,*)/g, '')}\r\n                                            min={0}\r\n                                            precision={2}\r\n                                            disabled={!enabledForm}\r\n                                        />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        label=\"Estimated Hours\"\r\n                                        name=\"hours\"\r\n                                        rules={[{ required: true, message: 'The ETA is required to allow the scheduler to distribute time' }]}\r\n                                    >\r\n                                        <InputNumber\r\n                                            disabled={!enabledForm}\r\n                                            min={0} />\r\n                                    </Form.Item>\r\n\r\n                                    <div className=\"due-date-wrapper\">\r\n                                        {\r\n                                            !this.state.showTimeToDueDateInputField\r\n                                                ?\r\n                                                <Form.Item\r\n                                                    label=\"Due Date\"\r\n                                                    name=\"dueDate\"\r\n                                                    rules={[{ required: true, message: 'The dude date is required' }, { validator: this.validateDueDate }]}\r\n                                                >\r\n                                                    <DatePicker disabled={!enabledForm} format={'DD/MM/YYYY HH:00'} showTime />\r\n                                                </Form.Item >\r\n                                                :\r\n                                                <Form.Item\r\n                                                    label=\"Time to Due Date\"\r\n                                                >\r\n                                                    <Input.Group compact>\r\n                                                        <Form.Item\r\n                                                            name={['timeFrame']}\r\n                                                            noStyle\r\n                                                            rules={[{ required: true, message: 'Please select the time frame to be used' }]}\r\n                                                        >\r\n                                                            <Select placeholder=\"Time frame\">\r\n                                                                <Select.Option value=\"hour\">Hour(s)</Select.Option>\r\n                                                                <Select.Option value=\"day\">Day(s)</Select.Option>\r\n                                                            </Select>\r\n                                                        </Form.Item>\r\n                                                        <Form.Item\r\n                                                            name={['period']}\r\n                                                            noStyle\r\n                                                            rules={[{ required: true, message: 'The period value is required' }]}\r\n                                                        >\r\n                                                            <InputNumber style={{ width: '50%' }} placeholder=\"Period hours/days\" />\r\n                                                        </Form.Item>\r\n                                                    </Input.Group>\r\n                                                </Form.Item >\r\n                                        }\r\n\r\n                                        <Tooltip title=\"Change to the 'Time to due Date' input that allows you to insert the time to the due date instead of the specific date\">\r\n                                            <HourglassOutlined\r\n                                                className=\"due-date-toogle\"\r\n                                                style={{ right: this.state.showTimeToDueDateInputField ? '20px' : '80px' }}\r\n                                                onClick={() => this.setState({ showTimeToDueDateInputField: !this.state.showTimeToDueDateInputField })} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n\r\n\r\n                                    <Form.Item\r\n                                        label=\"Continuous Priority\"\r\n                                        valuePropName='checked'\r\n                                        name=\"continuousPeriod\">\r\n                                        <Tooltip title=\"Whether the Scheduler should focus on finding continuous periods or just distribute the event in the open periods avaliable\">\r\n                                            <Checkbox disabled={!enabledForm}></Checkbox>\r\n                                        </Tooltip>\r\n                                    </Form.Item>\r\n                                </React.Fragment>\r\n                        }\r\n\r\n                        <span className=\"message\">{this.state.appointmentPreview}</span>\r\n                        {\r\n                            !enabledForm ?\r\n                                <span className=\"message\">\r\n                                    Please set the work and free period before attemping to add events to your schedule\r\n                                </span> : null\r\n                        }\r\n\r\n                    </Form>\r\n\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.isFutherActionModalVisible}\r\n                    footer={[\r\n                        <Tooltip key=\"delay\" title=\"Delay\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(true)} icon={<FieldTimeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Tooltip key=\"overwrite_sleep\" title=\"Overwrite Sleep\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(false)} icon={<CoffeeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Button key=\"back\" onClick={() => this.setState({ isFutherActionModalVisible: false })}>\r\n                            Cancel\r\n                        </Button>\r\n                    ]}>\r\n                    <p>The appointment submitted can't be concluded during your work and free period, what should the scheduler do to allow for this job to be scheduled?</p>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        addJob: (payload) => dispatch(addJob(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppointmentForm);","export const SET_WORK_PERIOD = 'SET_WORK_PERIOD';\r\nexport const SET_FREE_PERIOD = 'SET_FREE_PERIOD';","export const WORK_PERIOD = 'WORK_PERIOD';\r\nexport const FREE_PERIOD = 'FREE_PERIOD';\r\nexport const SLEEP_PERIOD = 'SLEEP_PERIOD';","import { Button, Form, Modal, TimePicker } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setFreePeriod, setWorkPeriod } from '../../redux/period/period.actions';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\nimport moment from 'moment';\r\n\r\nimport './PeriodSetter.styles.scss';\r\n\r\nconst { RangePicker } = TimePicker;\r\n\r\nclass PeriodSetter extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false\r\n        }\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        switch (this.props.periodType) {\r\n            case PeriodType.WORK_PERIOD:\r\n                this.props.setWorkPeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n            case PeriodType.FREE_PERIOD:\r\n                this.props.setFreePeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n        }\r\n\r\n        this.setState({ isModalVisible: false})\r\n    }\r\n\r\n    getPeriodLabel(periodType) {\r\n        switch (periodType) {\r\n            case PeriodType.FREE_PERIOD:\r\n                return 'Free';\r\n            case PeriodType.WORK_PERIOD:\r\n                return 'Work';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button onClick={() => this.setState({ isModalVisible: true })}>{this.getPeriodLabel(this.props.periodType)} Period</Button>\r\n\r\n                <Modal\r\n                    title={`${this.getPeriodLabel(this.props.periodType)} Period`}\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={() => this.setState({ isModalVisible: false })}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                this.onFormSubmit(values);\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                >\r\n                    <Form\r\n                        ref={this.formRef}\r\n                        name=\"periodForm\"\r\n                        initialValues={{\r\n                            periodRange: [\r\n                                moment().startOf('day').set('hours', this.props.start),\r\n                                moment().startOf('day').set('hours', this.props.end)\r\n                            ],\r\n                            remember: true\r\n                        }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"periodRange\"\r\n                            rules={[{ required: true, message: 'The range of the period is required!' }]}\r\n                        >\r\n                            <RangePicker format={\"HH:00\"} />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    switch (ownProps.periodType) {\r\n        case PeriodType.WORK_PERIOD:\r\n            return {\r\n                start: state.period.workStart,\r\n                end: state.period.workEnd\r\n            }\r\n        case PeriodType.FREE_PERIOD:\r\n            return {\r\n                start: state.period.freeStart,\r\n                end: state.period.freeEnd\r\n            }\r\n        default:\r\n            return {\r\n\r\n            }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWorkPeriod: (payload) => dispatch(setWorkPeriod(payload)),\r\n        setFreePeriod: (payload) => dispatch(setFreePeriod(payload))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PeriodSetter);","import * as types from './period.types';\r\n\r\nexport const setWorkPeriod = timeRange => ({\r\n    type: types.SET_WORK_PERIOD,\r\n    payload: timeRange\r\n});\r\n\r\nexport const setFreePeriod = timeRange => ({\r\n    type: types.SET_FREE_PERIOD,\r\n    payload: timeRange\r\n});","import React from 'react';\r\nimport AppointmentForm from '../AppointmentForm/AppointmentForm.component';\r\nimport PeriodSetter from '../PeriodSetter/PeriodSetter.component';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\n\r\nimport './Header.styles.scss';\r\n\r\nexport class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    onFormSubmit() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h2>Work Scheduler</h2>\r\n\r\n                <div className=\"button-group\">\r\n                    <PeriodSetter periodType={PeriodType.WORK_PERIOD} />\r\n                    <PeriodSetter periodType={PeriodType.FREE_PERIOD} />\r\n\r\n                    <AppointmentForm />\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}","export const SET_SHOW_SLEEP_PERIOD_CONFIG = 'SET_SHOW_SLEEP_PERIOD_CONFIG';","import React from 'react';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { EditingState, IntegratedEditing, ViewState } from '@devexpress/dx-react-scheduler';\r\nimport {\r\n    Scheduler,\r\n    DayView,\r\n    Appointments,\r\n    Toolbar,\r\n    ViewSwitcher,\r\n    MonthView,\r\n    AppointmentTooltip,\r\n    DateNavigator,\r\n    ConfirmationDialog,\r\n    DragDropProvider\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\nimport { Header } from '../../components/Header/Header.component';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { APPOINTMENT_STATE_COMPLETED, APPOINTMENT_STATE_CURRENT, APPOINTMENT_STATE_DELAY, APPOINTMENT_STATE_FIXED, APPOINTMENT_STATE_LATE, APPOINTMENT_STATE_TO_DO, JOB_COMPLETED, JOB_NOT_STARTED, JOB_ON_GOING, SCHEDULE_FREE_TIME, SCHEDULE_FULL } from '../../utils/constants';\r\nimport { FieldTimeOutlined, DoubleRightOutlined, CheckCircleOutlined, ExclamationCircleOutlined, DoubleLeftOutlined, LeftOutlined, RightOutlined, SplitCellsOutlined } from '@ant-design/icons';\r\nimport { addAppointment, deleteAppointment, deleteJob, updateAppointment, updateJob } from '../../redux/appointment/appointment.actions';\r\nimport { createPeriodObject, getAllVacatedSpacesInPeriodUntilDueDate, verifyAppointmentDisponibility } from '../../utils/periods';\r\nimport { Button, Form, Input } from 'antd';\r\n\r\nimport './Home.styles.scss';\r\nimport { Button as MaterialButton, Grid } from '@material-ui/core';\r\nimport { AccessTime, Lens } from '@material-ui/icons';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport Checkbox from 'antd/lib/checkbox/Checkbox';\r\nimport { setShowSleepConfiguration } from '../../redux/global-configuration/configuration.actions';\r\n\r\nclass HomeComponent extends React.Component {\r\n    partitionForm = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentDay: moment().startOf('week').toDate(),\r\n            currentViewName: 'Day',\r\n            appointmentUpdateInterval: null,\r\n            isPartitionModalVisible: false,\r\n            partitionAppointmentData: null,\r\n            partitionHourValue: '',\r\n            isRealocateModalVisible: false,\r\n            realocatedState: {\r\n                state: '',\r\n                periods: [],\r\n                appointment: null,\r\n                job: null\r\n            },\r\n            isAppointmentTooltipVisible: false,\r\n            appointmentTooltipMetadata: {\r\n                target: null,\r\n                data: {},\r\n            },\r\n            isMergeModalVisible: false,\r\n            mergeState: null,\r\n            isRecurrentChangeModalVisible: false,\r\n            recurrentChangeState: null\r\n        }\r\n\r\n        this.toggleVisibility = () => {\r\n            this.setState({ isAppointmentTooltipVisible: !this.state.isAppointmentTooltipVisible });\r\n        };\r\n\r\n        this.onAppointmentMetaChange = ({ data, target } = { data: {}, target: null }) => {\r\n            this.setState({ appointmentTooltipMetadata: { data, target } });\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onUpdateAppointmentsState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.appointmentUpdateInterval) {\r\n            clearTimeout(this.state.appointmentUpdateInterval)\r\n            this.setState({ appointmentUpdateInterval: null })\r\n        }\r\n    }\r\n\r\n    onUpdateAppointmentsState() {\r\n        const { appointments } = this.props;\r\n\r\n        appointments.forEach(appointment => {\r\n            const currentState = this.checkStateOfAppointment(appointment)\r\n            if (appointment.state !== currentState) {\r\n\r\n                console.log(\"New state\" + currentState + \"for appoitnment\" + appointment.id);\r\n\r\n                appointment.state = currentState;\r\n\r\n                this.props.updateAppointment(appointment);\r\n            }\r\n        })\r\n\r\n        const timeUntilNextHour = moment().add(1, 'hour').startOf('hour').add(1, 'second').diff(moment(), 'milliseconds');\r\n\r\n        this.setState({\r\n            appointmentUpdateInterval: setTimeout(() => this.onUpdateAppointmentsState(), timeUntilNextHour)\r\n        })\r\n    }\r\n\r\n    checkStateOfAppointment(appointment) {\r\n        //Once completed, the state is not supposed to be changed anymore\r\n        if (appointment.state === APPOINTMENT_STATE_COMPLETED) {\r\n            return APPOINTMENT_STATE_COMPLETED;\r\n        }\r\n\r\n        //Fixed appointments are not supposed to change in any circustance\r\n        if (appointment.state === APPOINTMENT_STATE_FIXED) {\r\n            return APPOINTMENT_STATE_FIXED;\r\n        }\r\n\r\n        const job = this.findJobOfAppointment(appointment);\r\n        if (appointment.startDate.isAfter(job.dueDate)) {\r\n            return APPOINTMENT_STATE_DELAY\r\n        }\r\n\r\n        //If the appointment has ended before the current date, then it's late\r\n        if (appointment.endDate.isBefore(moment())) {\r\n            return APPOINTMENT_STATE_LATE;\r\n        }\r\n\r\n        //If the appointment start is later than now, then it is still to do\r\n        if (appointment.startDate.isAfter(moment())) {\r\n            return APPOINTMENT_STATE_TO_DO;\r\n        }\r\n\r\n        //Otherwise, the appointment is occuring currrently\r\n        return APPOINTMENT_STATE_CURRENT;\r\n    }\r\n\r\n    TableTimeCellRenderer(input) {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n\r\n        const startDate = moment(input.startDate);\r\n        const endDate = moment(input.endDate);\r\n\r\n        let className = \"sleep-period\";\r\n\r\n        if (this.isHoursBetween(workStart, workEnd, startDate, endDate)) {\r\n            className = \"work-period\"\r\n        } else if (this.isHoursBetween(freeStart, freeEnd, startDate, endDate)) {\r\n            className = \"free-period\"\r\n        }\r\n\r\n        return <DayView.TimeTableCell {...input} className={className}></DayView.TimeTableCell>\r\n    }\r\n\r\n    isHoursBetween(periodStart, periodEnd, checkStart, checkEnd) {\r\n        const periodStartDate = checkStart.clone().startOf('day').set('hour', periodStart);\r\n        const periodEndDate = checkEnd.clone().startOf('day').set('hour', periodEnd);\r\n\r\n        return checkStart.isBetween(periodStartDate, periodEndDate, undefined, \"[)\") &&\r\n            checkEnd.isBetween(periodStartDate, periodEndDate, undefined, \"(]\")\r\n\r\n    }\r\n\r\n    getCustomAppointmentContent(props) {\r\n        const { data, formatDate } = props;\r\n\r\n        const job = this.findJobOfAppointment(data);\r\n\r\n        return (\r\n            <Appointments.AppointmentContent {...props} style={{ height: '100%' }}>\r\n                <div className=\"app-appointment-content\">\r\n                    <div className=\"title\">\r\n                        {job.name}\r\n                    </div>\r\n                    {\r\n                        job.price\r\n                            ? <div className=\"value-wrapper\">$ {job.price.toFixed(2)}</div>\r\n                            : null\r\n                    }\r\n                    {\r\n                        data.state !== APPOINTMENT_STATE_FIXED\r\n                            ? <span>Due to: {job.dueDate.format('DD/MM/YYYY HH:00')}</span>\r\n                            : null\r\n                    }\r\n                    <div className=\"hour-wrapper\">\r\n                        <span>{formatDate(data.startDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                        <span style={{ padding: \"0px 3px\" }}> - </span>\r\n                        <span>{formatDate(data.endDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                    </div>\r\n                </div>\r\n            </Appointments.AppointmentContent>\r\n        )\r\n    }\r\n\r\n    getTooltipContent(props) {\r\n        const { appointmentData, formatDate } = props;\r\n\r\n        const job = this.findJobOfAppointment(appointmentData);\r\n        if (!job) { return null; }\r\n\r\n        <SplitCellsOutlined />\r\n\r\n        return (\r\n            <div className=\"tooltip-content\">\r\n                <Grid container alignItems=\"flex-start\" className=\"meta\">\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center' }} >\r\n                        <Lens className=\"lens\" style={{\r\n                            color: appointmentData.state === APPOINTMENT_STATE_TO_DO\r\n                                ? '#1890ff'\r\n                                : appointmentData.state === APPOINTMENT_STATE_FIXED\r\n                                    ? '#039be5'\r\n                                    : appointmentData.state === APPOINTMENT_STATE_COMPLETED\r\n                                        ? '#a4b1db'\r\n                                        : appointmentData.state === APPOINTMENT_STATE_CURRENT\r\n                                            ? 'green'\r\n                                            : appointmentData.state === APPOINTMENT_STATE_LATE\r\n                                                ? 'orange'\r\n                                                : 'crimson'\r\n                        }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <div className=\"title\" >\r\n                            {job.name}\r\n                        </div>\r\n                        <div >\r\n                            {appointmentData.startDate.format('dddd, DD MMMM YYYY')}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" style={{ marginTop: '10px' }}>\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center', color: 'gray' }} >\r\n                        <ExclamationCircleOutlined style={{ fontSize: '24px' }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <div >\r\n                            {`${formatDate(appointmentData.startDate, { hour: 'numeric', minute: 'numeric' })}\r\n                            - ${formatDate(appointmentData.endDate, { hour: 'numeric', minute: 'numeric' })}`}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {\r\n                    !appointmentData.state === APPOINTMENT_STATE_FIXED\r\n                        ?\r\n                        <Grid container alignItems=\"center\" >\r\n                            <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center', color: 'gray' }} >\r\n                                <AccessTime style={{ fontSize: '24px' }} />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={10}>\r\n                                <span>Due at {job.dueDate.format('dddd, DD MMMM YYYY HH:00')}</span>\r\n                            </Grid>\r\n                        </Grid>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    job.description\r\n                        ?\r\n                        <p className=\"description\">\r\n                            {job.description}\r\n                        </p>\r\n                        :\r\n                        null\r\n                }\r\n\r\n\r\n                <div className=\"tooltip-wrapper\">\r\n                    <Button\r\n                        disabled={appointmentData.state === APPOINTMENT_STATE_COMPLETED || appointmentData.state === APPOINTMENT_STATE_FIXED}\r\n                        onClick={() => this.onCompleteTheAppointment(appointmentData)}\r\n                        icon={<CheckCircleOutlined />}\r\n                        size={'large'}>\r\n                        Complete\r\n                        </Button>\r\n                    <Button\r\n                        disabled={appointmentData.state === APPOINTMENT_STATE_FIXED}\r\n                        onClick={() => this.onDelayTheAppointment(appointmentData)}\r\n                        icon={<FieldTimeOutlined />}\r\n                        size={'large'}>\r\n                        Delay\r\n                        </Button>\r\n                    <Button\r\n                        disabled={appointmentData.state === APPOINTMENT_STATE_FIXED}\r\n                        onClick={() => this.onFinishTheAppointment(appointmentData)}\r\n                        icon={<DoubleRightOutlined />}\r\n                        size={'large'}>\r\n                        Finish\r\n                        </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onCompleteTheAppointment(appointment) {\r\n        const { appointments, jobs } = this.props;\r\n\r\n        const updatedListOfAppointments = [...appointments];\r\n        const indexOnList = updatedListOfAppointments.findIndex(toCompare => toCompare.id === appointment.id);\r\n\r\n        if (indexOnList === -1) {\r\n            console.error(\"Unknown appointment was completed!\");\r\n            return;\r\n        }\r\n\r\n        updatedListOfAppointments[indexOnList].state = APPOINTMENT_STATE_COMPLETED;\r\n        const associatedJob = jobs.find(job => job.id === appointment.jobId);\r\n\r\n        //Check that with the conclusion of this appointment, the job was completed entirely\r\n        if (this.shouldDeleteJob(associatedJob, updatedListOfAppointments)) {\r\n            this.props.deleteJob(associatedJob);\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        } else {\r\n            this.props.updateAppointment(updatedListOfAppointments[indexOnList]);\r\n            this.props.updateJob(this.onUpdateJobStateOnAppointmentChange(associatedJob, updatedListOfAppointments));\r\n        }\r\n    }\r\n\r\n    onUpdateJobStateOnAppointmentChange(job, allAppointments) {\r\n        const jobAppointments = allAppointments.filter(appointment => job.appointments.includes(appointment.id));\r\n\r\n        //If no appointment is still in the state to do, means that the job is fully completed and should be removed\r\n        if (jobAppointments.filter(appointment =>\r\n            appointment.state === APPOINTMENT_STATE_TO_DO ||\r\n            appointment.state === APPOINTMENT_STATE_CURRENT ||\r\n            appointment.state === APPOINTMENT_STATE_DELAY ||\r\n            appointment.state === APPOINTMENT_STATE_LATE).length === 0) {\r\n            job.state = JOB_COMPLETED\r\n            //Else if not a single appointment has started, that means the job is still on hold\r\n        } else if (jobAppointments.filter(appointment => appointment.state === APPOINTMENT_STATE_COMPLETED).length === 0) {\r\n            job.state = JOB_NOT_STARTED\r\n        } else {\r\n            job.state = JOB_ON_GOING\r\n        }\r\n\r\n        return job;\r\n    }\r\n\r\n    shouldDeleteJob(job, allAppointments) {\r\n        const jobAppointments = allAppointments.filter(appointment => job.appointments.includes(appointment.id));\r\n\r\n        return jobAppointments.filter(appointment =>\r\n            appointment.state === APPOINTMENT_STATE_TO_DO ||\r\n            appointment.state === APPOINTMENT_STATE_CURRENT ||\r\n            appointment.state === APPOINTMENT_STATE_DELAY ||\r\n            appointment.state === APPOINTMENT_STATE_LATE ||\r\n            appointment.state === APPOINTMENT_STATE_FIXED\r\n        ).length === 0;\r\n    }\r\n\r\n    onDelayTheAppointment(appointment) {\r\n        const { workStart, workEnd, freeStart, freeEnd, appointments } = this.props;\r\n\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        const newDistributedPeriods = verifyAppointmentDisponibility(\r\n            appointment.hours,\r\n            job.dueDate,\r\n            appointments,\r\n            [workStart, workEnd],\r\n            [freeStart, freeEnd],\r\n            appointment.endDate\r\n        );\r\n\r\n        if (newDistributedPeriods.state === SCHEDULE_FREE_TIME || newDistributedPeriods === SCHEDULE_FULL) {\r\n            this.setState({\r\n                realocatedState: { ...newDistributedPeriods, appointment, job },\r\n                isRealocateModalVisible: true\r\n            })\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        } else {\r\n            this.onConfirmationOfRealocation({ ...newDistributedPeriods, appointment, job })\r\n        }\r\n    }\r\n\r\n    onConfirmationOfRealocation(directState = null) {\r\n        const { periods, job, appointment } = directState || this.state.realocatedState;\r\n\r\n        const newAppointments = periods.map(period => createPeriodObject(period, job.id))\r\n\r\n        //Removed old appointment and insert new ids from the job object\r\n        const indexOfAppointment = job.appointments.findIndex(appoID => appoID === appointment.id);\r\n        job.appointments.splice(indexOfAppointment, 1, ...newAppointments.map(app => app.id))\r\n\r\n        this.props.updateJob(job);\r\n        this.props.deleteAppointment([appointment.id]);\r\n        this.props.addAppointments(newAppointments);\r\n\r\n        this.setState({\r\n            isRealocateModalVisible: false,\r\n            realocatedState: null\r\n        })\r\n    }\r\n\r\n    onFinishTheAppointment(appointment) {\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        this.props.deleteJob(job);\r\n\r\n        this.toggleVisibility();\r\n        this.onAppointmentMetaChange();\r\n    }\r\n\r\n    getAppointmentComponet(props) {\r\n        const { children, style, data } = props;\r\n\r\n        let className;\r\n\r\n        switch (data.state) {\r\n            case APPOINTMENT_STATE_COMPLETED:\r\n                className = \"appointment-done\"\r\n                break;\r\n            case APPOINTMENT_STATE_FIXED:\r\n                className = \"appointment-fixed\";\r\n                break;\r\n            case APPOINTMENT_STATE_CURRENT:\r\n                className = \"appointment-active\";\r\n                break;\r\n            case APPOINTMENT_STATE_LATE:\r\n                className = \"appointment-late\"\r\n                break;\r\n            case APPOINTMENT_STATE_DELAY:\r\n                className = \"appointment-delay\"\r\n        }\r\n\r\n        return (\r\n            <Appointments.Appointment\r\n                {...props}\r\n                className={className}\r\n                style={{\r\n                    ...style\r\n                }}\r\n                onClick={({ target, data }) => {\r\n                    let targetElement = target;\r\n\r\n                    while (true) {\r\n                        targetElement = targetElement.parentElement;\r\n                        if (targetElement.style.position === 'absolute') { break; }\r\n                    }\r\n\r\n                    this.onAppointmentMetaChange({ target: targetElement, data });\r\n                    this.toggleVisibility();\r\n                }}\r\n            >\r\n                {children}\r\n            </Appointments.Appointment>\r\n        )\r\n    }\r\n\r\n    findJobOfAppointment(appointment, index = false) {\r\n        return index\r\n            ?\r\n            this.props.jobs.findIndex(job => job.id === appointment.jobId)\r\n            :\r\n            this.props.jobs.find(job => job.id === appointment.jobId);\r\n    }\r\n\r\n    onAppointmentChangeCommited(props) {\r\n        const { appointments } = this.props;\r\n\r\n        if (props.deleted) {\r\n            const appointment = appointments.find(appo => appo.id === props.deleted);\r\n            const job = this.findJobOfAppointment(appointment);\r\n\r\n            if (appointment.state === APPOINTMENT_STATE_FIXED) {\r\n                this.setState({\r\n                    isRecurrentChangeModalVisible: true,\r\n                    recurrentChangeState: {\r\n                        previousStart: appointment.startDate,\r\n                        previosEnd: appointment.endDate,\r\n                        job,\r\n                        appointment,\r\n                        change: 'DELETED'\r\n                    }\r\n                })\r\n\r\n                return;\r\n            }\r\n\r\n            const previewedDeletionAppointments = [...appointments];\r\n            previewedDeletionAppointments.splice(previewedDeletionAppointments.findIndex(appo => appo.id === props.deleted), 1)\r\n\r\n            if (this.shouldDeleteJob(job, previewedDeletionAppointments)) {\r\n                this.props.deleteJob(job);\r\n            } else {\r\n                job.appointments.splice(job.appointments.findIndex(appo => appo === props.deleted), 1);\r\n\r\n                this.props.deleteAppointment([props.deleted]);\r\n                this.props.updateJob(job);\r\n            }\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        }\r\n\r\n        if (props.changed) {\r\n            Object.keys(props.changed).forEach(changedId => {\r\n                const { endDate, startDate } = props.changed[changedId];\r\n\r\n                const appointment = appointments.find(appo => appo.id === changedId);\r\n\r\n                let newStartDate = moment(startDate);\r\n                let newEndDate = moment(endDate);                \r\n\r\n                if (newEndDate.diff(newStartDate, 'hours') === 24) {\r\n                    newStartDate.set('hour', this.props.workStart);\r\n                    newEndDate = newStartDate.clone().set('hour', this.props.workStart + appointment.hours);\r\n                }\r\n\r\n                //Check if the new start date is the same as the old one, if is there's nothing left to do\r\n                if(newStartDate.isSame(appointment.startDate)){\r\n                    return;\r\n                }\r\n\r\n                if (appointment.state === APPOINTMENT_STATE_FIXED && appointment.startDate.get('day') === newStartDate.get('day')) {\r\n                    const job = this.findJobOfAppointment(appointment);\r\n\r\n                    this.setState({\r\n                        isRecurrentChangeModalVisible: true,\r\n                        recurrentChangeState: {\r\n                            previousStart: appointment.startDate,\r\n                            previosEnd: appointment.endDate,\r\n                            newStart: newStartDate,\r\n                            newEnd: newEndDate,\r\n                            job,\r\n                            appointment,\r\n                            change: 'CHANGED'\r\n                        }\r\n                    })\r\n\r\n                    return;\r\n                }\r\n\r\n                const collidedAppointmentOfSameJob = appointments.find(appo => {\r\n                    if (newStartDate.isBetween(appo.startDate, appo.endDate) ||\r\n                        newEndDate.isBetween(appo.startDate, appo.endDate)) {\r\n                        return appo.jobId === appointment.jobId;\r\n                    }\r\n\r\n                    return false;\r\n                })\r\n\r\n                //Check if the appointment collided with another with the same job, so to trigger the merge popup\r\n                if (collidedAppointmentOfSameJob) {\r\n                    this.setState({\r\n                        isMergeModalVisible: true,\r\n                        mergeState: {\r\n                            collidedAppointment: collidedAppointmentOfSameJob,\r\n                            appointment,\r\n                            updatedAppointment: {\r\n                                ...appointment,\r\n                                startDate: newStartDate,\r\n                                endDate: newEndDate,\r\n                                state: this.checkStateOfAppointment(appointment)\r\n                            },\r\n                            job: this.findJobOfAppointment(appointment)\r\n                        }\r\n                    })\r\n                    return;\r\n                }\r\n\r\n                appointment.startDate = newStartDate;\r\n                appointment.endDate = newEndDate;\r\n                appointment.state = this.checkStateOfAppointment(appointment);\r\n\r\n                this.props.updateAppointment(appointment);\r\n            })\r\n        }\r\n    }\r\n\r\n    onAppointmentPartitionSet({ hour }) {\r\n        const { appointments, deleteAppointment, updateJob, addAppointments } = this.props;\r\n\r\n        const appointment = this.state.partitionAppointmentData;\r\n\r\n        const modifiedAppointments = appointments.slice();\r\n        modifiedAppointments.splice(modifiedAppointments.findIndex(appo => appo.id === appointment.id), 1);\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        const newPeriods = getAllVacatedSpacesInPeriodUntilDueDate(\r\n            appointment.startDate.get('hour'),\r\n            appointment.endDate.get('hour'),\r\n            appointment.endDate,\r\n            modifiedAppointments,\r\n            0,\r\n            appointment.startDate,\r\n            false,\r\n            hour\r\n        )\r\n\r\n        let newAppointments = newPeriods.map(period => createPeriodObject(period, job.id));\r\n        job.appointments.splice(job.appointments.findIndex(appo => appo === appointment.id), 1);\r\n        job.appointments.push(...newAppointments.map(newAppo => newAppo.id));\r\n\r\n        newAppointments = newAppointments.map(newAppointment => {\r\n            const currentState = this.checkStateOfAppointment(newAppointment);\r\n\r\n            if (newAppointment.state !== currentState) {\r\n                newAppointment.state = currentState;\r\n            }\r\n\r\n            return newAppointment\r\n        })\r\n\r\n        deleteAppointment([appointment.id]);\r\n        addAppointments(newAppointments);\r\n        updateJob(job);\r\n\r\n\r\n        this.setState({ partitionAppointmentData: null });\r\n    }\r\n\r\n    onAppointmentMerge({ collidedAppointment, appointment, updatedAppointment, job }, merge) {\r\n        const { deleteAppointment, updateAppointment } = this.props;\r\n\r\n        if (merge) {\r\n            job.appointments.splice(job.appointments.findIndex(appo => appo === appointment.id), 1);\r\n            collidedAppointment.hours += appointment.hours;\r\n            collidedAppointment.endDate.add(appointment.hours, 'hours');\r\n\r\n            deleteAppointment([appointment.id]);\r\n            updateAppointment(collidedAppointment);\r\n            updateJob(job);\r\n        } else {\r\n            updateAppointment(updatedAppointment);\r\n        }\r\n\r\n        this.setState({ isMergeModalVisible: false, mergeState: null });\r\n    }\r\n\r\n    validateHourInserted(_, hours) {\r\n        if (!hours) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        try {\r\n            parseInt(hours, 10);\r\n        } catch (e) {\r\n            return Promise.reject('The hours value need to be a number!')\r\n        }\r\n\r\n        if (this.state.partitionAppointmentData.hours <= hours) {\r\n            return Promise.reject('You can\\'t partition an appointment by the same or higher number of hours!')\r\n        }\r\n\r\n        if (hours <= 0) {\r\n            return Promise.reject('The number of hour should be non-negative and non-zero!')\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    getToolbarFreeSpaceComponent() {\r\n        return (\r\n            <Toolbar.FlexibleSpace className=\"toolbar-flexible-space\" >\r\n                {\r\n                    this.props.workStart !== null && this.props.freeStart !== null\r\n                        ?\r\n                        <Checkbox\r\n                            checked={this.props.showSleepPeriod}\r\n                            onChange={(event) => {\r\n                                const { setShowSleepPeriod } = this.props;\r\n                                const checked = event.target.checked\r\n\r\n                                setShowSleepPeriod(checked);\r\n                            }} >\r\n                            Show Sleep Period\r\n                        </Checkbox>\r\n                        :\r\n                        null\r\n                }\r\n\r\n            </Toolbar.FlexibleSpace>\r\n        )\r\n    }\r\n\r\n    getViewSwitcherComponent(props) {\r\n        return <ViewSwitcher.Switcher {...props} onChange={(viewName) => this.setState({ currentViewName: viewName })}></ViewSwitcher.Switcher >\r\n    }\r\n\r\n    getNavigatorRootComponent(props) {\r\n        return <DateNavigator.Root className=\"date-navigator-root\" {...props}></DateNavigator.Root>\r\n    }\r\n\r\n    getDateNavigatorComponent(props) {\r\n        const isForward = props.type === 'forward'\r\n        return (\r\n            <div className={`navigation-pair-button-wrapper ${isForward ? '' : 'reverse'}`}>\r\n                <button onClick={() => this.onNaviagateDate(props.type)}>\r\n                    {isForward ? <RightOutlined /> : <LeftOutlined />}\r\n                </button>\r\n                {\r\n                    this.state.currentViewName === 'Day'\r\n                        ?\r\n                        <button onClick={() => this.onNaviagateDate(props.type, true)}>\r\n                            {props.type === 'forward' ? <DoubleRightOutlined /> : <DoubleLeftOutlined />}\r\n                        </button>\r\n                        :\r\n                        null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onNaviagateDate(direction, fastForward = false) {\r\n        const currentDay = this.state.currentDay;\r\n\r\n        switch (this.state.currentViewName) {\r\n            case 'Day':\r\n                this.setState({\r\n                    currentDay: direction === 'forward'\r\n                        ?\r\n                        moment(currentDay).add(fastForward ? 7 : 1, 'day').toDate()\r\n                        :\r\n                        moment(currentDay).subtract(fastForward ? 7 : 1, 'day').toDate()\r\n                })\r\n                return\r\n            case 'Month':\r\n                this.setState({\r\n                    currentDay: direction === 'forward'\r\n                        ?\r\n                        moment(currentDay).add(1, 'month').toDate()\r\n                        :\r\n                        moment(currentDay).subtract(1, 'month').toDate()\r\n                })\r\n                return;\r\n        }\r\n    }\r\n\r\n    onRecurrentAppointmentChange({ previousStart, previosEnd, newStart, newEnd, job, appointment, change }, specification) {\r\n        switch (specification) {\r\n            case 'THIS':\r\n                if (change === 'CHANGED') {\r\n                    appointment.startDate = newStart;\r\n                    appointment.endDate = newEnd;\r\n                    this.props.updateAppointment(appointment);\r\n                } else {\r\n                    const previewedDeletionAppointments = [...this.props.appointments];\r\n                    previewedDeletionAppointments.splice(previewedDeletionAppointments.findIndex(appo => appo.id === appointment.id), 1)\r\n\r\n                    if (this.shouldDeleteJob(job, previewedDeletionAppointments)) {\r\n                        this.props.deleteJob(job);\r\n                    } else {\r\n                        job.appointments.splice(job.appointments.findIndex(appo => appo === appointment.id), 1);\r\n\r\n                        this.props.deleteAppointment([appointment.id]);\r\n                        this.props.updateJob(job);\r\n                    }\r\n                }\r\n                break;\r\n            case 'DAY':\r\n                const jobAppointments = this.findAllAppointmentsOfJobInWeekDay(job, previousStart.isoWeekday());\r\n\r\n                if (change === 'CHANGED') {\r\n                    jobAppointments.forEach(jobAppo => {\r\n                        jobAppo.startDate.set('hour', newStart.get('hour'))\r\n                        jobAppo.endDate.set('hour', newEnd.get('hour'))\r\n                        this.props.updateAppointment(jobAppo);\r\n                    })\r\n                } else {\r\n                    const previewedDeletionAppointments = [...this.props.appointments];\r\n                    const newJob = Object.assign({}, job);\r\n                    jobAppointments.forEach(jobAppo => {\r\n                        previewedDeletionAppointments.splice(previewedDeletionAppointments.findIndex(appo => appo.id === jobAppo.id), 1)\r\n                    })\r\n\r\n                    if (this.shouldDeleteJob(job, previewedDeletionAppointments)) {\r\n                        this.props.deleteJob(job);\r\n                    } else {\r\n                        jobAppointments.forEach(jobAppo => {\r\n                            newJob.appointments.splice(newJob.appointments.findIndex(appo => appo === jobAppo.id), 1);\r\n                        })\r\n\r\n                        this.props.deleteAppointment(jobAppointments.map(jobAppo => jobAppo.id));\r\n                        this.props.updateJob(newJob);\r\n                    }\r\n                }\r\n                break;\r\n            case 'ALL':\r\n                const allJobAppointments = this.props.appointments.filter(appo => {\r\n                    return job.appointments.find(jobAppo => jobAppo === appo.id)\r\n                })\r\n\r\n                if (change === 'CHANGED') {\r\n                    allJobAppointments.forEach(jobAppo => {\r\n                        jobAppo.startDate.set('hour', newStart.get('hour'))\r\n                        jobAppo.endDate.set('hour', newEnd.get('hour'))\r\n                        this.props.updateAppointment(jobAppo);\r\n                    })\r\n                } else {\r\n                    this.props.deleteJob(job);\r\n                }\r\n                break;\r\n        }\r\n\r\n        this.setState({ isRecurrentChangeModalVisible: false, recurrentChangeState: null })\r\n    }\r\n\r\n    findAllAppointmentsOfJobInWeekDay(job, weekDay) {\r\n        return this.props.appointments.filter(appo => {\r\n            return appo.startDate.isoWeekday() === weekDay && job.appointments.find(jobAppo => jobAppo === appo.id)\r\n        })\r\n    }\r\n\r\n    getHeaderComponent({ children, appointmentData, classes, ...restProps }) {\r\n        return (\r\n            <AppointmentTooltip.Header\r\n                {...restProps}\r\n                appointmentData={appointmentData}\r\n            >\r\n                {\r\n                    !appointmentData.state === APPOINTMENT_STATE_FIXED ?\r\n                        <MaterialButton\r\n                            className=\"icon-button-wrapper\"\r\n                            onClick={() => {\r\n                                this.setState({ isPartitionModalVisible: true, partitionAppointmentData: appointmentData })\r\n                                this.toggleVisibility();\r\n                                this.onAppointmentMetaChange();\r\n                            }}>\r\n                            <SplitCellsOutlined />\r\n                        </MaterialButton>\r\n                        :\r\n                        null\r\n                }\r\n            </AppointmentTooltip.Header>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"home-wrapper\">\r\n                <Header></Header>\r\n                <Paper>\r\n                    <Scheduler\r\n                        locale={\"en-UK\"}\r\n                        data={this.props.appointments}>\r\n                        <ViewState\r\n                            currentDate={this.state.currentDay}\r\n                            currentViewName={this.state.currentViewName}\r\n                            onCurrentDateChange={(date) => this.setState({ currentDay: date })}\r\n                        />\r\n                        <EditingState onCommitChanges={this.onAppointmentChangeCommited.bind(this)} />\r\n\r\n                        <IntegratedEditing />\r\n                        <ConfirmationDialog />\r\n\r\n                        <DayView\r\n                            displayName={'Week'}\r\n                            cellDuration={60}\r\n                            intervalCount={7}\r\n                            startDayHour={this.props.calendarViewHourStart}\r\n                            endDayHour={this.props.calendarViewHourEnd}\r\n                            timeTableCellComponent={this.TableTimeCellRenderer.bind(this)}>\r\n                        </DayView>\r\n                        <MonthView />\r\n\r\n                        <Toolbar flexibleSpaceComponent={this.getToolbarFreeSpaceComponent.bind(this)} />\r\n                        <ViewSwitcher switcherComponent={this.getViewSwitcherComponent.bind(this)} />\r\n                        <DateNavigator\r\n                            rootComponent={this.getNavigatorRootComponent.bind(this)}\r\n                            navigationButtonComponent={this.getDateNavigatorComponent.bind(this)} />\r\n\r\n                        <Appointments\r\n                            appointmentComponent={this.getAppointmentComponet.bind(this)}\r\n                            appointmentContentComponent={this.getCustomAppointmentContent.bind(this)}\r\n                        />\r\n\r\n                        <AppointmentTooltip\r\n                            showCloseButton\r\n                            showDeleteButton\r\n                            headerComponent={this.getHeaderComponent.bind(this)}\r\n                            visible={this.state.isAppointmentTooltipVisible}\r\n                            appointmentMeta={this.state.appointmentTooltipMetadata}\r\n                            onAppointmentMetaChange={this.onAppointmentMetaChange}\r\n                            onVisibilityChange={() => this.setState({ isAppointmentTooltipVisible: false })}\r\n                            contentComponent={this.getTooltipContent.bind(this)}\r\n                        />\r\n\r\n                        <DragDropProvider\r\n                            allowResize={() => false}\r\n                        />\r\n\r\n                    </Scheduler>\r\n                </Paper>\r\n\r\n                {\r\n                    this.state.realocatedState\r\n                        ?\r\n                        <Modal\r\n                            visible={this.state.isRealocateModalVisible}\r\n                            onOk={() => this.onConfirmationOfRealocation()}\r\n                            onCancel={() => this.setState({ isRealocateModalVisible: false, realocatedState: null })}>\r\n                            <p style={{ marginTop: '20px' }}>\r\n                                {\r\n                                    this.state.realocatedState.state === SCHEDULE_FREE_TIME\r\n                                        ?\r\n\r\n                                        `The appointment submitted can't be concluded during your work period,\r\n                                        do you want to allocate your free time for this appointment?`\r\n                                        :\r\n                                        `The appointment submitted can't be concluded during your work or free time,\r\n                                        should the scheduler ignore your sleep period and allocate time in it?`\r\n                                }\r\n                            </p>\r\n                        </Modal>\r\n                        :\r\n                        null\r\n                }\r\n\r\n                <Modal\r\n                    visible={this.state.isMergeModalVisible}\r\n                    footer={[\r\n                        <Button key=\"cancel\" className=\"cancel\" onClick={() => this.setState({ isMergeModalVisible: false, mergeState: null })}>\r\n                            Cancel\r\n                        </Button>,\r\n                        <Button key=\"merge\" type=\"primary\" onClick={() => this.onAppointmentMerge(this.state.mergeState, true)}>\r\n                            Merge\r\n                        </Button>,\r\n                        <Button key=\"ignore\" type=\"primary\" onClick={() => this.onAppointmentMerge(this.state.mergeState, false)} >\r\n                            Ignore\r\n                        </Button>\r\n                    ]}\r\n                    onCancel={() => this.setState({ isMergeModalVisible: false, mergeState: null })}\r\n                    className=\"merge-modal\">\r\n                    <h2>Appointment Merging</h2>\r\n                    <p style={{ marginTop: '20px' }}>\r\n                        The appointment that you dragged is overlapping with another appointment of the same job.\r\n                        <br />\r\n                        <br />\r\n                        You can press 'Merge' to merge both appointment into one, press 'Ignore' to apply the drag but not merge\r\n                        or 'Cancel' to abort the operation.\r\n                        <br />\r\n                        <br />\r\n                        You can separate the merged appointment again by using the partition tool that is avaliable at the appointment options.\r\n                    </p>\r\n                </Modal>\r\n\r\n                {\r\n                    this.state.isRecurrentChangeModalVisible\r\n                        ?\r\n                        <Modal\r\n                            visible={this.state.isRecurrentChangeModalVisible}\r\n                            footer={[\r\n                                <Button key=\"cancelRecurrent\" className=\"cancel\" onClick={() => this.setState({ isRecurrentChangeModalVisible: false, recurrentChangeState: null })}>\r\n                                    Cancel\r\n                                </Button>,\r\n                                <Button key=\"everything\" className=\"everything\" type=\"primary\" onClick={() => this.onRecurrentAppointmentChange(this.state.recurrentChangeState, 'ALL')} >\r\n                                    Everything\r\n                                </Button>,\r\n                                <Button key=\"allOnDay\" className=\"day\" type=\"primary\" onClick={() => this.onRecurrentAppointmentChange(this.state.recurrentChangeState, 'DAY')} >\r\n                                    All on {this.state.recurrentChangeState.previousStart.format('dddd')}\r\n                                </Button>,\r\n                                <Button key=\"onlyThis\" className=\"this\" type=\"primary\" onClick={() => this.onRecurrentAppointmentChange(this.state.recurrentChangeState, 'THIS')}>\r\n                                    Only This\r\n                                </Button>\r\n                            ]}\r\n                            onOk={() => true}\r\n                            onCancel={() => this.setState({ isRecurrentChangeModalVisible: false, recurrentChangeState: null })}\r\n                            className={this.state.recurrentChangeState.change === 'CHANGED' ? \"recurrent-change-modal changed\" : \"recurrent-change-modal deleted\"}>\r\n                            <h2>Recurrent Appointment Change</h2>\r\n                            {\r\n                                this.state.recurrentChangeState.change === 'CHANGED'\r\n                                    ?\r\n                                    <p>\r\n                                        You are currently trying to change the period of one appointment of the recurrent event\r\n                                        \"{this.state.recurrentChangeState.job.name}\".\r\n                                        <br />\r\n                                        <br />\r\n                                        Please specify if this change should only occur to the modified appointment,\r\n                                        or all the appointments of this event that are in the\r\n                                        same day ({this.state.recurrentChangeState.previousStart.format('dddd')}). You could\r\n                                        also commit the change to every single appointment of the recurrent event.\r\n                                        <br />\r\n                                        <br />\r\n                                        Press \"Only This\" to modify only the selected appointment, \"All on {this.state.recurrentChangeState.previousStart.format('dddd')}\"\r\n                                        to modify all the appointments on the same week day or \"Everything\" to modify all appointments of the recurrent event.\r\n                                    </p>\r\n                                    :\r\n                                    <p>\r\n                                        You are currently trying to delete the period of one appointment of the recurrent event\r\n                                        \"{this.state.recurrentChangeState.job.name}\".\r\n                                        <br />\r\n                                        <br />\r\n                                        Please specify if this deletion should only occur to the modified appointment,\r\n                                        or all the appointments of this event that are in the\r\n                                        same day ({this.state.recurrentChangeState.previousStart.format('dddd')}). You could\r\n                                        also delete every single appointment of the recurrent event, removing the event entirely from the scheduler.\r\n                                        <br />\r\n                                        <br />\r\n                                        Press \"Only This\" to delete only the selected appointment, \"All on {this.state.recurrentChangeState.previousStart.format('dddd')}\"\r\n                                        to delete all the appointments on the same week day or \"Everything\" to delete all appointments and the recurrent event.\r\n                                    </p>\r\n                            }\r\n                        </Modal>\r\n                        :\r\n                        null\r\n                }\r\n\r\n                {\r\n                    this.state.isPartitionModalVisible\r\n                        ?\r\n                        <Modal\r\n                            visible={this.state.isPartitionModalVisible}\r\n                            onOk={() => {\r\n                                this.partitionForm.current.validateFields()\r\n                                    .then(values => {\r\n                                        this.onAppointmentPartitionSet(values);\r\n                                        this.setState({ isPartitionModalVisible: false })\r\n                                    })\r\n                                    .catch(info => {\r\n                                        console.log('Validate Failed:', info);\r\n                                        this.setState({ isPartitionModalVisible: false })\r\n                                    });\r\n                            }}\r\n                            onCancel={() => this.setState({ isPartitionModalVisible: false })}\r\n                            className=\"hour-splitter-modal\"\r\n                        >\r\n                            <h2>Appointment Partition Tool</h2>\r\n                            <p>Input the number of maximum number of hours that each partition of this appointment should have,\r\n                                the Scheduler will divide the appointment by the hour inputted </p>\r\n                            <Form\r\n                                ref={this.partitionForm}\r\n                                name=\"partitionForm\"\r\n                            >\r\n                                <Form.Item\r\n                                    name=\"hour\"\r\n                                    rules={[{ required: true, message: 'You need to input a number of hours!' }, { validator: this.validateHourInserted.bind(this) }]}\r\n                                >\r\n                                    <Input\r\n                                        placeholder=\"XX\"\r\n                                        type=\"number\"\r\n                                        prefix={<FieldTimeOutlined />}\r\n                                        suffix={'Hours'}\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                            </Form>\r\n\r\n                        </Modal>\r\n                        :\r\n                        null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    calendarViewHourStart: state.period.calendarViewHourStart,\r\n    calendarViewHourEnd: state.period.calendarViewHourEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs,\r\n    showSleepPeriod: state.config.showSleepPeriod\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        updateAppointment: (payload) => dispatch(updateAppointment(payload)),\r\n        deleteAppointment: (payload) => dispatch(deleteAppointment(payload)),\r\n        updateJob: (payload) => dispatch(updateJob(payload)),\r\n        deleteJob: (payload) => dispatch(deleteJob(payload)),\r\n        setShowSleepPeriod: (payload) => dispatch(setShowSleepConfiguration(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeComponent);","import * as types from './configuration.types';\r\n\r\nexport const setShowSleepConfiguration = checked => ({\r\n    type: types.SET_SHOW_SLEEP_PERIOD_CONFIG,\r\n    payload: checked\r\n});","import logo from './logo.svg';\r\nimport './App.css';\r\nimport HomeComponent from './pages/Home/Home.component';\r\n\r\nfunction App() {\r\n  return (\r\n    <HomeComponent></HomeComponent>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import moment from 'moment';\r\n\r\nconst replacer = (_, value) => value instanceof moment ? value.toISOString() : value\r\n\r\nconst reviver = (_, value) =>\r\n    (typeof value === 'string' && value.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/))\r\n        ? moment(value)\r\n        : value\r\n\r\nexport const encode = toDeshydrate => JSON.stringify(toDeshydrate, replacer)\r\n\r\nexport const decode = toRehydrate => JSON.parse(toRehydrate, reviver)","export function updateAppointmentOnList(appointmentList = [], toUpdateAppointment) {\r\n    const indexOnList = appointmentList.findIndex(appointment => appointment.id === toUpdateAppointment.id);\r\n\r\n    if (indexOnList === -1) {\r\n        console.error(\"The update operation on appointments failed, no appointment with id \" + toUpdateAppointment.id + \" found\");\r\n        return appointmentList;\r\n    }\r\n\r\n    const updatedList = [...appointmentList];\r\n    updatedList[indexOnList] = toUpdateAppointment;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function updateJobOnList(jobList = [], toUpdateJob) {\r\n    const indexOnList = jobList.findIndex(job => job.id === toUpdateJob.id);\r\n\r\n    if (indexOnList === -1) {\r\n        console.error(\"The update operation on jobs failed, no job with id \" + toUpdateJob.id + \" found\");\r\n        return jobList;\r\n    }\r\n\r\n    const updatedList = [...jobList];\r\n    updatedList[indexOnList] = toUpdateJob;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function deleteAppointment(appointmentList = [], toDeleteIDs = []) {\r\n    const updatedList = [...appointmentList];\r\n\r\n    toDeleteIDs.forEach(id => {\r\n        updatedList.splice(updatedList.findIndex(appointment => appointment.id === id), 1)\r\n    })\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function deleteJobAndAssociatedAppointments(toDeletejob, jobList = [], appointmentList = []) {\r\n    const indexOnList = jobList.findIndex(job => job.id === toDeletejob.id);\r\n\r\n    const updatedJobList = [...jobList];\r\n    updatedJobList.splice(indexOnList, 1);\r\n\r\n    const updatedAppointmentList = [...appointmentList];\r\n    toDeletejob.appointments.forEach(appointmentOfJobID => {\r\n        const indexOnAppointmentList = updatedAppointmentList.findIndex(appointment => appointment.id === appointmentOfJobID);\r\n        updatedAppointmentList.splice(indexOnAppointmentList, 1);\r\n    });\r\n\r\n    return { jobs: updatedJobList, appointments: updatedAppointmentList }\r\n}","import * as types from './appointment.types';\r\nimport { deleteAppointment, deleteJobAndAssociatedAppointments, updateAppointmentOnList, updateJobOnList } from './appointment.utils';\r\n\r\nconst INITIAL_STATE = {\r\n    appointments: [],\r\n    jobs: [],\r\n    history: []\r\n};\r\n\r\nconst appointmentReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_APPOINTMENTS:\r\n            return {\r\n                ...state,\r\n                appointments: [...state.appointments, ...action.payload]\r\n            };\r\n        case types.UPDATED_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: updateAppointmentOnList(state.appointments, action.payload)\r\n            }\r\n        case types.DELETE_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: deleteAppointment(state.appointments, action.payload)\r\n            }\r\n        case types.ADD_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: [...state.jobs, action.payload]\r\n            }\r\n        case types.UPDATE_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: updateJobOnList(state.jobs, action.payload)\r\n            }\r\n        case types.DELETE_JOB:\r\n            const { jobs, appointments } = deleteJobAndAssociatedAppointments(action.payload, state.jobs, state.appointments)\r\n            return {\r\n                ...state,\r\n                jobs,\r\n                appointments\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appointmentReducer;","import * as types from './period.types';\r\nimport * as configTypes from '../global-configuration/configuration.types';\r\n\r\nconst INITIAL_STATE = {\r\n    workStart: null,\r\n    workEnd: null,\r\n    freeStart: null,\r\n    freeEnd: null,\r\n    calendarViewHourStart: 0,\r\n    calendarViewHourEnd: 24\r\n};\r\n\r\nconst periodReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SET_WORK_PERIOD:\r\n            return {\r\n                ...state,\r\n                workStart: action.payload.start,\r\n                workEnd: action.payload.end\r\n            };\r\n        case types.SET_FREE_PERIOD:\r\n            return {\r\n                ...state,\r\n                freeStart: action.payload.start,\r\n                freeEnd: action.payload.end\r\n            };\r\n        case configTypes.SET_SHOW_SLEEP_PERIOD_CONFIG:\r\n            return {\r\n                ...state,\r\n                calendarViewHourStart: action.payload ? 0 : state.workStart ? Math.min(state.workStart, state.freeStart) : 0,\r\n                calendarViewHourEnd: action.payload ? 24 : state.workEnd ? Math.max(state.workEnd, state.freeEnd) : 24\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default periodReducer;","import * as types from './configuration.types';\r\n\r\nconst INITIAL_STATE = {\r\n    showSleepPeriod: true\r\n};\r\n\r\nconst configurationReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SET_SHOW_SLEEP_PERIOD_CONFIG:\r\n            return {\r\n                ...state,\r\n                showSleepPeriod: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default configurationReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport createTransform from 'redux-persist/es/createTransform';\r\nimport { decode, encode } from '../utils/persistor';\r\n\r\nimport appointmentReducer from './appointment/appointment.reducer';\r\nimport periodReducer from './period/period.reducer';\r\nimport configurationReducer from './global-configuration/configuration.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    transforms: [createTransform(encode, decode)]\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    period: periodReducer,\r\n    appointment: appointmentReducer,\r\n    config: configurationReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import { createStore } from 'redux';\r\n\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root_reducer';\r\nimport logger from 'redux-logger'\r\nimport { applyMiddleware } from '@reduxjs/toolkit';\r\n\r\nconst middlewares = []\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    //Set Development only middlewares\r\n    middlewares.push(logger)\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"antd/dist/antd.css\";\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { store, persistor } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}