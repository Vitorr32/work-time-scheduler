{"version":3,"sources":["logo.svg","redux/appointment/appointment.types.js","redux/appointment/appointment.actions.js","utils/constants.js","utils/periods.js","components/AppointmentForm/AppointmentForm.component.js","redux/period/period.types.js","utils/PeriodType.js","components/PeriodSetter/PeriodSetter.component.js","redux/period/period.actions.js","components/Header/Header.component.js","redux/global-configuration/configuration.types.js","pages/Home/Home.component.js","redux/global-configuration/configuration.actions.js","App.js","reportWebVitals.js","utils/persistor.js","redux/appointment/appointment.utils.js","redux/appointment/appointment.reducer.js","redux/period/period.reducer.js","redux/global-configuration/configuration.reducer.js","redux/root_reducer.js","redux/store.js","index.js"],"names":["ADD_APPOINTMENTS","UPDATED_APPOINTMENT","DELETE_APPOINTMENT","ADD_JOB","UPDATE_JOB","DELETE_JOB","addAppointment","appointment","type","types","payload","APPOINTMENT_STATE_TO_DO","APPOINTMENT_STATE_COMPLETED","APPOINTMENT_STATE_CURRENT","APPOINTMENT_STATE_LATE","APPOINTMENT_STATE_DELAY","SCHEDULE_WORK_ONLY","SCHEDULE_FREE_TIME","SCHEDULE_FULL","JOB_NOT_STARTED","verifyAppointmentDisponibility","totalHoursNeeded","dueDate","currentAppointments","workStart","workEnd","freeStart","freeEnd","startDate","continuosPeriodPriorization","console","log","vacatedWorkPeriods","pickBestContinuosPeriods","getAllVacatedSpacesInPeriodUntilDueDate","currentDistributedHours","getTotalHoursOfPeriods","length","state","periods","currentlyRemainingHours","vacatedFreePeriods","distributedHoursInFreePeriod","mergedPeriods","mergeContinousAppointmentsInDifferentPeriods","error","periodStart","periodEnd","appointments","hoursNeeded","getAllPeriods","maxPeriodHours","allContinuousPeriods","currentTimestamp","clone","moment","add","startOf","set","currentPeriondEnd","currentPeriodStart","currentContinuousPeriod","start","end","hours","isSameOrBefore","push","Object","assign","find","isBetween","endDate","undefined","isSameOrAfter","get","mergedAppointment","indexesToIgnore","forEach","index","includes","appointmentToMergeIndex","findIndex","appointmentToCompare","isSame","diff","neededHours","sort","a","b","isBefore","remainingHours","currentPeriods","i","currentPeriod","hourDifference","subtract","reduce","sum","period","createPeriodObject","jobId","id","uuidv4","layout","labelCol","span","wrapperCol","AppointmentForm","props","formRef","React","createRef","isModalVisible","isFutherActionModalVisible","appointmentPreview","appointmentPeriods","appointmentSuccessful","this","setState","values","newJobId","format","appointmentsToCreate","map","newJob","name","price","description","totalHours","addJob","addAppointments","resetFormState","current","resetFields","lastChange","continuousPeriod","value","verifiedDisponibility","shouldDelay","getFieldsValue","extraAppointments","Math","min","max","finalAppointments","onFormSubmit","_","Promise","reject","resolve","enabledForm","allowFormToBeSubmitted","Fragment","onClick","title","visible","okText","onCancel","bind","onOk","validateFields","then","catch","info","okButtonProps","disabled","ref","initialValues","onFinish","onFieldsChange","previewPeriods","Item","label","rules","required","message","TextArea","formatter","replace","parser","precision","validator","validateDueDate","showTime","valuePropName","className","footer","onFutherActionSet","icon","FieldTimeOutlined","CoffeeOutlined","Component","connect","jobs","dispatch","SET_WORK_PERIOD","SET_FREE_PERIOD","WORK_PERIOD","FREE_PERIOD","RangePicker","TimePicker","PeriodSetter","periodType","PeriodType","setWorkPeriod","periodRange","setFreePeriod","getPeriodLabel","remember","ownProps","Header","SET_SHOW_SLEEP_PERIOD_CONFIG","HomeComponent","partitionForm","currentDay","toDate","currentViewName","appointmentUpdateInterval","isPartitionModalVisible","partitionAppointmentData","partitionHourValue","isRealocateModalVisible","realocatedState","job","isAppointmentTooltipVisible","appointmentTooltipMetadata","target","data","toggleVisibility","onAppointmentMetaChange","onUpdateAppointmentsState","clearTimeout","currentState","checkStateOfAppointment","updateAppointment","timeUntilNextHour","setTimeout","findJobOfAppointment","isAfter","input","isHoursBetween","TimeTableCell","checkStart","checkEnd","periodStartDate","periodEndDate","formatDate","AppointmentContent","style","height","toFixed","hour","minute","padding","appointmentData","SplitCellsOutlined","Grid","container","alignItems","item","xs","display","justifyContent","Lens","color","marginTop","ExclamationCircleOutlined","fontSize","AccessTime","onCompleteTheAppointment","CheckCircleOutlined","size","onDelayTheAppointment","onFinishTheAppointment","DoubleRightOutlined","updatedListOfAppointments","indexOnList","toCompare","associatedJob","shouldDeleteJob","deleteJob","updateJob","onUpdateJobStateOnAppointmentChange","allAppointments","jobAppointments","filter","newDistributedPeriods","onConfirmationOfRealocation","directState","newAppointments","indexOfAppointment","appoID","splice","app","deleteAppointment","children","Appointment","targetElement","parentElement","position","deleted","appo","previewedDeletionAppointments","changed","keys","changedId","newStartDate","newEndDate","modifiedAppointments","slice","newAppo","newAppointment","parseInt","e","FlexibleSpace","checked","showSleepPeriod","onChange","event","setShowSleepPeriod","Switcher","viewName","Root","isForward","onNaviagateDate","RightOutlined","LeftOutlined","DoubleLeftOutlined","direction","fastForward","restProps","classes","Paper","locale","currentDate","onCurrentDateChange","date","onCommitChanges","onAppointmentChangeCommited","displayName","cellDuration","intervalCount","startDayHour","calendarViewHourStart","endDayHour","calendarViewHourEnd","timeTableCellComponent","TableTimeCellRenderer","flexibleSpaceComponent","getToolbarFreeSpaceComponent","switcherComponent","getViewSwitcherComponent","rootComponent","getNavigatorRootComponent","navigationButtonComponent","getDateNavigatorComponent","appointmentComponent","getAppointmentComponet","appointmentContentComponent","getCustomAppointmentContent","showCloseButton","showDeleteButton","headerComponent","getHeaderComponent","appointmentMeta","onVisibilityChange","contentComponent","getTooltipContent","allowResize","onAppointmentPartitionSet","validateHourInserted","placeholder","prefix","suffix","config","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","replacer","toISOString","reviver","match","updateAppointmentOnList","appointmentList","toUpdateAppointment","updatedList","updateJobOnList","jobList","toUpdateJob","toDeleteIDs","indexesOnList","deleteJobAndAssociatedAppointments","toDeletejob","updatedJobList","updatedAppointmentList","appointmentOfJobID","indexOnAppointmentList","INITIAL_STATE","history","appointmentReducer","action","periodReducer","configTypes","configurationReducer","persistConfig","key","storage","transforms","createTransform","toDeshydrate","JSON","stringify","toRehydrate","parse","rootReducer","combineReducers","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.093f7290.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const ADD_APPOINTMENTS = 'ADD_APPOINTMENTS';\r\nexport const UPDATED_APPOINTMENT= 'UPDATED_APPOINTMENT';\r\nexport const DELETE_APPOINTMENT = 'DELETE_APPOINTMENT';\r\n\r\nexport const ADD_JOB = 'ADD_JOB';\r\nexport const UPDATE_JOB = 'UPDATE_JOB';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\n\r\nexport const ADD_TO_HISTORY = 'ADD_TO_HISTORY';","import * as types from './appointment.types';\r\n\r\nexport const addAppointment = appointment => ({\r\n    type: types.ADD_APPOINTMENTS,\r\n    payload: appointment\r\n});\r\n\r\nexport const updateAppointment = appointment => ({\r\n    type: types.UPDATED_APPOINTMENT,\r\n    payload: appointment\r\n})\r\n\r\nexport const deleteAppointment = id => ({\r\n    type: types.DELETE_APPOINTMENT,\r\n    payload: id\r\n})\r\n\r\nexport const addJob = job => ({\r\n    type: types.ADD_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const updateJob = job => ({\r\n    type: types.UPDATE_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const deleteJob = job => ({\r\n    type: types.DELETE_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const addToHistory = job => ({\r\n    type: types.ADD_TO_HISTORY,\r\n    payload: job\r\n})\r\n","export const SCHEDULER_DATE_FORMAT = 'YYYY-MM-DDTHH:mm'\r\n\r\nexport const APPOINTMENT_STATE_TO_DO = 'APPOINTMENT_STATE_TO_DO'\r\nexport const APPOINTMENT_STATE_COMPLETED = 'APPOINTMENT_STATE_COMPLETED'\r\nexport const APPOINTMENT_STATE_CURRENT = 'APPOINTMENT_STATE_CURRENT'\r\nexport const APPOINTMENT_STATE_LATE = 'APPOINTMENT_STATE_LATE'\r\nexport const APPOINTMENT_STATE_DELAY = 'APPOINTMENT_STATE_DELAY'\r\n\r\nexport const SCHEDULE_WORK_ONLY = 'SCHEDULE_WORK_ONLY';\r\nexport const SCHEDULE_FREE_TIME = 'SCHEDULE_FREE_TIME';\r\nexport const SCHEDULE_FULL = 'SCHEDULE_FULL';\r\n\r\nexport const JOB_NOT_STARTED = 'JOB_NOT_STARTED';\r\nexport const JOB_ON_GOING = 'JOB_ON_GOING';\r\nexport const JOB_COMPLETED = 'JOB_COMPLETED';","import { APPOINTMENT_STATE_TO_DO, SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from \"./constants\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport moment from 'moment';\r\n\r\nexport function verifyAppointmentDisponibility(totalHoursNeeded, dueDate, currentAppointments, [workStart, workEnd], [freeStart, freeEnd], startDate = null, continuosPeriodPriorization = false) {\r\n    if (!workStart || !workEnd) {\r\n        console.error(\"There was no work period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    console.log(\"continuosPeriodPriorization\", continuosPeriodPriorization)\r\n\r\n    const vacatedWorkPeriods = pickBestContinuosPeriods(getAllVacatedSpacesInPeriodUntilDueDate(\r\n        workStart,\r\n        workEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        totalHoursNeeded,\r\n        startDate,\r\n        continuosPeriodPriorization\r\n    ), totalHoursNeeded)\r\n\r\n    const currentDistributedHours = getTotalHoursOfPeriods(vacatedWorkPeriods)\r\n\r\n    //If we already allocated all the nescessary time in the work period, finish the function, otherwise allocate to free time\r\n    if (vacatedWorkPeriods.length != 0 && currentDistributedHours >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_WORK_ONLY,\r\n            periods: vacatedWorkPeriods\r\n        }\r\n    }\r\n\r\n    if (!freeStart || !freeEnd) {\r\n        console.error(\"It was nescessary to use free time, but there was no free period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    const currentlyRemainingHours = totalHoursNeeded - currentDistributedHours;\r\n\r\n    // console.log(currentlyRemainingHours);\r\n\r\n    const vacatedFreePeriods = pickBestContinuosPeriods(getAllVacatedSpacesInPeriodUntilDueDate(\r\n        freeStart,\r\n        freeEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        currentlyRemainingHours,\r\n        startDate,\r\n        continuosPeriodPriorization\r\n    ), currentlyRemainingHours)\r\n\r\n    // console.log(vacatedFreePeriods);\r\n\r\n    const distributedHoursInFreePeriod = getTotalHoursOfPeriods(vacatedFreePeriods);\r\n    const mergedPeriods = mergeContinousAppointmentsInDifferentPeriods([...vacatedWorkPeriods, ...vacatedFreePeriods])\r\n\r\n    if (vacatedFreePeriods.length != 0 && currentDistributedHours + distributedHoursInFreePeriod >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_FREE_TIME,\r\n            periods: mergedPeriods\r\n        }\r\n    }\r\n\r\n    return {\r\n        state: SCHEDULE_FULL,\r\n        periods: mergedPeriods\r\n    }\r\n}\r\n\r\nexport function getAllVacatedSpacesInPeriodUntilDueDate(periodStart, periodEnd, dueDate, appointments, hoursNeeded, startDate, getAllPeriods = false, maxPeriodHours = 0) {\r\n    const allContinuousPeriods = [];\r\n\r\n    // console.log(\"startDate\", startDate);\r\n    //Start with the period\r\n    let currentTimestamp = startDate ? startDate.clone() : moment().add(1, 'day').startOf('day').set('hour', periodStart);\r\n    //Check if the period end is on the same day as period start, or if the values of the hours wrap up to the next day\r\n    let currentPeriondEnd = periodEnd > periodStart\r\n        ? currentTimestamp.clone().set('hour', periodEnd)\r\n        : currentTimestamp.clone().add(1, 'day').set('hour', periodEnd);\r\n    //The period start is always in the same day, so the above conditional value is not necessary \r\n    let currentPeriodStart = currentTimestamp.clone().set('hour', periodStart)\r\n    // let currentPeriodStart = periodEnd > periodStart\r\n    //     ? currentTimestamp.clone().startOf('day').set('hour', periodStart)\r\n    //     : currentTimestamp.clone().subtract(1, 'day').startOf('day').set('hour', periodStart)\r\n\r\n    let currentContinuousPeriod = {\r\n        start: null,\r\n        end: null,\r\n        hours: 0\r\n    }\r\n\r\n    // console.log(\"periodStar\", currentPeriodStart);\r\n    // console.log(\"periodEnd\", currentPeriondEnd)\r\n\r\n    // console.log('currentTimestamp', currentTimestamp);\r\n    // console.log('dueDate', dueDate.format(\"DD/MM/YYYY HH:mm\"));\r\n\r\n    while (currentTimestamp.isSameOrBefore(dueDate)) {\r\n        // console.log(currentTimestamp.format(\"DD/MM HH:mm\"))\r\n        // console.log('currentContinuousPeriod', Object.assign({}, currentContinuousPeriod))\r\n        /*  Check if the periods already obtained already are enough for the appointment, so theres no \r\n            to continue the while loop*/\r\n        if (maxPeriodHours !== 0 && currentContinuousPeriod.start && currentContinuousPeriod.hours + 1 >= maxPeriodHours) {\r\n\r\n            currentContinuousPeriod.end = currentTimestamp.clone();\r\n            currentContinuousPeriod.hours++;\r\n\r\n            allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n            currentContinuousPeriod = {\r\n                start: null,\r\n                end: null,\r\n                hours: 0\r\n            }\r\n        }\r\n\r\n        if (!getAllPeriods && hoursNeeded != 0) {\r\n            if (currentContinuousPeriod.start) {\r\n                if (getTotalHoursOfPeriods([...allContinuousPeriods, { hours: 1 + currentContinuousPeriod.hours }]) >= hoursNeeded) {\r\n\r\n                    // console.log(\"SKipping due to reached hours\");\r\n                    currentContinuousPeriod.end = currentTimestamp.clone();\r\n                    currentContinuousPeriod.hours++;\r\n\r\n                    //Add the finished continuous period to the array.\r\n                    allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                    currentContinuousPeriod = {\r\n                        start: null,\r\n                        end: null,\r\n                        hours: 0\r\n                    }\r\n                    break;\r\n                }\r\n            } else if (getTotalHoursOfPeriods(allContinuousPeriods) >= hoursNeeded) {\r\n                // console.log(\"SKipping due to total reached hours\");\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Try to find an appointment that contains the current iterated hour.\r\n        const appointment = appointments.find(appointment => {\r\n            //Check if the current timestamp is between this appointment period\r\n            if (currentTimestamp.isBetween(appointment.startDate, appointment.endDate, undefined, \"[)\")) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        })\r\n\r\n        //If there's already an appointment in the current timestamp iterated, skip to the end of the appointment\r\n        if (appointment) {\r\n            // console.log(\"SKipping due to conflicting appointment\");\r\n            //If there's an current period that has been stopped thanks to this appointment, save in the array.\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            if (appointment.endDate.isSameOrAfter(currentPeriondEnd)) {\r\n                currentPeriondEnd = currentPeriondEnd.add(1, 'day');\r\n                currentPeriodStart = currentPeriodStart.add(1, 'day');\r\n                currentTimestamp = currentPeriodStart.clone();\r\n            } else {\r\n                currentTimestamp = currentTimestamp.set('hour', appointment.endDate.get('hour'));\r\n            }\r\n            continue;\r\n        }\r\n\r\n        //If the current timestamp is beyond or just reached the dueDate\r\n        // console.log('dueDate', dueDate.format('DD/MM HH:mm'))\r\n        // console.log('currentTimestamp', currentTimestamp.format('DD/MM HH:mm'))\r\n        if (currentTimestamp.isSameOrAfter(dueDate)) {\r\n            // console.log(\"SKipping by due date reached\");\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        //If the current hour is the final hour of the period, end the continuous period\r\n        if (currentTimestamp.isSameOrAfter(currentPeriondEnd)) {\r\n            // console.log(\"SKipping by period end\");\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            currentPeriondEnd = currentPeriondEnd.add(1, 'day');\r\n            currentPeriodStart = currentPeriodStart.add(1, 'day');\r\n            currentTimestamp = currentPeriodStart.clone();\r\n            continue;\r\n        }\r\n\r\n\r\n        //If there's no appointment, this is a free hour to add to the current continuous period\r\n        if (currentContinuousPeriod.start) {\r\n            currentContinuousPeriod.end = currentTimestamp.clone();\r\n            currentContinuousPeriod.hours++;\r\n        } else {\r\n            currentContinuousPeriod.start = currentTimestamp.clone();\r\n        }\r\n\r\n        currentTimestamp = currentTimestamp.add(1, 'hour');\r\n        // console.log(\"Reached the end of loop\")\r\n    }\r\n\r\n    return allContinuousPeriods;\r\n}\r\n\r\nexport function mergeContinousAppointmentsInDifferentPeriods(appointments) {\r\n    const mergedAppointment = [];\r\n    const indexesToIgnore = [];\r\n\r\n    appointments.forEach((appointment, index) => {\r\n        if (indexesToIgnore.includes(index)) {\r\n            return;\r\n        }\r\n\r\n        const appointmentToMergeIndex = appointments.findIndex(appointmentToCompare => appointment.end.isSame(appointmentToCompare.start));\r\n        if (appointmentToMergeIndex !== -1) {\r\n            indexesToIgnore.push(appointmentToMergeIndex);\r\n\r\n            appointment.end = appointments[appointmentToMergeIndex].end;\r\n            appointment.hours = appointment.end.diff(appointment.start, 'hours');\r\n        }\r\n\r\n        mergedAppointment.push(appointment);\r\n    })\r\n\r\n    return mergedAppointment;\r\n}\r\n\r\nexport function pickBestContinuosPeriods(periods, neededHours) {\r\n    //If the periods are not, or just barely, enough to contain the event, just return the array as it is\r\n    if (getTotalHoursOfPeriods(periods) <= neededHours) {\r\n        return periods;\r\n    }\r\n\r\n    //Sort the periods by hours and then by earliest\r\n    periods.sort((a, b) =>\r\n        (a.hours > b.hours) ? -1 : (b.hours > a.hours) ? 1 : a.start.isBefore(b.start) ? -1 : a.start.isBefore(b.start) ? 1 : 0\r\n    );\r\n\r\n    let remainingHours = neededHours;\r\n    const currentPeriods = []\r\n\r\n    for (let i = 0; i < periods.length; i++) {\r\n        const currentPeriod = periods[i];\r\n        if (currentPeriod === remainingHours) {\r\n            currentPeriods.push(currentPeriod);\r\n            break;\r\n        }\r\n        else if (currentPeriod.hours > remainingHours) {\r\n            //Remove from the period the extra hours and put it in the array of periods.\r\n            const hourDifference = currentPeriod.hours - remainingHours;\r\n\r\n            currentPeriod.hours = currentPeriod.hours - hourDifference;\r\n            currentPeriod.end = currentPeriod.end.subtract(hourDifference, 'hours');\r\n            currentPeriods.push(currentPeriod);\r\n\r\n            break;\r\n        } else {\r\n            currentPeriods.push(currentPeriod);\r\n            remainingHours -= currentPeriod.hours;\r\n        }\r\n    }\r\n\r\n    return currentPeriods;\r\n}\r\n\r\nexport function getTotalHoursOfPeriods(periods) {\r\n    return periods.reduce((sum, period) => ({ hours: sum.hours + period.hours }), { hours: 0 }).hours;\r\n}\r\n\r\nexport function createPeriodObject({ start, end, hours }, jobId) {\r\n    return {\r\n        startDate: start,\r\n        endDate: end,\r\n        state: APPOINTMENT_STATE_TO_DO,\r\n        hours: hours,\r\n        id: 'job_' + jobId + '_app_' + uuidv4(),\r\n        jobId: jobId\r\n    }\r\n}\r\n","import { Input, Form, Modal, InputNumber, DatePicker, Button, Checkbox, Tooltip } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addAppointment, addJob } from '../../redux/appointment/appointment.actions';\r\nimport moment from 'moment';\r\n\r\nimport './AppointmentForm.styles.scss';\r\nimport { JOB_NOT_STARTED, SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from '../../utils/constants';\r\nimport { CoffeeOutlined, FieldTimeOutlined } from '@ant-design/icons';\r\nimport { createPeriodObject, getAllVacatedSpacesInPeriodUntilDueDate, getTotalHoursOfPeriods, mergeContinousAppointmentsInDifferentPeriods, verifyAppointmentDisponibility } from '../../utils/periods';\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nclass AppointmentForm extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false\r\n        }\r\n    }\r\n\r\n    resetFormState() {\r\n        this.setState({\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false\r\n        })\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        const newJobId = moment().format('x');\r\n\r\n        const appointmentsToCreate = this.state.appointmentPeriods.map((period) => createPeriodObject(period, newJobId))\r\n\r\n        const newJob = {\r\n            id: newJobId,\r\n            name: values.name,\r\n            appointments: appointmentsToCreate.map(appointment => appointment.id),\r\n            price: values.price,\r\n            description: values.description,\r\n            dueDate: values.dueDate.startOf('hour'),\r\n            totalHours: values.hours,\r\n            state: JOB_NOT_STARTED\r\n        }\r\n\r\n        this.props.addJob(newJob);\r\n        this.props.addAppointments(appointmentsToCreate);\r\n\r\n        this.resetFormState();\r\n        this.formRef.current.resetFields();\r\n    }\r\n\r\n    previewPeriods([lastChange], [_, __, ___, hours, dueDate, continuousPeriod]) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (lastChange.name.includes('hours') || lastChange.name.includes('dueDate')) {\r\n            if (hours.value && dueDate.value) {\r\n                const verifiedDisponibility = verifyAppointmentDisponibility(hours.value, dueDate.value.startOf('hour'), appointments, [workStart, workEnd], [freeStart, freeEnd], null, continuousPeriod.value);\r\n\r\n                if (!verifiedDisponibility) {\r\n                    console.error(\"Error on saving the periods\")\r\n                    return;\r\n                }\r\n\r\n                switch (verifiedDisponibility.state) {\r\n                    case SCHEDULE_WORK_ONLY:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job can be sucessfully distributed in the work period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FREE_TIME:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job will invade some of your free time period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FULL:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job could not be distributed into your work/free time, further action will be required on submit',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: false\r\n                        })\r\n                        break;\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    appointmentPreview: '',\r\n                    appointmentPeriods: []\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onFutherActionSet(shouldDelay) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        const { dueDate, hours, continuousPeriod } = this.formRef.current.getFieldsValue();\r\n\r\n        const extraAppointments = getAllVacatedSpacesInPeriodUntilDueDate(\r\n            shouldDelay ? Math.min(workStart, freeStart) : Math.max(workEnd, freeEnd),\r\n            shouldDelay ? Math.max(workEnd, freeEnd) : Math.min(workStart, freeStart),\r\n            shouldDelay ? dueDate.set('year', 9999).startOf('hour') : dueDate.startOf('hour'),\r\n            [...appointments, ...this.state.appointmentPeriods],\r\n            hours - getTotalHoursOfPeriods(this.state.appointmentPeriods),\r\n            shouldDelay ? dueDate.startOf('hour') : moment().startOf('day').set('hour', Math.max(workEnd, freeEnd)),\r\n            continuousPeriod\r\n        )\r\n\r\n        const finalAppointments = mergeContinousAppointmentsInDifferentPeriods([...extraAppointments, ...this.state.appointmentPeriods]);\r\n\r\n        this.setState({\r\n            appointmentPeriods: finalAppointments,\r\n            appointmentSuccessful: true,\r\n            appointmentPreview: '',\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false\r\n        }, () => this.onFormSubmit(this.formRef.current.getFieldsValue()))\r\n    }\r\n\r\n    allowFormToBeSubmitted() {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (workStart && workEnd && freeStart && freeEnd) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    validateDueDate(_, dueDate) {\r\n        if (moment().isSameOrAfter(dueDate)) {\r\n            return Promise.reject('The due date needs to be after now!')\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    render() {\r\n        const enabledForm = this.allowFormToBeSubmitted();\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Button type=\"primary\" onClick={() => this.setState({ isModalVisible: true })}>Add Event</Button>\r\n\r\n                <Modal title=\"Add Event\"\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={this.resetFormState.bind(this)}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                if (this.state.appointmentSuccessful) {\r\n                                    this.onFormSubmit(values);\r\n                                } else {\r\n                                    this.setState({ isFutherActionModalVisible: true })\r\n                                }\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                    okButtonProps={{ disabled: !enabledForm }}\r\n                >\r\n\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"eventForm\"\r\n                        initialValues={{ continuousPeriod: true }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                        onFieldsChange={this.previewPeriods.bind(this)}\r\n\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            rules={[{ required: true, message: 'The event name is required' }]}\r\n                        >\r\n                            <Input disabled={!enabledForm} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Description\"\r\n                            name=\"description\"\r\n                        >\r\n                            <Input.TextArea disabled={!enabledForm} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Price\"\r\n                            name=\"price\"\r\n                        >\r\n                            <InputNumber\r\n                                formatter={price => `$ ${price}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                parser={price => price.replace(/\\$\\s?|(,*)/g, '')}\r\n                                min={0}\r\n                                precision={2}\r\n                                disabled={!enabledForm}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Estimated Hours\"\r\n                            name=\"hours\"\r\n                            rules={[{ required: true, message: 'The ETA is required to allow the scheduler to distribute time' }]}\r\n                        >\r\n                            <InputNumber\r\n                                disabled={!enabledForm}\r\n                                min={0} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Due Date\"\r\n                            name=\"dueDate\"\r\n                            rules={[{ required: true, message: 'The dude date is required' }, { validator: this.validateDueDate }]}\r\n                        >\r\n                            <DatePicker disabled={!enabledForm} format={'DD/MM/YYYY HH:00'} showTime />\r\n                        </Form.Item >\r\n\r\n                        <Tooltip title=\"Whether the Scheduler should focus on finding continuous periods or just distribute the event in the open periods avaliable\">\r\n                            <Form.Item\r\n                                label=\"Continuous Priority\"\r\n                                valuePropName='checked'\r\n                                name=\"continuousPeriod\">\r\n                                <Checkbox disabled={!enabledForm}></Checkbox>\r\n                            </Form.Item>\r\n                        </Tooltip>\r\n\r\n\r\n                        <span className=\"message\">{this.state.appointmentPreview}</span>\r\n                        {\r\n                            !enabledForm ?\r\n                                <span className=\"message\">\r\n                                    Please set the work and free period before attemping to add events to your schedule\r\n                                </span> : null\r\n                        }\r\n\r\n                    </Form>\r\n\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.isFutherActionModalVisible}\r\n                    footer={[\r\n                        <Tooltip key=\"delay\" title=\"Delay\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(true)} icon={<FieldTimeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Tooltip key=\"overwrite_sleep\" title=\"Overwrite Sleep\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(false)} icon={<CoffeeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Button key=\"back\" onClick={() => this.setState({ isFutherActionModalVisible: false })}>\r\n                            Cancel\r\n                        </Button>\r\n                    ]}>\r\n                    <p>The appointment submitted can't be concluded during your work and free period, what should the scheduler do to allow for this job to be scheduled?</p>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        addJob: (payload) => dispatch(addJob(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppointmentForm);","export const SET_WORK_PERIOD = 'SET_WORK_PERIOD';\r\nexport const SET_FREE_PERIOD = 'SET_FREE_PERIOD';","export const WORK_PERIOD = 'WORK_PERIOD';\r\nexport const FREE_PERIOD = 'FREE_PERIOD';\r\nexport const SLEEP_PERIOD = 'SLEEP_PERIOD';","import { Button, Form, Modal, TimePicker } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setFreePeriod, setWorkPeriod } from '../../redux/period/period.actions';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\nimport moment from 'moment';\r\n\r\nimport './PeriodSetter.styles.scss';\r\n\r\nconst { RangePicker } = TimePicker;\r\n\r\nclass PeriodSetter extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false\r\n        }\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        switch (this.props.periodType) {\r\n            case PeriodType.WORK_PERIOD:\r\n                this.props.setWorkPeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n            case PeriodType.FREE_PERIOD:\r\n                this.props.setFreePeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n        }\r\n\r\n        this.setState({ isModalVisible: false})\r\n    }\r\n\r\n    getPeriodLabel(periodType) {\r\n        switch (periodType) {\r\n            case PeriodType.FREE_PERIOD:\r\n                return 'Free';\r\n            case PeriodType.WORK_PERIOD:\r\n                return 'Work';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button onClick={() => this.setState({ isModalVisible: true })}>{this.getPeriodLabel(this.props.periodType)} Period</Button>\r\n\r\n                <Modal\r\n                    title={`${this.getPeriodLabel(this.props.periodType)} Period`}\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={() => this.setState({ isModalVisible: false })}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                this.onFormSubmit(values);\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                >\r\n                    <Form\r\n                        ref={this.formRef}\r\n                        name=\"periodForm\"\r\n                        initialValues={{\r\n                            periodRange: [\r\n                                moment().startOf('day').set('hours', this.props.start),\r\n                                moment().startOf('day').set('hours', this.props.end)\r\n                            ],\r\n                            remember: true\r\n                        }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"periodRange\"\r\n                            rules={[{ required: true, message: 'The range of the period is required!' }]}\r\n                        >\r\n                            <RangePicker format={\"HH:00\"} />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    switch (ownProps.periodType) {\r\n        case PeriodType.WORK_PERIOD:\r\n            return {\r\n                start: state.period.workStart,\r\n                end: state.period.workEnd\r\n            }\r\n        case PeriodType.FREE_PERIOD:\r\n            return {\r\n                start: state.period.freeStart,\r\n                end: state.period.freeEnd\r\n            }\r\n        default:\r\n            return {\r\n\r\n            }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWorkPeriod: (payload) => dispatch(setWorkPeriod(payload)),\r\n        setFreePeriod: (payload) => dispatch(setFreePeriod(payload))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PeriodSetter);","import * as types from './period.types';\r\n\r\nexport const setWorkPeriod = timeRange => ({\r\n    type: types.SET_WORK_PERIOD,\r\n    payload: timeRange\r\n});\r\n\r\nexport const setFreePeriod = timeRange => ({\r\n    type: types.SET_FREE_PERIOD,\r\n    payload: timeRange\r\n});","import React from 'react';\r\nimport AppointmentForm from '../AppointmentForm/AppointmentForm.component';\r\nimport PeriodSetter from '../PeriodSetter/PeriodSetter.component';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\n\r\nimport './Header.styles.scss';\r\n\r\nexport class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    onFormSubmit() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h2>Work Scheduler</h2>\r\n\r\n                <div className=\"button-group\">\r\n                    <PeriodSetter periodType={PeriodType.WORK_PERIOD} />\r\n                    <PeriodSetter periodType={PeriodType.FREE_PERIOD} />\r\n\r\n                    <AppointmentForm />\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}","export const SET_SHOW_SLEEP_PERIOD_CONFIG = 'SET_SHOW_SLEEP_PERIOD_CONFIG';","import React from 'react';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { EditingState, IntegratedEditing, ViewState } from '@devexpress/dx-react-scheduler';\r\nimport {\r\n    Scheduler,\r\n    DayView,\r\n    Appointments,\r\n    Toolbar,\r\n    ViewSwitcher,\r\n    MonthView,\r\n    AppointmentTooltip,\r\n    DateNavigator,\r\n    ConfirmationDialog,\r\n    DragDropProvider\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\nimport { Header } from '../../components/Header/Header.component';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { APPOINTMENT_STATE_COMPLETED, APPOINTMENT_STATE_CURRENT, APPOINTMENT_STATE_DELAY, APPOINTMENT_STATE_LATE, APPOINTMENT_STATE_TO_DO, JOB_COMPLETED, JOB_NOT_STARTED, JOB_ON_GOING, SCHEDULE_FREE_TIME, SCHEDULE_FULL } from '../../utils/constants';\r\nimport { FieldTimeOutlined, DoubleRightOutlined, CheckCircleOutlined, ExclamationCircleOutlined, DoubleLeftOutlined, LeftOutlined, RightOutlined, SplitCellsOutlined } from '@ant-design/icons';\r\nimport { addAppointment, deleteAppointment, deleteJob, updateAppointment, updateJob } from '../../redux/appointment/appointment.actions';\r\nimport { createPeriodObject, getAllVacatedSpacesInPeriodUntilDueDate, verifyAppointmentDisponibility } from '../../utils/periods';\r\nimport { Button, Form, Input } from 'antd';\r\n\r\nimport './Home.styles.scss';\r\nimport { Button as MaterialButton, Grid } from '@material-ui/core';\r\nimport { AccessTime, Lens } from '@material-ui/icons';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport Checkbox from 'antd/lib/checkbox/Checkbox';\r\nimport { setShowSleepConfiguration } from '../../redux/global-configuration/configuration.actions';\r\n\r\nclass HomeComponent extends React.Component {\r\n    partitionForm = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentDay: moment().startOf('week').toDate(),\r\n            currentViewName: 'Day',\r\n            appointmentUpdateInterval: null,\r\n            isPartitionModalVisible: false,\r\n            partitionAppointmentData: null,\r\n            partitionHourValue: '',\r\n            isRealocateModalVisible: false,\r\n            realocatedState: {\r\n                state: '',\r\n                periods: [],\r\n                appointment: null,\r\n                job: null\r\n            },\r\n            isAppointmentTooltipVisible: false,\r\n            appointmentTooltipMetadata: {\r\n                target: null,\r\n                data: {},\r\n            },\r\n\r\n        }\r\n\r\n        this.toggleVisibility = () => {\r\n            this.setState({ isAppointmentTooltipVisible: !this.state.isAppointmentTooltipVisible });\r\n        };\r\n\r\n        this.onAppointmentMetaChange = ({ data, target } = { data: {}, target: null }) => {\r\n            this.setState({ appointmentTooltipMetadata: { data, target } });\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onUpdateAppointmentsState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.appointmentUpdateInterval) {\r\n            clearTimeout(this.state.appointmentUpdateInterval)\r\n            this.setState({ appointmentUpdateInterval: null })\r\n        }\r\n    }\r\n\r\n    onUpdateAppointmentsState() {\r\n        const { appointments } = this.props;\r\n\r\n        appointments.forEach(appointment => {\r\n            const currentState = this.checkStateOfAppointment(appointment)\r\n            if (appointment.state !== currentState) {\r\n\r\n                console.log(\"New state\" + currentState + \"for appoitnment\" + appointment.id);\r\n\r\n                appointment.state = currentState;\r\n\r\n                this.props.updateAppointment(appointment);\r\n            }\r\n        })\r\n\r\n        const timeUntilNextHour = moment().add(1, 'hour').startOf('hour').add(1, 'second').diff(moment(), 'milliseconds');\r\n\r\n        this.setState({\r\n            appointmentUpdateInterval: setTimeout(() => this.onUpdateAppointmentsState(), timeUntilNextHour)\r\n        })\r\n    }\r\n\r\n    checkStateOfAppointment(appointment) {\r\n        //Once completed, the state is not supposed to be changed anymore\r\n        if (appointment.state === APPOINTMENT_STATE_COMPLETED) {\r\n            return APPOINTMENT_STATE_COMPLETED;\r\n        }\r\n\r\n        const job = this.findJobOfAppointment(appointment);\r\n        if (appointment.startDate.isAfter(job.dueDate)) {\r\n            return APPOINTMENT_STATE_DELAY\r\n        }\r\n\r\n        //If the appointment has ended before the current date, then it's late\r\n        if (appointment.endDate.isBefore(moment())) {\r\n            return APPOINTMENT_STATE_LATE;\r\n        }\r\n\r\n        //If the appointment start is later than now, then it is still to do\r\n        if (appointment.startDate.isAfter(moment())) {\r\n            return APPOINTMENT_STATE_TO_DO;\r\n        }\r\n\r\n        //Otherwise, the appointment is occuring currrently\r\n        return APPOINTMENT_STATE_CURRENT;\r\n    }\r\n\r\n    TableTimeCellRenderer(input) {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n\r\n        const startDate = moment(input.startDate);\r\n        const endDate = moment(input.endDate);\r\n\r\n        let className = \"sleep-period\";\r\n\r\n        if (this.isHoursBetween(workStart, workEnd, startDate, endDate)) {\r\n            className = \"work-period\"\r\n        } else if (this.isHoursBetween(freeStart, freeEnd, startDate, endDate)) {\r\n            className = \"free-period\"\r\n        }\r\n\r\n        return <DayView.TimeTableCell {...input} className={className}></DayView.TimeTableCell>\r\n    }\r\n\r\n    isHoursBetween(periodStart, periodEnd, checkStart, checkEnd) {\r\n        const periodStartDate = checkStart.clone().startOf('day').set('hour', periodStart);\r\n        const periodEndDate = checkEnd.clone().startOf('day').set('hour', periodEnd);\r\n\r\n        return checkStart.isBetween(periodStartDate, periodEndDate, undefined, \"[)\") &&\r\n            checkEnd.isBetween(periodStartDate, periodEndDate, undefined, \"(]\")\r\n\r\n    }\r\n\r\n    getCustomAppointmentContent(props) {\r\n        const { data, formatDate } = props;\r\n\r\n        const job = this.findJobOfAppointment(data);\r\n\r\n        return (\r\n            <Appointments.AppointmentContent {...props} style={{ height: '100%' }}>\r\n                <div className=\"app-appointment-content\">\r\n                    <div className=\"title\">\r\n                        {job.name}\r\n                    </div>\r\n                    {\r\n                        job.price\r\n                            ? <div className=\"value-wrapper\">$ {job.price.toFixed(2)}</div>\r\n                            : null\r\n                    }\r\n                    <span>Due to: {job.dueDate.format('DD/MM/YYYY HH:00')}</span>\r\n                    <div className=\"hour-wrapper\">\r\n                        <span>{formatDate(data.startDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                        <span style={{ padding: \"0px 3px\" }}> - </span>\r\n                        <span>{formatDate(data.endDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                    </div>\r\n                </div>\r\n            </Appointments.AppointmentContent>\r\n        )\r\n    }\r\n\r\n    getTooltipContent(props) {\r\n        const { appointmentData, formatDate } = props;\r\n\r\n        const job = this.findJobOfAppointment(appointmentData);\r\n        if (!job) { return null; }\r\n\r\n        <SplitCellsOutlined />\r\n\r\n        return (\r\n            <div className=\"tooltip-content\">\r\n                <Grid container alignItems=\"flex-start\" className=\"meta\">\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center' }} >\r\n                        <Lens className=\"lens\" style={{\r\n                            color: appointmentData.state === APPOINTMENT_STATE_TO_DO\r\n                                ? '#1890ff'\r\n                                : appointmentData.state === APPOINTMENT_STATE_COMPLETED\r\n                                    ? '#a4b1db'\r\n                                    : appointmentData.state === APPOINTMENT_STATE_CURRENT\r\n                                        ? 'green'\r\n                                        : appointmentData.state === APPOINTMENT_STATE_LATE\r\n                                            ? 'orange'\r\n                                            : 'crimson'\r\n                        }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <div className=\"title\" >\r\n                            {job.name}\r\n                        </div>\r\n                        <div >\r\n                            {appointmentData.startDate.format('dddd, DD MMMM YYYY')}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" style={{ marginTop: '10px' }}>\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center', color: 'gray' }} >\r\n                        <ExclamationCircleOutlined style={{ fontSize: '24px' }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <div >\r\n                            {`${formatDate(appointmentData.startDate, { hour: 'numeric', minute: 'numeric' })}\r\n                            - ${formatDate(appointmentData.endDate, { hour: 'numeric', minute: 'numeric' })}`}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container alignItems=\"center\" >\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center', color: 'gray' }} >\r\n                        <AccessTime style={{ fontSize: '24px' }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <span>Due at {job.dueDate.format('dddd, DD MMMM YYYY HH:00')}</span>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {\r\n                    job.description\r\n                        ?\r\n                        <p className=\"description\">\r\n                            {job.description}\r\n                        </p>\r\n                        :\r\n                        null\r\n                }\r\n\r\n\r\n                <div className=\"tooltip-wrapper\">\r\n                    <Button\r\n                        disabled={appointmentData.state === APPOINTMENT_STATE_COMPLETED}\r\n                        onClick={() => this.onCompleteTheAppointment(appointmentData)}\r\n                        icon={<CheckCircleOutlined />}\r\n                        size={'large'}>\r\n                        Complete\r\n                        </Button>\r\n                    <Button\r\n                        onClick={() => this.onDelayTheAppointment(appointmentData)}\r\n                        icon={<FieldTimeOutlined />}\r\n                        size={'large'}>\r\n                        Delay\r\n                        </Button>\r\n                    <Button\r\n                        onClick={() => this.onFinishTheAppointment(appointmentData)}\r\n                        icon={<DoubleRightOutlined />}\r\n                        size={'large'}>\r\n                        Finish\r\n                        </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onCompleteTheAppointment(appointment) {\r\n        const { appointments, jobs } = this.props;\r\n\r\n        const updatedListOfAppointments = [...appointments];\r\n        const indexOnList = updatedListOfAppointments.findIndex(toCompare => toCompare.id === appointment.id);\r\n\r\n        if (indexOnList === -1) {\r\n            console.error(\"Unknown appointment was completed!\");\r\n            return;\r\n        }\r\n\r\n        updatedListOfAppointments[indexOnList].state = APPOINTMENT_STATE_COMPLETED;\r\n        const associatedJob = jobs.find(job => job.id === appointment.jobId);\r\n\r\n        //Check that with the conclusion of this appointment, the job was completed entirely\r\n        if (this.shouldDeleteJob(associatedJob, updatedListOfAppointments)) {\r\n            this.props.deleteJob(associatedJob);\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        } else {\r\n            this.props.updateAppointment(updatedListOfAppointments[indexOnList]);\r\n            this.props.updateJob(this.onUpdateJobStateOnAppointmentChange(associatedJob, updatedListOfAppointments));\r\n        }\r\n    }\r\n\r\n    onUpdateJobStateOnAppointmentChange(job, allAppointments) {\r\n        const jobAppointments = allAppointments.filter(appointment => job.appointments.includes(appointment.id));\r\n\r\n        //If no appointment is still in the state to do, means that the job is fully completed and should be removed\r\n        if (jobAppointments.filter(appointment =>\r\n            appointment.state === APPOINTMENT_STATE_TO_DO ||\r\n            appointment.state === APPOINTMENT_STATE_CURRENT ||\r\n            appointment.state === APPOINTMENT_STATE_DELAY ||\r\n            appointment.state === APPOINTMENT_STATE_LATE).length === 0) {\r\n            job.state = JOB_COMPLETED\r\n            //Else if not a single appointment has started, that means the job is still on hold\r\n        } else if (jobAppointments.filter(appointment => appointment.state === APPOINTMENT_STATE_COMPLETED).length === 0) {\r\n            job.state = JOB_NOT_STARTED\r\n        } else {\r\n            job.state = JOB_ON_GOING\r\n        }\r\n\r\n        return job;\r\n    }\r\n\r\n    shouldDeleteJob(job, allAppointments) {\r\n        const jobAppointments = allAppointments.filter(appointment => job.appointments.includes(appointment.id));\r\n\r\n        return jobAppointments.filter(appointment =>\r\n            appointment.state === APPOINTMENT_STATE_TO_DO ||\r\n            appointment.state === APPOINTMENT_STATE_CURRENT ||\r\n            appointment.state === APPOINTMENT_STATE_DELAY ||\r\n            appointment.state === APPOINTMENT_STATE_LATE\r\n        ).length === 0;\r\n    }\r\n\r\n    onDelayTheAppointment(appointment) {\r\n        const { workStart, workEnd, freeStart, freeEnd, appointments } = this.props;\r\n\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        const newDistributedPeriods = verifyAppointmentDisponibility(\r\n            appointment.hours,\r\n            job.dueDate,\r\n            appointments,\r\n            [workStart, workEnd],\r\n            [freeStart, freeEnd],\r\n            appointment.endDate\r\n        );\r\n\r\n        if (newDistributedPeriods.state === SCHEDULE_FREE_TIME || newDistributedPeriods === SCHEDULE_FULL) {\r\n            this.setState({\r\n                realocatedState: { ...newDistributedPeriods, appointment, job },\r\n                isRealocateModalVisible: true\r\n            })\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        } else {\r\n            this.onConfirmationOfRealocation({ ...newDistributedPeriods, appointment, job })\r\n        }\r\n    }\r\n\r\n    onConfirmationOfRealocation(directState = null) {\r\n        const { periods, job, appointment } = directState || this.state.realocatedState;\r\n\r\n        const newAppointments = periods.map(period => createPeriodObject(period, job.id))\r\n\r\n        //Removed old appointment and insert new ids from the job object\r\n        const indexOfAppointment = job.appointments.findIndex(appoID => appoID === appointment.id);\r\n        job.appointments.splice(indexOfAppointment, 1, ...newAppointments.map(app => app.id))\r\n\r\n        this.props.updateJob(job);\r\n        this.props.deleteAppointment([appointment.id]);\r\n        this.props.addAppointments(newAppointments);\r\n\r\n        this.setState({\r\n            isRealocateModalVisible: false,\r\n            realocatedState: null\r\n        })\r\n    }\r\n\r\n    onFinishTheAppointment(appointment) {\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        this.props.deleteJob(job);\r\n\r\n        this.toggleVisibility();\r\n        this.onAppointmentMetaChange();\r\n    }\r\n\r\n    getAppointmentComponet(props) {\r\n        const { children, style, data } = props;\r\n\r\n        let className;\r\n\r\n        if (data.state === APPOINTMENT_STATE_COMPLETED) {\r\n            className = \"appointment-done\"\r\n        }\r\n        else if (data.state === APPOINTMENT_STATE_CURRENT) {\r\n            className = \"appointment-active\";\r\n        } else if (data.state === APPOINTMENT_STATE_LATE) {\r\n            className = \"appointment-late\"\r\n        } else if (data.state === APPOINTMENT_STATE_DELAY) {\r\n            className = \"appointment-delay\"\r\n        }\r\n\r\n        return (\r\n            <Appointments.Appointment\r\n                {...props}\r\n                className={className}\r\n                style={{\r\n                    ...style\r\n                }}\r\n                onClick={({ target, data }) => {\r\n                    let targetElement = target;\r\n\r\n                    while (true) {\r\n                        targetElement = targetElement.parentElement;\r\n                        if (targetElement.style.position === 'absolute') { break; }\r\n                    }\r\n\r\n                    this.onAppointmentMetaChange({ target: targetElement, data });\r\n                    this.toggleVisibility();\r\n                }}\r\n            >\r\n                {children}\r\n            </Appointments.Appointment>\r\n        )\r\n    }\r\n\r\n    findJobOfAppointment(appointment, index = false) {\r\n        return index\r\n            ?\r\n            this.props.jobs.findIndex(job => job.id === appointment.jobId)\r\n            :\r\n            this.props.jobs.find(job => job.id === appointment.jobId);\r\n    }\r\n\r\n    onAppointmentChangeCommited(props) {\r\n        const { appointments } = this.props;\r\n\r\n        if (props.deleted) {\r\n            const appointment = appointments.find(appo => appo.id === props.deleted);\r\n            const job = this.findJobOfAppointment(appointment);\r\n\r\n            const previewedDeletionAppointments = [...appointments];\r\n            previewedDeletionAppointments.splice(previewedDeletionAppointments.findIndex(appo => appo.id === props.deleted), 1)\r\n\r\n            if (this.shouldDeleteJob(job, previewedDeletionAppointments)) {\r\n                this.props.deleteJob(job);\r\n            } else {\r\n                job.appointments.splice(job.appointments.findIndex(appo => appo === props.deleted), 1);\r\n\r\n                this.props.deleteAppointment([props.deleted]);\r\n                this.props.updateJob(job);\r\n            }\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        }\r\n\r\n        if (props.changed) {\r\n            Object.keys(props.changed).forEach(changedId => {\r\n                const { endDate, startDate } = props.changed[changedId];\r\n\r\n                const appointment = appointments.find(appo => appo.id === changedId);\r\n\r\n                let newStartDate = moment(startDate);\r\n                let newEndDate = moment(endDate);\r\n\r\n                if (newEndDate.diff(newStartDate, 'hours') === 24) {\r\n                    newStartDate.set('hour', this.props.workStart);\r\n                    newEndDate = newStartDate.clone().set('hour', this.props.workStart + appointment.hours);\r\n                }\r\n\r\n                appointment.startDate = newStartDate;\r\n                appointment.endDate = newEndDate;\r\n                appointment.state = this.checkStateOfAppointment(appointment)\r\n\r\n                this.props.updateAppointment(appointment);\r\n            })\r\n        }\r\n    }\r\n\r\n    onAppointmentPartitionSet({ hour }) {\r\n        const { appointments, deleteAppointment, updateJob, addAppointments } = this.props;\r\n\r\n        const appointment = this.state.partitionAppointmentData;\r\n\r\n        const modifiedAppointments = appointments.slice();\r\n        modifiedAppointments.splice(modifiedAppointments.findIndex(appo => appo.id === appointment.id), 1);\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        const newPeriods = getAllVacatedSpacesInPeriodUntilDueDate(\r\n            appointment.startDate.get('hour'),\r\n            appointment.endDate.get('hour'),\r\n            appointment.endDate,\r\n            modifiedAppointments,\r\n            0,\r\n            appointment.startDate,\r\n            false,\r\n            hour\r\n        )\r\n\r\n        let newAppointments = newPeriods.map(period => createPeriodObject(period, job.id));\r\n        job.appointments.splice(job.appointments.findIndex(appo => appo === appointment.id), 1);\r\n        job.appointments.push(...newAppointments.map(newAppo => newAppo.id));\r\n\r\n        newAppointments = newAppointments.map(newAppointment => {\r\n            const currentState = this.checkStateOfAppointment(newAppointment);\r\n\r\n            if (newAppointment.state !== currentState) {\r\n                newAppointment.state = currentState;\r\n            }\r\n\r\n            return newAppointment\r\n        })\r\n\r\n        deleteAppointment([appointment.id]);\r\n        addAppointments(newAppointments);\r\n        updateJob(job);\r\n\r\n\r\n        this.setState({ partitionAppointmentData: null });\r\n    }\r\n\r\n    validateHourInserted(_, hours) {\r\n        if (!hours) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        try {\r\n            parseInt(hours, 10);\r\n        } catch (e) {\r\n            return Promise.reject('The hours value need to be a number!')\r\n        }\r\n\r\n        if (this.state.partitionAppointmentData.hours <= hours) {\r\n            return Promise.reject('You can\\'t partition an appointment by the same or higher number of hours!')\r\n        }\r\n\r\n        if (hours <= 0) {\r\n            return Promise.reject('The number of hour should be non-negative and non-zero!')\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    getToolbarFreeSpaceComponent() {\r\n        return (\r\n            <Toolbar.FlexibleSpace className=\"toolbar-flexible-space\" >\r\n                {\r\n                    this.props.workStart !== null && this.props.freeStart !== null\r\n                        ?\r\n                        <Checkbox\r\n                            checked={this.props.showSleepPeriod}\r\n                            onChange={(event) => {\r\n                                const { setShowSleepPeriod } = this.props;\r\n                                const checked = event.target.checked\r\n\r\n                                setShowSleepPeriod(checked);\r\n                            }} >\r\n                            Show Sleep Period\r\n                        </Checkbox>\r\n                        :\r\n                        null\r\n                }\r\n\r\n            </Toolbar.FlexibleSpace>\r\n        )\r\n    }\r\n\r\n    getViewSwitcherComponent(props) {\r\n        return <ViewSwitcher.Switcher {...props} onChange={(viewName) => this.setState({ currentViewName: viewName })}></ViewSwitcher.Switcher >\r\n    }\r\n\r\n    getNavigatorRootComponent(props) {\r\n        return <DateNavigator.Root className=\"date-navigator-root\" {...props}></DateNavigator.Root>\r\n    }\r\n\r\n    getDateNavigatorComponent(props) {\r\n        const isForward = props.type === 'forward'\r\n        return (\r\n            <div className={`navigation-pair-button-wrapper ${isForward ? '' : 'reverse'}`}>\r\n                <button onClick={() => this.onNaviagateDate(props.type)}>\r\n                    {isForward ? <RightOutlined /> : <LeftOutlined />}\r\n                </button>\r\n                {\r\n                    this.state.currentViewName === 'Day'\r\n                        ?\r\n                        <button onClick={() => this.onNaviagateDate(props.type, true)}>\r\n                            {props.type === 'forward' ? <DoubleRightOutlined /> : <DoubleLeftOutlined />}\r\n                        </button>\r\n                        :\r\n                        null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onNaviagateDate(direction, fastForward = false) {\r\n        const currentDay = this.state.currentDay;\r\n\r\n        switch (this.state.currentViewName) {\r\n            case 'Day':\r\n                this.setState({\r\n                    currentDay: direction === 'forward'\r\n                        ?\r\n                        moment(currentDay).add(fastForward ? 7 : 1, 'day').toDate()\r\n                        :\r\n                        moment(currentDay).subtract(fastForward ? 7 : 1, 'day').toDate()\r\n                })\r\n                return\r\n            case 'Month':\r\n                this.setState({\r\n                    currentDay: direction === 'forward'\r\n                        ?\r\n                        moment(currentDay).add(1, 'month').toDate()\r\n                        :\r\n                        moment(currentDay).subtract(1, 'month').toDate()\r\n                })\r\n                return;\r\n        }\r\n    }\r\n\r\n    getHeaderComponent({ children, appointmentData, classes, ...restProps }) {\r\n        return (\r\n            <AppointmentTooltip.Header\r\n                {...restProps}\r\n                appointmentData={appointmentData}\r\n            >\r\n                <MaterialButton className=\"icon-button-wrapper\" onClick={() => {\r\n                    this.setState({ isPartitionModalVisible: true, partitionAppointmentData: appointmentData })\r\n                    this.toggleVisibility();\r\n                    this.onAppointmentMetaChange();\r\n                }}>\r\n                    <SplitCellsOutlined />\r\n                </MaterialButton>\r\n            </AppointmentTooltip.Header>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"home-wrapper\">\r\n                <Header></Header>\r\n                <Paper>\r\n                    <Scheduler\r\n                        locale={\"en-UK\"}\r\n                        data={this.props.appointments}>\r\n                        <ViewState\r\n                            currentDate={this.state.currentDay}\r\n                            currentViewName={this.state.currentViewName}\r\n                            onCurrentDateChange={(date) => this.setState({ currentDay: date })}\r\n                        />\r\n                        <EditingState onCommitChanges={this.onAppointmentChangeCommited.bind(this)} />\r\n\r\n                        <IntegratedEditing />\r\n                        <ConfirmationDialog />\r\n\r\n                        <DayView\r\n                            displayName={'Week'}\r\n                            cellDuration={60}\r\n                            intervalCount={7}\r\n                            startDayHour={this.props.calendarViewHourStart}\r\n                            endDayHour={this.props.calendarViewHourEnd}\r\n                            timeTableCellComponent={this.TableTimeCellRenderer.bind(this)}>\r\n                        </DayView>\r\n                        <MonthView />\r\n\r\n                        <Toolbar flexibleSpaceComponent={this.getToolbarFreeSpaceComponent.bind(this)} />\r\n                        <ViewSwitcher switcherComponent={this.getViewSwitcherComponent.bind(this)} />\r\n                        <DateNavigator\r\n                            rootComponent={this.getNavigatorRootComponent.bind(this)}\r\n                            navigationButtonComponent={this.getDateNavigatorComponent.bind(this)} />\r\n\r\n                        <Appointments\r\n                            appointmentComponent={this.getAppointmentComponet.bind(this)}\r\n                            appointmentContentComponent={this.getCustomAppointmentContent.bind(this)}\r\n                        />\r\n\r\n                        <AppointmentTooltip\r\n                            showCloseButton\r\n                            showDeleteButton\r\n                            headerComponent={this.getHeaderComponent.bind(this)}\r\n                            visible={this.state.isAppointmentTooltipVisible}\r\n                            appointmentMeta={this.state.appointmentTooltipMetadata}\r\n                            onAppointmentMetaChange={this.onAppointmentMetaChange}\r\n                            onVisibilityChange={() => this.setState({ isAppointmentTooltipVisible: false })}\r\n\r\n                            contentComponent={this.getTooltipContent.bind(this)}\r\n                        />\r\n\r\n                        <DragDropProvider\r\n                            allowResize={() => false}\r\n                        />\r\n\r\n                    </Scheduler>\r\n                </Paper>\r\n\r\n                {\r\n                    this.state.realocatedState\r\n                        ?\r\n                        <Modal\r\n                            visible={this.state.isRealocateModalVisible}\r\n                            onOk={() => this.onConfirmationOfRealocation()}\r\n                            onCancel={() => this.setState({ isRealocateModalVisible: false, realocatedState: null })}>\r\n                            <p style={{ marginTop: '20px' }}>\r\n                                {\r\n                                    this.state.realocatedState.state === SCHEDULE_FREE_TIME\r\n                                        ?\r\n\r\n                                        `The appointment submitted can't be concluded during your work period,\r\n                                        do you want to allocate your free time for this appointment?`\r\n                                        :\r\n                                        `The appointment submitted can't be concluded during your work or free time,\r\n                                        should the scheduler ignore your sleep period and allocate time in it?`\r\n                                }\r\n                            </p>\r\n                        </Modal>\r\n                        :\r\n                        null\r\n                }\r\n\r\n\r\n                {\r\n                    this.state.isPartitionModalVisible\r\n                        ?\r\n                        <Modal\r\n                            visible={this.state.isPartitionModalVisible}\r\n                            onOk={() => {\r\n                                this.partitionForm.current.validateFields()\r\n                                    .then(values => {\r\n                                        this.onAppointmentPartitionSet(values);\r\n                                        this.setState({ isPartitionModalVisible: false })\r\n                                    })\r\n                                    .catch(info => {\r\n                                        console.log('Validate Failed:', info);\r\n                                        this.setState({ isPartitionModalVisible: false })\r\n                                    });\r\n                            }}\r\n                            onCancel={() => this.setState({ isPartitionModalVisible: false })}\r\n                            className=\"hour-splitter-modal\"\r\n                        >\r\n                            <h2>Appointment Partition Tool</h2>\r\n                            <p>Input the number of maximum number of hours that each partition of this appointment should have,\r\n                                the Scheduler will divide the appointment by the hour inputted </p>\r\n                            <Form\r\n                                ref={this.partitionForm}\r\n                                name=\"partitionForm\"\r\n                            >\r\n                                <Form.Item\r\n                                    name=\"hour\"\r\n                                    rules={[{ required: true, message: 'You need to input a number of hours!' }, { validator: this.validateHourInserted.bind(this) }]}\r\n                                >\r\n                                    <Input\r\n                                        placeholder=\"XX\"\r\n                                        type=\"number\"\r\n                                        prefix={<FieldTimeOutlined />}\r\n                                        suffix={'Hours'}\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                            </Form>\r\n\r\n                        </Modal>\r\n                        :\r\n                        null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    calendarViewHourStart: state.period.calendarViewHourStart,\r\n    calendarViewHourEnd: state.period.calendarViewHourEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs,\r\n    showSleepPeriod: state.config.showSleepPeriod\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        updateAppointment: (payload) => dispatch(updateAppointment(payload)),\r\n        deleteAppointment: (payload) => dispatch(deleteAppointment(payload)),\r\n        updateJob: (payload) => dispatch(updateJob(payload)),\r\n        deleteJob: (payload) => dispatch(deleteJob(payload)),\r\n        setShowSleepPeriod: (payload) => dispatch(setShowSleepConfiguration(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeComponent);","import * as types from './configuration.types';\r\n\r\nexport const setShowSleepConfiguration = checked => ({\r\n    type: types.SET_SHOW_SLEEP_PERIOD_CONFIG,\r\n    payload: checked\r\n});","import logo from './logo.svg';\r\nimport './App.css';\r\nimport HomeComponent from './pages/Home/Home.component';\r\n\r\nfunction App() {\r\n  return (\r\n    <HomeComponent></HomeComponent>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import moment from 'moment';\r\n\r\nconst replacer = (_, value) => value instanceof moment ? value.toISOString() : value\r\n\r\nconst reviver = (_, value) =>\r\n    (typeof value === 'string' && value.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/))\r\n        ? moment(value)\r\n        : value\r\n\r\nexport const encode = toDeshydrate => JSON.stringify(toDeshydrate, replacer)\r\n\r\nexport const decode = toRehydrate => JSON.parse(toRehydrate, reviver)","export function updateAppointmentOnList(appointmentList = [], toUpdateAppointment) {\r\n    const indexOnList = appointmentList.findIndex(appointment => appointment.id === toUpdateAppointment.id);\r\n\r\n    if (indexOnList === -1) {\r\n        console.error(\"The update operation on appointments failed, no appointment with id \" + toUpdateAppointment.id + \" found\");\r\n        return appointmentList;\r\n    }\r\n\r\n    const updatedList = [...appointmentList];\r\n    updatedList[indexOnList] = toUpdateAppointment;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function updateJobOnList(jobList = [], toUpdateJob) {\r\n    const indexOnList = jobList.findIndex(job => job.id === toUpdateJob.id);\r\n\r\n    if (indexOnList === -1) {\r\n        console.error(\"The update operation on jobs failed, no job with id \" + toUpdateJob.id + \" found\");\r\n        return jobList;\r\n    }\r\n\r\n    const updatedList = [...jobList];\r\n    updatedList[indexOnList] = toUpdateJob;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function deleteAppointment(appointmentList = [], toDeleteIDs = []) {\r\n    const indexesOnList = toDeleteIDs.map(id => appointmentList.findIndex(appointment => appointment.id === id));\r\n\r\n    const updatedList = [...appointmentList];\r\n    indexesOnList.forEach(index => updatedList.splice(index, 1))\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function deleteJobAndAssociatedAppointments(toDeletejob, jobList = [], appointmentList = []) {\r\n    const indexOnList = jobList.findIndex(job => job.id === toDeletejob.id);\r\n\r\n    const updatedJobList = [...jobList];\r\n    updatedJobList.splice(indexOnList, 1);\r\n\r\n    const updatedAppointmentList = [...appointmentList];\r\n    toDeletejob.appointments.forEach(appointmentOfJobID => {\r\n        const indexOnAppointmentList = updatedAppointmentList.findIndex(appointment => appointment.id === appointmentOfJobID);\r\n        updatedAppointmentList.splice(indexOnAppointmentList, 1);\r\n    });\r\n\r\n    return { jobs: updatedJobList, appointments: updatedAppointmentList }\r\n}","import * as types from './appointment.types';\r\nimport { deleteAppointment, deleteJobAndAssociatedAppointments, updateAppointmentOnList, updateJobOnList } from './appointment.utils';\r\n\r\nconst INITIAL_STATE = {\r\n    appointments: [],\r\n    jobs: [],\r\n    history: []\r\n};\r\n\r\nconst appointmentReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_APPOINTMENTS:\r\n            return {\r\n                ...state,\r\n                appointments: [...state.appointments, ...action.payload]\r\n            };\r\n        case types.UPDATED_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: updateAppointmentOnList(state.appointments, action.payload)\r\n            }\r\n        case types.DELETE_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: deleteAppointment(state.appointments, action.payload)\r\n            }\r\n        case types.ADD_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: [...state.jobs, action.payload]\r\n            }\r\n        case types.UPDATE_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: updateJobOnList(state.jobs, action.payload)\r\n            }\r\n        case types.DELETE_JOB:\r\n            const { jobs, appointments } = deleteJobAndAssociatedAppointments(action.payload, state.jobs, state.appointments)\r\n            return {\r\n                ...state,\r\n                jobs,\r\n                appointments\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appointmentReducer;","import * as types from './period.types';\r\nimport * as configTypes from '../global-configuration/configuration.types';\r\n\r\nconst INITIAL_STATE = {\r\n    workStart: null,\r\n    workEnd: null,\r\n    freeStart: null,\r\n    freeEnd: null,\r\n    calendarViewHourStart: 0,\r\n    calendarViewHourEnd: 24\r\n};\r\n\r\nconst periodReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SET_WORK_PERIOD:\r\n            return {\r\n                ...state,\r\n                workStart: action.payload.start,\r\n                workEnd: action.payload.end\r\n            };\r\n        case types.SET_FREE_PERIOD:\r\n            return {\r\n                ...state,\r\n                freeStart: action.payload.start,\r\n                freeEnd: action.payload.end\r\n            };\r\n        case configTypes.SET_SHOW_SLEEP_PERIOD_CONFIG:\r\n            return {\r\n                ...state,\r\n                calendarViewHourStart: action.payload ? 0 : state.workStart ? Math.min(state.workStart, state.freeStart) : 0,\r\n                calendarViewHourEnd: action.payload ? 24 : state.workEnd ? Math.max(state.workEnd, state.freeEnd) : 24\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default periodReducer;","import * as types from './configuration.types';\r\n\r\nconst INITIAL_STATE = {\r\n    showSleepPeriod: true\r\n};\r\n\r\nconst configurationReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SET_SHOW_SLEEP_PERIOD_CONFIG:\r\n            return {\r\n                ...state,\r\n                showSleepPeriod: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default configurationReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport createTransform from 'redux-persist/es/createTransform';\r\nimport { decode, encode } from '../utils/persistor';\r\n\r\nimport appointmentReducer from './appointment/appointment.reducer';\r\nimport periodReducer from './period/period.reducer';\r\nimport configurationReducer from './global-configuration/configuration.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    transforms: [createTransform(encode, decode)]\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    period: periodReducer,\r\n    appointment: appointmentReducer,\r\n    config: configurationReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import { createStore } from 'redux';\r\n\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root_reducer';\r\nimport logger from 'redux-logger'\r\nimport { applyMiddleware } from '@reduxjs/toolkit';\r\n\r\nconst middlewares = []\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    //Set Development only middlewares\r\n    middlewares.push(logger)\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"antd/dist/antd.css\";\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { store, persistor } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}