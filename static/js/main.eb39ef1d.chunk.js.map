{"version":3,"sources":["logo.svg","redux/appointment/appointment.types.js","redux/appointment/appointment.actions.js","utils/constants.js","utils/periods.js","components/AppointmentForm/AppointmentForm.component.js","redux/period/period.types.js","utils/PeriodType.js","components/PeriodSetter/PeriodSetter.component.js","redux/period/period.actions.js","components/Header/Header.component.js","pages/Home/Home.component.js","App.js","reportWebVitals.js","redux/appointment/appointment.utils.js","redux/appointment/appointment.reducer.js","utils/persistor.js","redux/period/period.reducer.js","redux/root_reducer.js","redux/store.js","index.js"],"names":["ADD_APPOINTMENTS","UPDATED_APPOINTMENT","DELETE_APPOINTMENT","ADD_JOB","UPDATE_JOB","DELETE_JOB","addAppointment","appointment","type","types","payload","APPOINTMENT_STATE_TO_DO","APPOINTMENT_STATE_COMPLETED","APPOINTMENT_STATE_CURRENT","APPOINTMENT_STATE_LATE","APPOINTMENT_STATE_DELAY","SCHEDULE_WORK_ONLY","SCHEDULE_FREE_TIME","SCHEDULE_FULL","JOB_NOT_STARTED","verifyAppointmentDisponibility","totalHoursNeeded","dueDate","currentAppointments","workStart","workEnd","freeStart","freeEnd","startDate","continuosPeriodPriorization","console","log","vacatedWorkPeriods","pickBestContinuosPeriods","getAllVacatedSpacesInPeriodUntilDueDate","currentDistributedHours","getTotalHoursOfPeriods","length","state","periods","currentlyRemainingHours","vacatedFreePeriods","distributedHoursInFreePeriod","mergedPeriods","mergeContinousAppointmentsInDifferentPeriods","error","periodStart","periodEnd","appointments","hoursNeeded","getAllPeriods","allContinuousPeriods","currentTimestamp","clone","moment","add","startOf","set","currentPeriondEnd","currentPeriodStart","currentContinuousPeriod","start","end","hours","isSameOrBefore","push","Object","assign","find","isBetween","endDate","undefined","isSameOrAfter","get","mergedAppointment","indexesToIgnore","forEach","index","includes","appointmentToMergeIndex","findIndex","appointmentToCompare","isSame","diff","neededHours","sort","a","b","isBefore","remainingHours","currentPeriods","i","currentPeriod","hourDifference","subtract","reduce","sum","period","createPeriodObject","jobId","id","uuidv4","layout","labelCol","span","wrapperCol","AppointmentForm","props","formRef","React","createRef","isModalVisible","isFutherActionModalVisible","appointmentPreview","appointmentPeriods","appointmentSuccessful","this","setState","values","newJobId","format","appointmentsToCreate","map","newJob","name","price","description","totalHours","addJob","addAppointments","resetFormState","current","resetFields","lastChange","continuousPeriod","value","verifiedDisponibility","shouldDelay","getFieldsValue","extraAppointments","Math","min","max","finalAppointments","onFormSubmit","_","Promise","reject","resolve","enabledForm","allowFormToBeSubmitted","Fragment","onClick","title","visible","okText","onCancel","bind","onOk","validateFields","then","catch","info","okButtonProps","disabled","ref","initialValues","onFinish","onFieldsChange","previewPeriods","Item","label","rules","required","message","TextArea","formatter","replace","parser","precision","validator","validateDueDate","showTime","valuePropName","className","footer","onFutherActionSet","icon","FieldTimeOutlined","CoffeeOutlined","Component","connect","jobs","dispatch","SET_WORK_PERIOD","SET_FREE_PERIOD","WORK_PERIOD","FREE_PERIOD","RangePicker","TimePicker","PeriodSetter","periodType","PeriodType","setWorkPeriod","periodRange","setFreePeriod","getPeriodLabel","remember","ownProps","Number","Header","HomeComponent","currentDay","toDate","currentViewName","appointmentUpdateInterval","isRealocateModalVisible","realocatedState","job","isAppointmentTooltipVisible","appointmentTooltipMetadata","target","data","shouldShowSleepPeriod","startDayViewHour","endDayViewHour","toggleVisibility","onAppointmentMetaChange","onUpdateAppointmentsState","clearTimeout","currentState","checkStateOfAppointment","updateAppointment","timeUntilNextHour","setTimeout","findJobOfAppointment","isAfter","input","isHoursBetween","TimeTableCell","checkStart","checkEnd","periodStartDate","periodEndDate","formatDate","AppointmentContent","style","height","toFixed","hour","minute","padding","appointmentData","Grid","container","alignItems","item","xs","display","justifyContent","Lens","color","marginTop","ExclamationCircleOutlined","fontSize","AccessTime","onCompleteTheAppointment","CheckCircleOutlined","size","onDelayTheAppointment","onFinishTheAppointment","DoubleRightOutlined","updatedListOfAppointments","indexOnList","toCompare","associatedJob","shouldDeleteJob","deleteJob","updateJob","onUpdateJobStateOnAppointmentChange","allAppointments","jobAppointments","filter","newDistributedPeriods","onConfirmationOfRealocation","directState","newAppointments","indexOfAppointment","appoID","splice","app","deleteAppointment","children","Appointment","targetElement","parentElement","position","deleted","appo","previewedDeletionAppointments","changed","keys","changedId","newStartDate","newEndDate","FlexibleSpace","checked","onChange","event","Switcher","viewName","Root","isForward","onNaviagateDate","RightOutlined","LeftOutlined","DoubleLeftOutlined","direction","fastForward","Paper","locale","currentDate","onCommitChanges","onAppointmentChangeCommited","displayName","cellDuration","intervalCount","startDayHour","endDayHour","timeTableCellComponent","TableTimeCellRenderer","flexibleSpaceComponent","getToolbarFreeSpaceComponent","switcherComponent","getViewSwitcherComponent","rootComponent","getNavigatorRootComponent","navigationButtonComponent","getDateNavigatorComponent","appointmentComponent","getAppointmentComponet","appointmentContentComponent","getCustomAppointmentContent","showCloseButton","showDeleteButton","appointmentMeta","onVisibilityChange","contentComponent","getTooltipContent","allowResize","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","updateAppointmentOnList","appointmentList","toUpdateAppointment","updatedList","updateJobOnList","jobList","toUpdateJob","toDeleteIDs","indexesOnList","deleteJobAndAssociatedAppointments","toDeletejob","updatedJobList","updatedAppointmentList","appointmentOfJobID","indexOnAppointmentList","INITIAL_STATE","history","appointmentReducer","action","replacer","toISOString","reviver","match","periodReducer","persistConfig","key","storage","transforms","createTransform","toDeshydrate","JSON","stringify","toRehydrate","parse","rootReducer","combineReducers","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb39ef1d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const ADD_APPOINTMENTS = 'ADD_APPOINTMENTS';\r\nexport const UPDATED_APPOINTMENT= 'UPDATED_APPOINTMENT';\r\nexport const DELETE_APPOINTMENT = 'DELETE_APPOINTMENT';\r\n\r\nexport const ADD_JOB = 'ADD_JOB';\r\nexport const UPDATE_JOB = 'UPDATE_JOB';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\n\r\nexport const ADD_TO_HISTORY = 'ADD_TO_HISTORY';","import * as types from './appointment.types';\r\n\r\nexport const addAppointment = appointment => ({\r\n    type: types.ADD_APPOINTMENTS,\r\n    payload: appointment\r\n});\r\n\r\nexport const updateAppointment = appointment => ({\r\n    type: types.UPDATED_APPOINTMENT,\r\n    payload: appointment\r\n})\r\n\r\nexport const deleteAppointment = id => ({\r\n    type: types.DELETE_APPOINTMENT,\r\n    payload: id\r\n})\r\n\r\nexport const addJob = job => ({\r\n    type: types.ADD_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const updateJob = job => ({\r\n    type: types.UPDATE_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const deleteJob = job => ({\r\n    type: types.DELETE_JOB,\r\n    payload: job\r\n})\r\n\r\nexport const addToHistory = job => ({\r\n    type: types.ADD_TO_HISTORY,\r\n    payload: job\r\n})\r\n","export const SCHEDULER_DATE_FORMAT = 'YYYY-MM-DDTHH:mm'\r\n\r\nexport const APPOINTMENT_STATE_TO_DO = 'APPOINTMENT_STATE_TO_DO'\r\nexport const APPOINTMENT_STATE_COMPLETED = 'APPOINTMENT_STATE_COMPLETED'\r\nexport const APPOINTMENT_STATE_CURRENT = 'APPOINTMENT_STATE_CURRENT'\r\nexport const APPOINTMENT_STATE_LATE = 'APPOINTMENT_STATE_LATE'\r\nexport const APPOINTMENT_STATE_DELAY = 'APPOINTMENT_STATE_DELAY'\r\n\r\nexport const SCHEDULE_WORK_ONLY = 'SCHEDULE_WORK_ONLY';\r\nexport const SCHEDULE_FREE_TIME = 'SCHEDULE_FREE_TIME';\r\nexport const SCHEDULE_FULL = 'SCHEDULE_FULL';\r\n\r\nexport const JOB_NOT_STARTED = 'JOB_NOT_STARTED';\r\nexport const JOB_ON_GOING = 'JOB_ON_GOING';\r\nexport const JOB_COMPLETED = 'JOB_COMPLETED';","import { APPOINTMENT_STATE_TO_DO, SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from \"./constants\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport moment from 'moment';\r\n\r\nexport function verifyAppointmentDisponibility(totalHoursNeeded, dueDate, currentAppointments, [workStart, workEnd], [freeStart, freeEnd], startDate = null, continuosPeriodPriorization = false) {\r\n    if (!workStart || !workEnd) {\r\n        console.error(\"There was no work period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    console.log(\"continuosPeriodPriorization\", continuosPeriodPriorization)\r\n\r\n    const vacatedWorkPeriods = pickBestContinuosPeriods(getAllVacatedSpacesInPeriodUntilDueDate(\r\n        workStart,\r\n        workEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        totalHoursNeeded,\r\n        startDate,\r\n        continuosPeriodPriorization\r\n    ), totalHoursNeeded)\r\n\r\n    const currentDistributedHours = getTotalHoursOfPeriods(vacatedWorkPeriods)\r\n\r\n    //If we already allocated all the nescessary time in the work period, finish the function, otherwise allocate to free time\r\n    if (vacatedWorkPeriods.length != 0 && currentDistributedHours >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_WORK_ONLY,\r\n            periods: vacatedWorkPeriods\r\n        }\r\n    }\r\n\r\n    if (!freeStart || !freeEnd) {\r\n        console.error(\"It was nescessary to use free time, but there was no free period start or end configured!\");\r\n        return;\r\n    }\r\n\r\n    const currentlyRemainingHours = totalHoursNeeded - currentDistributedHours;\r\n\r\n    // console.log(currentlyRemainingHours);\r\n\r\n    const vacatedFreePeriods = pickBestContinuosPeriods(getAllVacatedSpacesInPeriodUntilDueDate(\r\n        freeStart,\r\n        freeEnd,\r\n        dueDate,\r\n        currentAppointments,\r\n        currentlyRemainingHours,\r\n        startDate,\r\n        continuosPeriodPriorization\r\n    ), currentlyRemainingHours)\r\n\r\n    // console.log(vacatedFreePeriods);\r\n\r\n    const distributedHoursInFreePeriod = getTotalHoursOfPeriods(vacatedFreePeriods);\r\n    const mergedPeriods = mergeContinousAppointmentsInDifferentPeriods([...vacatedWorkPeriods, ...vacatedFreePeriods])\r\n\r\n    if (vacatedFreePeriods.length != 0 && currentDistributedHours + distributedHoursInFreePeriod >= totalHoursNeeded) {\r\n        return {\r\n            state: SCHEDULE_FREE_TIME,\r\n            periods: mergedPeriods\r\n        }\r\n    }\r\n\r\n    return {\r\n        state: SCHEDULE_FULL,\r\n        periods: mergedPeriods\r\n    }\r\n}\r\n\r\nexport function getAllVacatedSpacesInPeriodUntilDueDate(periodStart, periodEnd, dueDate, appointments, hoursNeeded, startDate, getAllPeriods = false) {\r\n    const allContinuousPeriods = [];\r\n\r\n    // console.log(\"startDate\", startDate);\r\n    //Start with the period\r\n    let currentTimestamp = startDate ? startDate.clone() : moment().add(1, 'day').startOf('day').set('hour', periodStart);\r\n    //Check if the period end is on the same day as period start, or if the values of the hours wrap up to the next day\r\n    let currentPeriondEnd = periodEnd > periodStart\r\n        ? currentTimestamp.clone().set('hour', periodEnd)\r\n        : currentTimestamp.clone().add(1, 'day').set('hour', periodEnd);\r\n    //The period start is always in the same day, so the above conditional value is not necessary \r\n    let currentPeriodStart = currentTimestamp.clone().set('hour', periodStart)\r\n    // let currentPeriodStart = periodEnd > periodStart\r\n    //     ? currentTimestamp.clone().startOf('day').set('hour', periodStart)\r\n    //     : currentTimestamp.clone().subtract(1, 'day').startOf('day').set('hour', periodStart)\r\n\r\n    let currentContinuousPeriod = {\r\n        start: null,\r\n        end: null,\r\n        hours: 0\r\n    }\r\n\r\n    // console.log(\"periodStar\", currentPeriodStart);\r\n    // console.log(\"periodEnd\", currentPeriondEnd)\r\n\r\n    // console.log('currentTimestamp', currentTimestamp);\r\n    // console.log('dueDate', dueDate.format(\"DD/MM/YYYY HH:mm\"));\r\n\r\n    while (currentTimestamp.isSameOrBefore(dueDate)) {\r\n        // console.log(currentTimestamp.format(\"DD/MM HH:mm\"))\r\n        // console.log('currentContinuousPeriod', Object.assign({}, currentContinuousPeriod))\r\n        /*  Check if the periods already obtained already are enough for the appointment, so theres no \r\n            to continue the while loop*/\r\n        if (!getAllPeriods && hoursNeeded != 0) {\r\n            if (currentContinuousPeriod.start) {\r\n                if (getTotalHoursOfPeriods([...allContinuousPeriods, { hours: 1 + currentContinuousPeriod.hours }]) >= hoursNeeded) {\r\n\r\n                    // console.log(\"SKipping due to reached hours\");\r\n                    currentContinuousPeriod.end = currentTimestamp.clone();\r\n                    currentContinuousPeriod.hours++;\r\n\r\n                    //Add the finished continuous period to the array.\r\n                    allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                    currentContinuousPeriod = {\r\n                        start: null,\r\n                        end: null,\r\n                        hours: 0\r\n                    }\r\n                    break;\r\n                }\r\n            } else if (getTotalHoursOfPeriods(allContinuousPeriods) >= hoursNeeded) {\r\n                // console.log(\"SKipping due to total reached hours\");\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Try to find an appointment that contains the current iterated hour.\r\n        const appointment = appointments.find(appointment => {\r\n            //Check if the current timestamp is between this appointment period\r\n            if (currentTimestamp.isBetween(appointment.startDate, appointment.endDate, undefined, \"[)\")) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        })\r\n\r\n        //If there's already an appointment in the current timestamp iterated, skip to the end of the appointment\r\n        if (appointment) {\r\n            // console.log(\"SKipping due to conflicting appointment\");\r\n            //If there's an current period that has been stopped thanks to this appointment, save in the array.\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            if (appointment.endDate.isSameOrAfter(currentPeriondEnd)) {\r\n                currentPeriondEnd = currentPeriondEnd.add(1, 'day');\r\n                currentPeriodStart = currentPeriodStart.add(1, 'day');\r\n                currentTimestamp = currentPeriodStart.clone();\r\n            } else {\r\n                currentTimestamp = currentTimestamp.set('hour', appointment.endDate.get('hour'));\r\n            }\r\n            continue;\r\n        }\r\n\r\n        //If the current timestamp is beyond or just reached the dueDate\r\n        // console.log('dueDate', dueDate.format('DD/MM HH:mm'))\r\n        // console.log('currentTimestamp', currentTimestamp.format('DD/MM HH:mm'))\r\n        if (currentTimestamp.isSameOrAfter(dueDate)) {\r\n            // console.log(\"SKipping by due date reached\");\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        //If the current hour is the final hour of the period, end the continuous period\r\n        if (currentTimestamp.isSameOrAfter(currentPeriondEnd)) {\r\n            // console.log(\"SKipping by period end\");\r\n            if (currentContinuousPeriod.start) {\r\n                currentContinuousPeriod.end = currentTimestamp.clone();\r\n                currentContinuousPeriod.hours++;\r\n\r\n                //Add the finished continuous period to the array.\r\n                allContinuousPeriods.push(Object.assign({}, currentContinuousPeriod));\r\n\r\n                currentContinuousPeriod = {\r\n                    start: null,\r\n                    end: null,\r\n                    hours: 0\r\n                }\r\n            }\r\n\r\n            currentPeriondEnd = currentPeriondEnd.add(1, 'day');\r\n            currentPeriodStart = currentPeriodStart.add(1, 'day');\r\n            currentTimestamp = currentPeriodStart.clone();\r\n            continue;\r\n        }\r\n\r\n\r\n        //If there's no appointment, this is a free hour to add to the current continuous period\r\n        if (currentContinuousPeriod.start) {\r\n            currentContinuousPeriod.end = currentTimestamp.clone();\r\n            currentContinuousPeriod.hours++;\r\n        } else {\r\n            currentContinuousPeriod.start = currentTimestamp.clone();\r\n        }\r\n\r\n        currentTimestamp = currentTimestamp.add(1, 'hour');\r\n        // console.log(\"Reached the end of loop\")\r\n    }\r\n\r\n    return allContinuousPeriods;\r\n}\r\n\r\nexport function mergeContinousAppointmentsInDifferentPeriods(appointments) {\r\n    const mergedAppointment = [];\r\n    const indexesToIgnore = [];\r\n\r\n    appointments.forEach((appointment, index) => {\r\n        if (indexesToIgnore.includes(index)) {\r\n            return;\r\n        }\r\n\r\n        const appointmentToMergeIndex = appointments.findIndex(appointmentToCompare => appointment.end.isSame(appointmentToCompare.start));\r\n        if (appointmentToMergeIndex !== -1) {\r\n            indexesToIgnore.push(appointmentToMergeIndex);\r\n\r\n            appointment.end = appointments[appointmentToMergeIndex].end;\r\n            appointment.hours = appointment.end.diff(appointment.start, 'hours');\r\n        }\r\n\r\n        mergedAppointment.push(appointment);\r\n    })\r\n\r\n    return mergedAppointment;\r\n}\r\n\r\nexport function pickBestContinuosPeriods(periods, neededHours) {\r\n    //If the periods are not, or just barely, enough to contain the event, just return the array as it is\r\n    if (getTotalHoursOfPeriods(periods) <= neededHours) {\r\n        return periods;\r\n    }\r\n\r\n    //Sort the periods by hours and then by earliest\r\n    periods.sort((a, b) =>\r\n        (a.hours > b.hours) ? -1 : (b.hours > a.hours) ? 1 : a.start.isBefore(b.start) ? -1 : a.start.isBefore(b.start) ? 1 : 0\r\n    );\r\n\r\n    let remainingHours = neededHours;\r\n    const currentPeriods = []\r\n\r\n    for (let i = 0; i < periods.length; i++) {\r\n        const currentPeriod = periods[i];\r\n        if (currentPeriod === remainingHours) {\r\n            currentPeriods.push(currentPeriod);\r\n            break;\r\n        }\r\n        else if (currentPeriod.hours > remainingHours) {\r\n            //Remove from the period the extra hours and put it in the array of periods.\r\n            const hourDifference = currentPeriod.hours - remainingHours;\r\n\r\n            currentPeriod.hours = currentPeriod.hours - hourDifference;\r\n            currentPeriod.end = currentPeriod.end.subtract(hourDifference, 'hours');\r\n            currentPeriods.push(currentPeriod);\r\n\r\n            break;\r\n        } else {\r\n            currentPeriods.push(currentPeriod);\r\n            remainingHours -= currentPeriod.hours;\r\n        }\r\n    }\r\n\r\n    return currentPeriods;\r\n}\r\n\r\nexport function getTotalHoursOfPeriods(periods) {\r\n    return periods.reduce((sum, period) => ({ hours: sum.hours + period.hours }), { hours: 0 }).hours;\r\n}\r\n\r\nexport function createPeriodObject({ start, end, hours }, jobId) {\r\n    return {\r\n        startDate: start,\r\n        endDate: end,\r\n        state: APPOINTMENT_STATE_TO_DO,\r\n        hours: hours,\r\n        id: 'job_' + jobId + '_app_' + uuidv4(),\r\n        jobId: jobId\r\n    }\r\n}\r\n","import { Input, Form, Modal, InputNumber, DatePicker, Button, Checkbox, Tooltip } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addAppointment, addJob } from '../../redux/appointment/appointment.actions';\r\nimport moment from 'moment';\r\n\r\nimport './AppointmentForm.styles.scss';\r\nimport { JOB_NOT_STARTED, SCHEDULE_FREE_TIME, SCHEDULE_FULL, SCHEDULE_WORK_ONLY } from '../../utils/constants';\r\nimport { CoffeeOutlined, FieldTimeOutlined } from '@ant-design/icons';\r\nimport { createPeriodObject, getAllVacatedSpacesInPeriodUntilDueDate, getTotalHoursOfPeriods, mergeContinousAppointmentsInDifferentPeriods, verifyAppointmentDisponibility } from '../../utils/periods';\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nclass AppointmentForm extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false\r\n        }\r\n    }\r\n\r\n    resetFormState() {\r\n        this.setState({\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false,\r\n            appointmentPreview: null,\r\n            appointmentPeriods: [],\r\n            appointmentSuccessful: false\r\n        })\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        const newJobId = moment().format('x');\r\n\r\n        const appointmentsToCreate = this.state.appointmentPeriods.map((period) => createPeriodObject(period, newJobId))\r\n\r\n        const newJob = {\r\n            id: newJobId,\r\n            name: values.name,\r\n            appointments: appointmentsToCreate.map(appointment => appointment.id),\r\n            price: values.price,\r\n            description: values.description,\r\n            dueDate: values.dueDate.startOf('hour'),\r\n            totalHours: values.hours,\r\n            state: JOB_NOT_STARTED\r\n        }\r\n\r\n        this.props.addJob(newJob);\r\n        this.props.addAppointments(appointmentsToCreate);\r\n\r\n        this.resetFormState();\r\n        this.formRef.current.resetFields();\r\n    }\r\n\r\n    previewPeriods([lastChange], [_, __, ___, hours, dueDate, continuousPeriod]) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (lastChange.name.includes('hours') || lastChange.name.includes('dueDate')) {\r\n            if (hours.value && dueDate.value) {\r\n                const verifiedDisponibility = verifyAppointmentDisponibility(hours.value, dueDate.value.startOf('hour'), appointments, [workStart, workEnd], [freeStart, freeEnd], null, continuousPeriod.value);\r\n\r\n                if (!verifiedDisponibility) {\r\n                    console.error(\"Error on saving the periods\")\r\n                    return;\r\n                }\r\n\r\n                switch (verifiedDisponibility.state) {\r\n                    case SCHEDULE_WORK_ONLY:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job can be sucessfully distributed in the work period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FREE_TIME:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job will invade some of your free time period',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: true\r\n                        })\r\n                        break;\r\n                    case SCHEDULE_FULL:\r\n                        this.setState({\r\n                            appointmentPreview: 'The job could not be distributed into your work/free time, further action will be required on submit',\r\n                            appointmentPeriods: verifiedDisponibility.periods,\r\n                            appointmentSuccessful: false\r\n                        })\r\n                        break;\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    appointmentPreview: '',\r\n                    appointmentPeriods: []\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onFutherActionSet(shouldDelay) {\r\n        const { appointments, workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        const { dueDate, hours, continuousPeriod } = this.formRef.current.getFieldsValue();\r\n\r\n        const extraAppointments = getAllVacatedSpacesInPeriodUntilDueDate(\r\n            shouldDelay ? Math.min(workStart, freeStart) : Math.max(workEnd, freeEnd),\r\n            shouldDelay ? Math.max(workEnd, freeEnd) : Math.min(workStart, freeStart),\r\n            shouldDelay ? dueDate.set('year', 9999).startOf('hour') : dueDate.startOf('hour'),\r\n            [...appointments, ...this.state.appointmentPeriods],\r\n            hours - getTotalHoursOfPeriods(this.state.appointmentPeriods),\r\n            shouldDelay ? dueDate.startOf('hour') : moment().startOf('day').set('hour', Math.max(workEnd, freeEnd)),\r\n            continuousPeriod\r\n        )\r\n\r\n        const finalAppointments = mergeContinousAppointmentsInDifferentPeriods([...extraAppointments, ...this.state.appointmentPeriods]);\r\n\r\n        this.setState({\r\n            appointmentPeriods: finalAppointments,\r\n            appointmentSuccessful: true,\r\n            appointmentPreview: '',\r\n            isModalVisible: false,\r\n            isFutherActionModalVisible: false\r\n        }, () => this.onFormSubmit(this.formRef.current.getFieldsValue()))\r\n    }\r\n\r\n    allowFormToBeSubmitted() {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n        if (workStart && workEnd && freeStart && freeEnd) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    validateDueDate(_, dueDate) {\r\n        if (moment().isSameOrAfter(dueDate)) {\r\n            return Promise.reject('The due date needs to be after now!')\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    render() {\r\n        const enabledForm = this.allowFormToBeSubmitted();\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Button type=\"primary\" onClick={() => this.setState({ isModalVisible: true })}>Add Event</Button>\r\n\r\n                <Modal title=\"Add Event\"\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={this.resetFormState.bind(this)}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                if (this.state.appointmentSuccessful) {\r\n                                    this.onFormSubmit(values);\r\n                                } else {\r\n                                    this.setState({ isFutherActionModalVisible: true })\r\n                                }\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                    okButtonProps={{ disabled: !enabledForm }}\r\n                >\r\n\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"eventForm\"\r\n                        initialValues={{ continuousPeriod: true }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                        onFieldsChange={this.previewPeriods.bind(this)}\r\n\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            rules={[{ required: true, message: 'The event name is required' }]}\r\n                        >\r\n                            <Input disabled={!enabledForm} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Description\"\r\n                            name=\"description\"\r\n                        >\r\n                            <Input.TextArea disabled={!enabledForm} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Price\"\r\n                            name=\"price\"\r\n                        >\r\n                            <InputNumber\r\n                                formatter={price => `$ ${price}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                parser={price => price.replace(/\\$\\s?|(,*)/g, '')}\r\n                                min={0}\r\n                                precision={2}\r\n                                disabled={!enabledForm}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Estimated Hours\"\r\n                            name=\"hours\"\r\n                            rules={[{ required: true, message: 'The ETA is required to allow the scheduler to distribute time' }]}\r\n                            disabled={!enabledForm}\r\n                        >\r\n                            <InputNumber\r\n                                min={0} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Due Date\"\r\n                            name=\"dueDate\"\r\n                            rules={[{ required: true, message: 'The dude date is required' }, { validator: this.validateDueDate }]}\r\n                            disabled={!enabledForm}\r\n                        >\r\n                            <DatePicker format={'DD/MM/YYYY HH:00'} showTime />\r\n                        </Form.Item >\r\n                        \r\n                        <Tooltip title=\"Whether the Scheduler should focus on finding continuous periods or just distribute the event in the open periods avaliable\">\r\n                            <Form.Item label=\"Continuous Priority\" valuePropName='checked' name=\"continuousPeriod\">\r\n                                <Checkbox></Checkbox>\r\n\r\n                            </Form.Item>\r\n                        </Tooltip>\r\n\r\n\r\n                        <span className=\"message\">{this.state.appointmentPreview}</span>\r\n                        {\r\n                            !enabledForm ?\r\n                                <span className=\"message\">\r\n                                    Please set the work and free period before attemping to add events to your schedule\r\n                                </span> : null\r\n                        }\r\n\r\n                    </Form>\r\n\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.isFutherActionModalVisible}\r\n                    footer={[\r\n                        <Tooltip key=\"delay\" title=\"Delay\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(true)} icon={<FieldTimeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Tooltip key=\"overwrite_sleep\" title=\"Overwrite Sleep\">\r\n                            <Button type=\"primary\" onClick={() => this.onFutherActionSet(false)} icon={<CoffeeOutlined />}></Button>\r\n                        </Tooltip>,\r\n                        <Button key=\"back\" onClick={() => this.setState({ isFutherActionModalVisible: false })}>\r\n                            Cancel\r\n                        </Button>\r\n                    ]}>\r\n                    <p>The appointment submitted can't be concluded during your work and free period, what should the scheduler do to allow for this job to be scheduled?</p>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        addJob: (payload) => dispatch(addJob(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppointmentForm);","export const SET_WORK_PERIOD = 'SET_WORK_PERIOD';\r\nexport const SET_FREE_PERIOD = 'SET_FREE_PERIOD';","export const WORK_PERIOD = 'WORK_PERIOD';\r\nexport const FREE_PERIOD = 'FREE_PERIOD';\r\nexport const SLEEP_PERIOD = 'SLEEP_PERIOD';","import { Button, Form, Modal, TimePicker } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setFreePeriod, setWorkPeriod } from '../../redux/period/period.actions';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\nimport moment from 'moment';\r\n\r\nimport './PeriodSetter.styles.scss';\r\n\r\nconst { RangePicker } = TimePicker;\r\n\r\nclass PeriodSetter extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalVisible: false\r\n        }\r\n    }\r\n\r\n    onFormSubmit(values) {\r\n        switch (this.props.periodType) {\r\n            case PeriodType.WORK_PERIOD:\r\n                this.props.setWorkPeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n            case PeriodType.FREE_PERIOD:\r\n                this.props.setFreePeriod({ start: values.periodRange[0].get('hours'), end: values.periodRange[1].get('hours') })\r\n                break;\r\n        }\r\n\r\n        this.setState({ isModalVisible: false})\r\n    }\r\n\r\n    getPeriodLabel(periodType) {\r\n        switch (periodType) {\r\n            case PeriodType.FREE_PERIOD:\r\n                return 'Free';\r\n            case PeriodType.WORK_PERIOD:\r\n                return 'Work';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button onClick={() => this.setState({ isModalVisible: true })}>{this.getPeriodLabel(this.props.periodType)} Period</Button>\r\n\r\n                <Modal\r\n                    title={`${this.getPeriodLabel(this.props.periodType)} Period`}\r\n                    visible={this.state.isModalVisible}\r\n                    okText={\"Submit\"}\r\n                    onCancel={() => this.setState({ isModalVisible: false })}\r\n                    onOk={() => {\r\n                        this.formRef.current.validateFields()\r\n                            .then(values => {\r\n                                this.onFormSubmit(values);\r\n                            })\r\n                            .catch(info => {\r\n                                console.log('Validate Failed:', info);\r\n                            });\r\n                    }}\r\n                >\r\n                    <Form\r\n                        ref={this.formRef}\r\n                        name=\"periodForm\"\r\n                        initialValues={{\r\n                            periodRange: [\r\n                                moment().startOf('day').set('hours', this.props.start),\r\n                                moment().startOf('day').set('hours', this.props.end)\r\n                            ],\r\n                            remember: true\r\n                        }}\r\n                        onFinish={(values) => this.onFormSubmit(values)}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"periodRange\"\r\n                            rules={[{ required: true, message: 'The range of the period is required!' }]}\r\n                        >\r\n                            <RangePicker format={\"HH:00\"} />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    switch (ownProps.periodType) {\r\n        case PeriodType.WORK_PERIOD:\r\n            return {\r\n                start: new Number(state.period.workStart),\r\n                end: new Number(state.period.workEnd)\r\n            }\r\n        case PeriodType.FREE_PERIOD:\r\n            return {\r\n                start: state.period.freeStart,\r\n                end: state.period.freeEnd\r\n            }\r\n        default:\r\n            return {\r\n\r\n            }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWorkPeriod: (payload) => dispatch(setWorkPeriod(payload)),\r\n        setFreePeriod: (payload) => dispatch(setFreePeriod(payload))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PeriodSetter);","import * as types from './period.types';\r\n\r\nexport const setWorkPeriod = timeRange => ({\r\n    type: types.SET_WORK_PERIOD,\r\n    payload: timeRange\r\n});\r\n\r\nexport const setFreePeriod = timeRange => ({\r\n    type: types.SET_FREE_PERIOD,\r\n    payload: timeRange\r\n});","import React from 'react';\r\nimport AppointmentForm from '../AppointmentForm/AppointmentForm.component';\r\nimport PeriodSetter from '../PeriodSetter/PeriodSetter.component';\r\nimport * as PeriodType from '../../utils/PeriodType';\r\n\r\nimport './Header.styles.scss';\r\n\r\nexport class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    onFormSubmit() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h2>Work Scheduler</h2>\r\n\r\n                <div className=\"button-group\">\r\n                    <PeriodSetter periodType={PeriodType.WORK_PERIOD} />\r\n                    <PeriodSetter periodType={PeriodType.FREE_PERIOD} />\r\n\r\n                    <AppointmentForm />\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { EditingState, IntegratedEditing, ViewState } from '@devexpress/dx-react-scheduler';\r\nimport {\r\n    Scheduler,\r\n    DayView,\r\n    Appointments,\r\n    Toolbar,\r\n    ViewSwitcher,\r\n    MonthView,\r\n    AppointmentTooltip,\r\n    DateNavigator,\r\n    ConfirmationDialog,\r\n    DragDropProvider\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\nimport { Header } from '../../components/Header/Header.component';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { APPOINTMENT_STATE_COMPLETED, APPOINTMENT_STATE_CURRENT, APPOINTMENT_STATE_DELAY, APPOINTMENT_STATE_LATE, APPOINTMENT_STATE_TO_DO, JOB_COMPLETED, JOB_NOT_STARTED, JOB_ON_GOING, SCHEDULE_FREE_TIME, SCHEDULE_FULL } from '../../utils/constants';\r\nimport { FieldTimeOutlined, DoubleRightOutlined, CheckCircleOutlined, ExclamationCircleOutlined, DoubleLeftOutlined, LeftOutlined, RightOutlined } from '@ant-design/icons';\r\nimport { addAppointment, deleteAppointment, deleteJob, updateAppointment, updateJob } from '../../redux/appointment/appointment.actions';\r\nimport { createPeriodObject, verifyAppointmentDisponibility } from '../../utils/periods';\r\nimport { Button } from 'antd';\r\n\r\nimport './Home.styles.scss';\r\nimport { Grid } from '@material-ui/core';\r\nimport { AccessTime, Lens } from '@material-ui/icons';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport Checkbox from 'antd/lib/checkbox/Checkbox';\r\n\r\nclass HomeComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentDay: moment().startOf('week').toDate(),\r\n            currentViewName: 'Day',\r\n            appointmentUpdateInterval: null,\r\n            isRealocateModalVisible: false,\r\n            realocatedState: {\r\n                state: '',\r\n                periods: [],\r\n                appointment: null,\r\n                job: null\r\n            },\r\n            isAppointmentTooltipVisible: false,\r\n            appointmentTooltipMetadata: {\r\n                target: null,\r\n                data: {},\r\n            },\r\n            shouldShowSleepPeriod: true,\r\n            startDayViewHour: 0,\r\n            endDayViewHour: 24\r\n        }\r\n\r\n        this.toggleVisibility = () => {\r\n            this.setState({ isAppointmentTooltipVisible: !this.state.isAppointmentTooltipVisible });\r\n        };\r\n\r\n        this.onAppointmentMetaChange = ({ data, target } = { data: {}, target: null }) => {\r\n            this.setState({ appointmentTooltipMetadata: { data, target } });\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onUpdateAppointmentsState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.appointmentUpdateInterval) {\r\n            clearTimeout(this.state.appointmentUpdateInterval)\r\n            this.setState({ appointmentUpdateInterval: null })\r\n        }\r\n    }\r\n\r\n    onUpdateAppointmentsState() {\r\n        const { appointments } = this.props;\r\n\r\n        appointments.forEach(appointment => {\r\n            const currentState = this.checkStateOfAppointment(appointment)\r\n            if (appointment.state !== currentState) {\r\n\r\n                console.log(\"New state\" + currentState + \"for appoitnment\" + appointment.id);\r\n\r\n                appointment.state = currentState;\r\n\r\n                this.props.updateAppointment(appointment);\r\n            }\r\n        })\r\n\r\n        const timeUntilNextHour = moment().add(1, 'hour').startOf('hour').add(1, 'second').diff(moment(), 'milliseconds');\r\n\r\n        this.setState({\r\n            appointmentUpdateInterval: setTimeout(() => this.onUpdateAppointmentsState(), timeUntilNextHour)\r\n        })\r\n    }\r\n\r\n    checkStateOfAppointment(appointment) {\r\n        //Once completed, the state is not supposed to be changed anymore\r\n        if (appointment.state === APPOINTMENT_STATE_COMPLETED) {\r\n            return APPOINTMENT_STATE_COMPLETED;\r\n        }\r\n\r\n        const job = this.findJobOfAppointment(appointment);\r\n        if (appointment.startDate.isAfter(job.dueDate)) {\r\n            return APPOINTMENT_STATE_DELAY\r\n        }\r\n\r\n        //If the appointment has ended before the current date, then it's late\r\n        if (appointment.endDate.isBefore(moment())) {\r\n            return APPOINTMENT_STATE_LATE;\r\n        }\r\n\r\n        //If the appointment start is later than now, then it is still to do\r\n        if (appointment.startDate.isAfter(moment())) {\r\n            return APPOINTMENT_STATE_TO_DO;\r\n        }\r\n\r\n        //Otherwise, the appointment is occuring currrently\r\n        return APPOINTMENT_STATE_CURRENT;\r\n    }\r\n\r\n    TableTimeCellRenderer(input) {\r\n        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n\r\n        const startDate = moment(input.startDate);\r\n        const endDate = moment(input.endDate);\r\n\r\n        let className = \"sleep-period\";\r\n\r\n        if (this.isHoursBetween(workStart, workEnd, startDate, endDate)) {\r\n            className = \"work-period\"\r\n        } else if (this.isHoursBetween(freeStart, freeEnd, startDate, endDate)) {\r\n            className = \"free-period\"\r\n        }\r\n\r\n        return <DayView.TimeTableCell {...input} className={className}></DayView.TimeTableCell>\r\n    }\r\n\r\n    isHoursBetween(periodStart, periodEnd, checkStart, checkEnd) {\r\n        const periodStartDate = checkStart.clone().startOf('day').set('hour', periodStart);\r\n        const periodEndDate = checkEnd.clone().startOf('day').set('hour', periodEnd);\r\n\r\n        return checkStart.isBetween(periodStartDate, periodEndDate, undefined, \"[)\") &&\r\n            checkEnd.isBetween(periodStartDate, periodEndDate, undefined, \"(]\")\r\n\r\n    }\r\n\r\n    getCustomAppointmentContent(props) {\r\n        const { data, formatDate } = props;\r\n\r\n        const job = this.findJobOfAppointment(data);\r\n\r\n        return (\r\n            <Appointments.AppointmentContent {...props} style={{ height: '100%' }}>\r\n                <div className=\"app-appointment-content\">\r\n                    <div className=\"title\">\r\n                        {job.name}\r\n                    </div>\r\n                    {\r\n                        job.price\r\n                            ? <div className=\"value-wrapper\">$ {job.price.toFixed(2)}</div>\r\n                            : null\r\n                    }\r\n                    <span>Due to: {job.dueDate.format('DD/MM/YYYY HH:00')}</span>\r\n                    <div className=\"hour-wrapper\">\r\n                        <span>{formatDate(data.startDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                        <span style={{ padding: \"0px 3px\" }}> - </span>\r\n                        <span>{formatDate(data.endDate, { hour: 'numeric', minute: 'numeric' })}</span>\r\n                    </div>\r\n                </div>\r\n            </Appointments.AppointmentContent>\r\n        )\r\n    }\r\n\r\n    getTooltipContent(props) {\r\n        const { appointmentData, formatDate } = props;\r\n\r\n        const job = this.findJobOfAppointment(appointmentData);\r\n        if (!job) { return null; }\r\n\r\n        return (\r\n            <div className=\"tooltip-content\">\r\n                <Grid container alignItems=\"flex-start\" className=\"meta\">\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center' }} >\r\n                        <Lens className=\"lens\" style={{\r\n                            color: appointmentData.state === APPOINTMENT_STATE_TO_DO\r\n                                ? '#1890ff'\r\n                                : appointmentData.state === APPOINTMENT_STATE_COMPLETED\r\n                                    ? '#a4b1db'\r\n                                    : appointmentData.state === APPOINTMENT_STATE_CURRENT\r\n                                        ? 'green'\r\n                                        : appointmentData.state === APPOINTMENT_STATE_LATE\r\n                                            ? 'orange'\r\n                                            : 'crimson'\r\n                        }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <div className=\"title\" >\r\n                            {job.name}\r\n                        </div>\r\n                        <div >\r\n                            {appointmentData.startDate.format('dddd, DD MMMM YYYY')}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" style={{ marginTop: '10px' }}>\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center', color: 'gray' }} >\r\n                        <ExclamationCircleOutlined style={{ fontSize: '24px' }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <div >\r\n                            {`${formatDate(appointmentData.startDate, { hour: 'numeric', minute: 'numeric' })}\r\n                            - ${formatDate(appointmentData.endDate, { hour: 'numeric', minute: 'numeric' })}`}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container alignItems=\"center\" >\r\n                    <Grid item xs={2} style={{ display: 'flex', justifyContent: 'center', color: 'gray' }} >\r\n                        <AccessTime style={{ fontSize: '24px' }} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <span>Due at {job.dueDate.format('dddd, DD MMMM YYYY HH:00')}</span>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {\r\n                    job.description\r\n                        ?\r\n                        <p className=\"description\">\r\n                            {job.description}\r\n                        </p>\r\n                        :\r\n                        null\r\n                }\r\n\r\n\r\n                <div className=\"tooltip-wrapper\">\r\n                    <Button\r\n                        disabled={appointmentData.state === APPOINTMENT_STATE_COMPLETED}\r\n                        onClick={() => this.onCompleteTheAppointment(appointmentData)}\r\n                        icon={<CheckCircleOutlined />}\r\n                        size={'large'}>\r\n                        Complete\r\n                        </Button>\r\n                    <Button\r\n                        onClick={() => this.onDelayTheAppointment(appointmentData)}\r\n                        icon={<FieldTimeOutlined />}\r\n                        size={'large'}>\r\n                        Delay\r\n                        </Button>\r\n                    <Button\r\n                        onClick={() => this.onFinishTheAppointment(appointmentData)}\r\n                        icon={<DoubleRightOutlined />}\r\n                        size={'large'}>\r\n                        Finish\r\n                        </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onCompleteTheAppointment(appointment) {\r\n        const { appointments, jobs } = this.props;\r\n\r\n        const updatedListOfAppointments = [...appointments];\r\n        const indexOnList = updatedListOfAppointments.findIndex(toCompare => toCompare.id === appointment.id);\r\n\r\n        if (indexOnList === -1) {\r\n            console.error(\"Unknown appointment was completed!\");\r\n            return;\r\n        }\r\n\r\n        updatedListOfAppointments[indexOnList].state = APPOINTMENT_STATE_COMPLETED;\r\n        const associatedJob = jobs.find(job => job.id === appointment.jobId);\r\n\r\n        //Check that with the conclusion of this appointment, the job was completed entirely\r\n        if (this.shouldDeleteJob(associatedJob, updatedListOfAppointments)) {\r\n            this.props.deleteJob(associatedJob);\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        } else {\r\n            this.props.updateAppointment(updatedListOfAppointments[indexOnList]);\r\n            this.props.updateJob(this.onUpdateJobStateOnAppointmentChange(associatedJob, updatedListOfAppointments));\r\n        }\r\n    }\r\n\r\n    onUpdateJobStateOnAppointmentChange(job, allAppointments) {\r\n        const jobAppointments = allAppointments.filter(appointment => job.appointments.includes(appointment.id));\r\n\r\n        //If no appointment is still in the state to do, means that the job is fully completed and should be removed\r\n        if (jobAppointments.filter(appointment =>\r\n            appointment.state === APPOINTMENT_STATE_TO_DO ||\r\n            appointment.state === APPOINTMENT_STATE_CURRENT ||\r\n            appointment.state === APPOINTMENT_STATE_DELAY ||\r\n            appointment.state === APPOINTMENT_STATE_LATE).length === 0) {\r\n            job.state = JOB_COMPLETED\r\n            //Else if not a single appointment has started, that means the job is still on hold\r\n        } else if (jobAppointments.filter(appointment => appointment.state === APPOINTMENT_STATE_COMPLETED).length === 0) {\r\n            job.state = JOB_NOT_STARTED\r\n        } else {\r\n            job.state = JOB_ON_GOING\r\n        }\r\n\r\n        return job;\r\n    }\r\n\r\n    shouldDeleteJob(job, allAppointments) {\r\n        const jobAppointments = allAppointments.filter(appointment => job.appointments.includes(appointment.id));\r\n\r\n        return jobAppointments.filter(appointment =>\r\n            appointment.state === APPOINTMENT_STATE_TO_DO ||\r\n            appointment.state === APPOINTMENT_STATE_CURRENT ||\r\n            appointment.state === APPOINTMENT_STATE_DELAY ||\r\n            appointment.state === APPOINTMENT_STATE_LATE\r\n        ).length === 0;\r\n    }\r\n\r\n    onDelayTheAppointment(appointment) {\r\n        const { workStart, workEnd, freeStart, freeEnd, appointments } = this.props;\r\n\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        const newDistributedPeriods = verifyAppointmentDisponibility(\r\n            appointment.hours,\r\n            job.dueDate,\r\n            appointments,\r\n            [workStart, workEnd],\r\n            [freeStart, freeEnd],\r\n            appointment.endDate\r\n        );\r\n\r\n        if (newDistributedPeriods.state === SCHEDULE_FREE_TIME || newDistributedPeriods === SCHEDULE_FULL) {\r\n            this.setState({\r\n                realocatedState: { ...newDistributedPeriods, appointment, job },\r\n                isRealocateModalVisible: true\r\n            })\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        } else {\r\n            this.onConfirmationOfRealocation({ ...newDistributedPeriods, appointment, job })\r\n        }\r\n    }\r\n\r\n    onConfirmationOfRealocation(directState = null) {\r\n        const { periods, job, appointment } = directState || this.state.realocatedState;\r\n\r\n        const newAppointments = periods.map(period => createPeriodObject(period, job.id))\r\n\r\n        //Removed old appointment and insert new ids from the job object\r\n        const indexOfAppointment = job.appointments.findIndex(appoID => appoID === appointment.id);\r\n        job.appointments.splice(indexOfAppointment, 1, ...newAppointments.map(app => app.id))\r\n\r\n        this.props.updateJob(job);\r\n        this.props.deleteAppointment([appointment.id]);\r\n        this.props.addAppointments(newAppointments);\r\n\r\n        this.setState({\r\n            isRealocateModalVisible: false,\r\n            realocatedState: null\r\n        })\r\n    }\r\n\r\n    onFinishTheAppointment(appointment) {\r\n        const job = this.findJobOfAppointment(appointment);\r\n\r\n        this.props.deleteJob(job);\r\n\r\n        this.toggleVisibility();\r\n        this.onAppointmentMetaChange();\r\n    }\r\n\r\n    getAppointmentComponet(props) {\r\n        const { children, style, data } = props;\r\n\r\n        let className;\r\n\r\n        if (data.state === APPOINTMENT_STATE_COMPLETED) {\r\n            className = \"appointment-done\"\r\n        }\r\n        else if (data.state === APPOINTMENT_STATE_CURRENT) {\r\n            className = \"appointment-active\";\r\n        } else if (data.state === APPOINTMENT_STATE_LATE) {\r\n            className = \"appointment-late\"\r\n        } else if (data.state === APPOINTMENT_STATE_DELAY) {\r\n            className = \"appointment-delay\"\r\n        }\r\n\r\n        return (\r\n            <Appointments.Appointment\r\n                {...props}\r\n                className={className}\r\n                style={{\r\n                    ...style\r\n                }}\r\n                onClick={({ target, data }) => {\r\n                    let targetElement = target;\r\n\r\n                    while (true) {\r\n                        targetElement = targetElement.parentElement;\r\n                        if (targetElement.style.position === 'absolute') { break; }\r\n                    }\r\n\r\n                    this.onAppointmentMetaChange({ target: targetElement, data });\r\n                    this.toggleVisibility();\r\n                }}\r\n            >\r\n                {children}\r\n            </Appointments.Appointment>\r\n        )\r\n    }\r\n\r\n    findJobOfAppointment(appointment, index = false) {\r\n        return index\r\n            ?\r\n            this.props.jobs.findIndex(job => job.id === appointment.jobId)\r\n            :\r\n            this.props.jobs.find(job => job.id === appointment.jobId);\r\n    }\r\n\r\n    onAppointmentChangeCommited(props) {\r\n        const { appointments } = this.props;\r\n\r\n        if (props.deleted) {\r\n            const appointment = appointments.find(appo => appo.id === props.deleted);\r\n            const job = this.findJobOfAppointment(appointment);\r\n\r\n            const previewedDeletionAppointments = [...appointments];\r\n            previewedDeletionAppointments.splice(previewedDeletionAppointments.findIndex(appo => appo.id === props.deleted), 1)\r\n\r\n            if (this.shouldDeleteJob(job, previewedDeletionAppointments)) {\r\n                this.props.deleteJob(job);\r\n            } else {\r\n                job.appointments.splice(job.appointments.findIndex(appo => appo === props.deleted), 1);\r\n\r\n                this.props.deleteAppointment([props.deleted]);\r\n                this.props.updateJob(job);\r\n            }\r\n\r\n            this.toggleVisibility();\r\n            this.onAppointmentMetaChange();\r\n        }\r\n\r\n        if (props.changed) {\r\n            Object.keys(props.changed).forEach(changedId => {\r\n                const { endDate, startDate } = props.changed[changedId];\r\n\r\n                const appointment = appointments.find(appo => appo.id === changedId);\r\n\r\n                let newStartDate = moment(startDate);\r\n                let newEndDate = moment(endDate);\r\n\r\n                if (newEndDate.diff(newStartDate, 'hours') === 24) {\r\n                    newStartDate.set('hour', this.props.workStart);\r\n                    newEndDate = newStartDate.clone().set('hour', this.props.workStart + appointment.hours);\r\n                }\r\n\r\n                appointment.startDate = newStartDate;\r\n                appointment.endDate = newEndDate;\r\n                appointment.state = this.checkStateOfAppointment(appointment)\r\n\r\n                this.props.updateAppointment(appointment);\r\n            })\r\n        }\r\n    }\r\n\r\n    getToolbarFreeSpaceComponent() {\r\n        return (\r\n            <Toolbar.FlexibleSpace className=\"toolbar-flexible-space\" >\r\n                <Checkbox\r\n                    checked={this.state.shouldShowSleepPeriod}\r\n                    onChange={(event) => {\r\n                        const { workStart, workEnd, freeStart, freeEnd } = this.props;\r\n                        const checked = event.target.checked\r\n                        this.setState({\r\n                            shouldShowSleepPeriod: checked,\r\n                            startDayViewHour: checked ? 0 : Math.min(workStart, freeStart),\r\n                            endDayViewHour: checked ? 24 : Math.max(workEnd, freeEnd)\r\n                        })\r\n                    }} >\r\n                    Show Sleep Period\r\n                </Checkbox>\r\n            </Toolbar.FlexibleSpace>\r\n        )\r\n    }\r\n\r\n    getViewSwitcherComponent(props) {\r\n        return <ViewSwitcher.Switcher {...props} onChange={(viewName) => this.setState({ currentViewName: viewName })}></ViewSwitcher.Switcher >\r\n    }\r\n\r\n    getNavigatorRootComponent(props) {\r\n        return <DateNavigator.Root className=\"date-navigator-root\" {...props}></DateNavigator.Root>\r\n    }\r\n\r\n    getDateNavigatorComponent(props) {\r\n        const isForward = props.type === 'forward'\r\n        return (\r\n            <div className={`navigation-pair-button-wrapper ${isForward ? '' : 'reverse'}`}>\r\n                <button onClick={() => this.onNaviagateDate(props.type)}>\r\n                    {isForward ? <RightOutlined /> : <LeftOutlined />}\r\n                </button>\r\n                {\r\n                    this.state.currentViewName === 'Day'\r\n                        ?\r\n                        <button onClick={() => this.onNaviagateDate(props.type, true)}>\r\n                            {props.type === 'forward' ? <DoubleRightOutlined /> : <DoubleLeftOutlined />}\r\n                        </button>\r\n                        :\r\n                        null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onNaviagateDate(direction, fastForward = false) {\r\n        const currentDay = this.state.currentDay;\r\n\r\n        switch (this.state.currentViewName) {\r\n            case 'Day':\r\n                this.setState({\r\n                    currentDay: direction === 'forward'\r\n                        ?\r\n                        moment(currentDay).add(fastForward ? 7 : 1, 'day').toDate()\r\n                        :\r\n                        moment(currentDay).subtract(fastForward ? 7 : 1, 'day').toDate()\r\n                })\r\n                return\r\n            case 'Month':\r\n                this.setState({\r\n                    currentDay: direction === 'forward'\r\n                        ?\r\n                        moment(currentDay).add(1, 'month').toDate()\r\n                        :\r\n                        moment(currentDay).subtract(1, 'month').toDate()\r\n                })\r\n                return;\r\n        }\r\n    }\r\n\r\n    getEarliestDate\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"home-wrapper\">\r\n                <Header></Header>\r\n                <Paper>\r\n                    <Scheduler\r\n                        locale={\"en-UK\"}\r\n                        data={this.props.appointments}>\r\n                        <ViewState\r\n                            currentDate={this.state.currentDay}\r\n                            currentViewName={this.state.currentViewName}\r\n                        />\r\n                        <EditingState onCommitChanges={this.onAppointmentChangeCommited.bind(this)} />\r\n\r\n                        <IntegratedEditing />\r\n                        <ConfirmationDialog />\r\n\r\n                        <DayView\r\n                            displayName={'Week'}\r\n                            cellDuration={60}\r\n                            intervalCount={7}\r\n                            startDayHour={this.state.startDayViewHour}\r\n                            endDayHour={this.state.endDayViewHour}\r\n                            timeTableCellComponent={this.TableTimeCellRenderer.bind(this)}>\r\n                        </DayView>\r\n                        <MonthView />\r\n\r\n                        <Toolbar flexibleSpaceComponent={this.getToolbarFreeSpaceComponent.bind(this)} />\r\n                        <ViewSwitcher switcherComponent={this.getViewSwitcherComponent.bind(this)} />\r\n                        <DateNavigator\r\n                            rootComponent={this.getNavigatorRootComponent.bind(this)}\r\n                            navigationButtonComponent={this.getDateNavigatorComponent.bind(this)} />\r\n\r\n                        <Appointments\r\n                            appointmentComponent={this.getAppointmentComponet.bind(this)}\r\n                            appointmentContentComponent={this.getCustomAppointmentContent.bind(this)}\r\n                        />\r\n\r\n                        <AppointmentTooltip\r\n                            showCloseButton\r\n                            showDeleteButton\r\n                            visible={this.state.isAppointmentTooltipVisible}\r\n                            appointmentMeta={this.state.appointmentTooltipMetadata}\r\n                            onAppointmentMetaChange={this.onAppointmentMetaChange}\r\n                            onVisibilityChange={() => this.setState({ isAppointmentTooltipVisible: false })}\r\n\r\n                            contentComponent={this.getTooltipContent.bind(this)}\r\n                        />\r\n\r\n                        <DragDropProvider\r\n                            allowResize={() => false}\r\n                        />\r\n\r\n                    </Scheduler>\r\n                </Paper>\r\n\r\n                {\r\n                    this.state.realocatedState\r\n                        ?\r\n                        <Modal\r\n                            visible={this.state.isRealocateModalVisible}\r\n                            onOk={() => this.onConfirmationOfRealocation()}\r\n                            onCancel={() => this.setState({ isRealocateModalVisible: false, realocatedState: null })}>\r\n                            <p style={{ marginTop: '20px' }}>\r\n                                {\r\n                                    this.state.realocatedState.state === SCHEDULE_FREE_TIME\r\n                                        ?\r\n\r\n                                        `The appointment submitted can't be concluded during your work period,\r\n                                        do you want to allocate your free time for this appointment?`\r\n                                        :\r\n                                        `The appointment submitted can't be concluded during your work or free time,\r\n                                        should the scheduler ignore your sleep period and allocate time in it?`\r\n                                }\r\n                            </p>\r\n                        </Modal>\r\n                        :\r\n                        null\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workStart: state.period.workStart,\r\n    workEnd: state.period.workEnd,\r\n    freeStart: state.period.freeStart,\r\n    freeEnd: state.period.freeEnd,\r\n    appointments: state.appointment.appointments,\r\n    jobs: state.appointment.jobs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addAppointments: (payload) => dispatch(addAppointment(payload)),\r\n        updateAppointment: (payload) => dispatch(updateAppointment(payload)),\r\n        deleteAppointment: (payload) => dispatch(deleteAppointment(payload)),\r\n        updateJob: (payload) => dispatch(updateJob(payload)),\r\n        deleteJob: (payload) => dispatch(deleteJob(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeComponent);","import logo from './logo.svg';\r\nimport './App.css';\r\nimport HomeComponent from './pages/Home/Home.component';\r\n\r\nfunction App() {\r\n  return (\r\n    <HomeComponent></HomeComponent>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export function updateAppointmentOnList(appointmentList = [], toUpdateAppointment) {\r\n    const indexOnList = appointmentList.findIndex(appointment => appointment.id === toUpdateAppointment.id);\r\n\r\n    if (indexOnList === -1) {\r\n        console.error(\"The update operation on appointments failed, no appointment with id \" + toUpdateAppointment.id + \" found\");\r\n        return appointmentList;\r\n    }\r\n\r\n    const updatedList = [...appointmentList];\r\n    updatedList[indexOnList] = toUpdateAppointment;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function updateJobOnList(jobList = [], toUpdateJob) {\r\n    const indexOnList = jobList.findIndex(job => job.id === toUpdateJob.id);\r\n\r\n    if (indexOnList === -1) {\r\n        console.error(\"The update operation on jobs failed, no job with id \" + toUpdateJob.id + \" found\");\r\n        return jobList;\r\n    }\r\n\r\n    const updatedList = [...jobList];\r\n    updatedList[indexOnList] = toUpdateJob;\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function deleteAppointment(appointmentList = [], toDeleteIDs = []) {\r\n    const indexesOnList = toDeleteIDs.map(id => appointmentList.findIndex(appointment => appointment.id === id));\r\n\r\n    const updatedList = [...appointmentList];\r\n    indexesOnList.forEach(index => updatedList.splice(index, 1))\r\n\r\n    return updatedList;\r\n}\r\n\r\nexport function deleteJobAndAssociatedAppointments(toDeletejob, jobList = [], appointmentList = []) {\r\n    const indexOnList = jobList.findIndex(job => job.id === toDeletejob.id);\r\n\r\n    const updatedJobList = [...jobList];\r\n    updatedJobList.splice(indexOnList, 1);\r\n\r\n    const updatedAppointmentList = [...appointmentList];\r\n    toDeletejob.appointments.forEach(appointmentOfJobID => {\r\n        const indexOnAppointmentList = updatedAppointmentList.findIndex(appointment => appointment.id === appointmentOfJobID);\r\n        updatedAppointmentList.splice(indexOnAppointmentList, 1);\r\n    });\r\n\r\n    return { jobs: updatedJobList, appointments: updatedAppointmentList }\r\n}","import * as types from './appointment.types';\r\nimport { deleteAppointment, deleteJobAndAssociatedAppointments, updateAppointmentOnList, updateJobOnList } from './appointment.utils';\r\n\r\nconst INITIAL_STATE = {\r\n    appointments: [],\r\n    jobs: [],\r\n    history: []\r\n};\r\n\r\nconst appointmentReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_APPOINTMENTS:\r\n            return {\r\n                ...state,\r\n                appointments: [...state.appointments, ...action.payload]\r\n            };\r\n        case types.UPDATED_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: updateAppointmentOnList(state.appointments, action.payload)\r\n            }\r\n        case types.DELETE_APPOINTMENT:\r\n            return {\r\n                ...state,\r\n                appointments: deleteAppointment(state.appointments, action.payload)\r\n            }\r\n        case types.ADD_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: [...state.jobs, action.payload]\r\n            }\r\n        case types.UPDATE_JOB:\r\n            return {\r\n                ...state,\r\n                jobs: updateJobOnList(state.jobs, action.payload)\r\n            }\r\n        case types.DELETE_JOB:\r\n            const { jobs, appointments } = deleteJobAndAssociatedAppointments(action.payload, state.jobs, state.appointments)\r\n            return {\r\n                ...state,\r\n                jobs,\r\n                appointments\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appointmentReducer;","import moment from 'moment';\r\n\r\nconst replacer = (_, value) => value instanceof moment ? value.toISOString() : value\r\n\r\nconst reviver = (_, value) =>\r\n    (typeof value === 'string' && value.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/))\r\n        ? moment(value)\r\n        : value\r\n\r\nexport const encode = toDeshydrate => JSON.stringify(toDeshydrate, replacer)\r\n\r\nexport const decode = toRehydrate => JSON.parse(toRehydrate, reviver)","import * as types from './period.types';\r\n\r\nconst INITIAL_STATE = {\r\n    workStart: null,\r\n    workEnd: null,\r\n    freeStart: null,\r\n    freeEnd: null\r\n};\r\n\r\nconst periodReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SET_WORK_PERIOD:\r\n            return {\r\n                ...state,\r\n                workStart: action.payload.start,\r\n                workEnd: action.payload.end\r\n            };\r\n        case types.SET_FREE_PERIOD:\r\n            return {\r\n                ...state,\r\n                freeStart: action.payload.start,\r\n                freeEnd: action.payload.end\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default periodReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport appointmentReducer from './appointment/appointment.reducer';\r\nimport createTransform from 'redux-persist/es/createTransform';\r\nimport { decode, encode } from '../utils/persistor';\r\n\r\nimport periodReducer from './period/period.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    transforms: [createTransform(encode, decode)]\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    period: periodReducer,\r\n    appointment: appointmentReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import { createStore } from 'redux';\r\n\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root_reducer';\r\nimport logger from 'redux-logger'\r\nimport { applyMiddleware } from '@reduxjs/toolkit';\r\n\r\nconst middlewares = []\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    //Set Development only middlewares\r\n    middlewares.push(logger)\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"antd/dist/antd.css\";\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { store, persistor } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}